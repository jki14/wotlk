import{bs as e,b1 as n,cS as t,cT as a,ds as r,dt as i,du as s,dv as o,cO as l,bo as h,b4 as d,b7 as m,b9 as g,a_ as c,a6 as u,T as f,d as S,a as p,R as b,a3 as E,bm as T,bn as C,D as v}from"./raid_sim_action-9e0deda9.chunk.js";import{B as R,m as y,i as A,r as w,b as P,c as k,a as W,I as x,T as O,q as N}from"./individual_sim_ui-458732be.chunk.js";const B={name:"Arms",data:e.create({talentsString:"3022032023335100102012213231251-305-2033",glyphs:n.create({major1:t.GlyphOfRending,major2:t.GlyphOfMortalStrike,major3:t.GlyphOfExecution,minor1:a.GlyphOfThunderClap,minor2:a.GlyphOfCommand,minor3:a.GlyphOfCharge})})},M={name:"Fury",data:e.create({talentsString:"32002301233-305053000520310053120500351",glyphs:n.create({major1:t.GlyphOfWhirlwind,major2:t.GlyphOfHeroicStrike,major3:t.GlyphOfExecution,minor1:a.GlyphOfBattle,minor2:a.GlyphOfBloodrage,minor3:a.GlyphOfCharge})})},I=r.create({useRend:!1,useMs:!0,useCleave:!1,prioritizeWw:!0,sunderArmor:i.SunderArmorNone,msRageThreshold:35,hsRageThreshold:30,rendHealthThresholdAbove:20,rendRageThresholdBelow:70,slamRageThreshold:25,rendCdThreshold:0,useHsDuringExecute:!0,useBtDuringExecute:!0,useWwDuringExecute:!0,useSlamOverExecute:!0,spamExecute:!0,stanceOption:s.DefaultStance}),H=r.create({useRend:!0,useMs:!0,useCleave:!1,sunderArmor:i.SunderArmorNone,msRageThreshold:355,slamRageThreshold:25,hsRageThreshold:50,rendCdThreshold:0,useHsDuringExecute:!0,spamExecute:!0,stanceOption:s.DefaultStance}),D=o.create({startingRage:0,useRecklessness:!0,shout:l.WarriorShoutCommanding}),G=h.create({flask:d.FlaskOfEndlessRage,food:m.FoodSpicedWormBurger,defaultPotion:g.IndestructiblePotion,prepopPotion:g.PotionOfSpeed}),U={name:"P1 Pre-Raid Fury Preset",tooltip:R,enableWhen:e=>e.getTalents().bloodthirst,gear:c.fromJsonString('{"items": [\n        {\n          "id": 41386,\n          "enchant": 44879,\n          "gems": [\n            41398,\n            42702\n          ]\n        },\n        {\n          "id": 42645,\n          "gems": [\n            40003\n          ]\n        },\n        {\n          "id": 44195,\n          "enchant": 44871\n        },\n        {\n          "id": 37647,\n          "enchant": 55002\n        },\n        {\n          "id": 39606,\n          "enchant": 44489,\n          "gems": [\n            40003,\n            40003\n          ]\n        },\n        {\n          "id": 44203,\n          "enchant": 44484,\n          "gems": [\n            0\n          ]\n        },\n        {\n          "id": 39609,\n          "enchant": 54999,\n          "gems": [\n            40037,\n            0\n          ]\n        },\n        {\n          "id": 40694,\n          "gems": [\n            42149,\n            42149\n          ]\n        },\n        {\n          "id": 44205,\n          "enchant": 38374\n        },\n        {\n          "id": 44306,\n          "enchant": 55016,\n          "gems": [\n            40037,\n            40037\n          ]\n        },\n        {\n          "id": 42642,\n          "gems": [\n            42149\n          ]\n        },\n        {\n          "id": 37642\n        },\n        {\n          "id": 42987\n        },\n        {\n          "id": 40684\n        },\n        {\n          "id": 37852,\n          "enchant": 44492\n        },\n        {\n          "id": 37852,\n          "enchant": 44492\n        },\n        {\n          "id": 37191\n        }\n      ]}')},F={name:"P1 Fury Preset",tooltip:R,enableWhen:e=>e.getTalents().bloodthirst,gear:c.fromJsonString('{ "items": [\n        {\n          "id": 44006,\n          "enchant": 44879,\n          "gems": [\n            41285,\n            42702\n          ]\n        },\n        {\n          "id": 44664,\n          "gems": [\n            40037\n          ]\n        },\n        {\n          "id": 40530,\n          "enchant": 44871,\n          "gems": [\n            42149\n          ]\n        },\n        {\n          "id": 40403,\n          "enchant": 55002\n        },\n        {\n          "id": 40539,\n          "enchant": 44489,\n          "gems": [\n            40037\n          ]\n        },\n        {\n          "id": 39765,\n          "enchant": 44484,\n          "gems": [\n            40037\n          ]\n        },\n        {\n          "id": 40541,\n          "enchant": 54999,\n          "gems": [\n            0\n          ]\n        },\n        {\n          "id": 40205,\n          "gems": [\n            42149\n          ]\n        },\n        {\n          "id": 40529,\n          "enchant": 38374,\n          "gems": [\n            40037,\n            40086\n          ]\n        },\n        {\n          "id": 40591,\n          "enchant": 55016\n        },\n        {\n          "id": 43993,\n          "gems": [\n            42149\n          ]\n        },\n        {\n          "id": 40717\n        },\n        {\n          "id": 42987\n        },\n        {\n          "id": 40256\n        },\n        {\n          "id": 40384,\n          "enchant": 44492\n        },\n        {\n          "id": 40384,\n          "enchant": 44492\n        },\n        {\n          "id": 40385\n        }\n      ]}')},j={name:"P1 Pre-Raid Arms Preset",tooltip:R,enableWhen:e=>e.getTalents().mortalStrike,gear:c.fromJsonString('{ "items": [\n        {\n          "id": 41386,\n          "enchant": 44879,\n          "gems": [\n            41285,\n            42702\n          ]\n        },\n        {\n          "id": 42645,\n          "gems": [\n            40002\n          ]\n        },\n        {\n          "id": 44195,\n          "enchant": 44871\n        },\n        {\n          "id": 37647,\n          "enchant": 55002\n        },\n        {\n          "id": 39606,\n          "enchant": 44489,\n          "gems": [\n            40002,\n            40002\n          ]\n        },\n        {\n          "id": 41355,\n          "enchant": 44484,\n          "gems": [\n            0\n          ]\n        },\n        {\n          "id": 39609,\n          "enchant": 54999,\n          "gems": [\n            40037,\n            0\n          ]\n        },\n        {\n          "id": 40694,\n          "gems": [\n            42149,\n            42149\n          ]\n        },\n        {\n          "id": 37193,\n          "enchant": 38374,\n          "gems": [\n            40002,\n            40037\n          ]\n        },\n        {\n          "id": 44306,\n          "enchant": 55016,\n          "gems": [\n            40086,\n            40002\n          ]\n        },\n        {\n          "id": 42642,\n          "gems": [\n            42149\n          ]\n        },\n        {\n          "id": 37642\n        },\n        {\n          "id": 42987\n        },\n        {\n          "id": 40684\n        },\n        {\n          "id": 37852,\n          "enchant": 44492\n        },\n        {},\n        {\n          "id": 37191\n        }\n      ]}')},z={name:"P1 Arms Preset",tooltip:R,enableWhen:e=>e.getTalents().mortalStrike,gear:c.fromJsonString('{"items": [\n        {\n          "id": 40528,\n          "enchant": 44879,\n          "gems": [\n            41398,\n            42153\n          ]\n        },\n        {\n          "id": 44664,\n          "gems": [\n            39996\n          ]\n        },\n        {\n          "id": 40530,\n          "enchant": 44871,\n          "gems": [\n            40038\n          ]\n        },\n        {\n          "id": 40403,\n          "enchant": 55002\n        },\n        {\n          "id": 40539,\n          "enchant": 44489,\n          "gems": [\n            42153\n          ]\n        },\n        {\n          "id": 40330,\n          "enchant": 44484,\n          "gems": [\n            40002\n          ]\n        },\n        {\n          "id": 40541,\n          "enchant": 54999,\n          "gems": [\n            0\n          ]\n        },\n        {\n          "id": 40205,\n          "gems": [\n            42153\n          ]\n        },\n        {\n          "id": 40318,\n          "enchant": 38374,\n          "gems": [\n            49110,\n            40038\n          ]\n        },\n        {\n          "id": 40591,\n          "enchant": 55016\n        },\n        {\n          "id": 43993,\n          "gems": [\n            40002\n          ]\n        },\n        {\n          "id": 40474\n        },\n        {\n          "id": 42987\n        },\n        {\n          "id": 40256\n        },\n        {\n          "id": 40384,\n          "enchant": 44492\n        },\n        {},\n        {\n          "id": 40385\n        }\n      ]}')},_=y({fieldName:"useRecklessness",id:u.fromSpellId(1719)}),J=A({fieldName:"startingRage",label:"Starting Rage",labelTooltip:"Initial rage at the start of each iteration."}),K=w({fieldName:"shout",values:[{color:"c79c6e",value:l.WarriorShoutNone},{actionId:u.fromSpellId(2048),value:l.WarriorShoutBattle},{actionId:u.fromSpellId(469),value:l.WarriorShoutCommanding}]}),q={inputs:[P({fieldName:"useMs",label:"Use Mortal Strike",labelTooltip:"Use Mortal Strike when rage threshold is met.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>e.getTalents().mortalStrike}),P({fieldName:"useCleave",label:"Use Cleave",labelTooltip:"Use Cleave instead of Heroic Strike."}),P({fieldName:"useRend",label:"Use Rend",labelTooltip:"Use Rend when rage threshold is met and the debuff duration is less than refresh time.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter])}),P({fieldName:"prioritizeWw",label:"Prioritize WW",labelTooltip:"Prioritize Whirlwind over Bloodthirst.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>e.getTalents().bloodthirst}),k({fieldName:"msRageThreshold",label:"Mortal Strike rage threshold",labelTooltip:"Mortal Strike when rage is above:",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>e.getTalents().mortalStrike}),k({fieldName:"slamRageThreshold",label:"Slam rage threshold",labelTooltip:"Slam when rage is above:",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>e.getTalents().mortalStrike}),k({fieldName:"hsRageThreshold",label:"HS rage threshold",labelTooltip:"Heroic Strike when rage is above:"}),k({fieldName:"rendHealthThresholdAbove",label:"Rend health threshold (%)",labelTooltip:"Rend will only be used when boss health is above this value in %.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>1==e.getRotation().useRend&&e.getTalents().bloodthirst}),k({fieldName:"rendRageThresholdBelow",label:"Rend rage threshold below",labelTooltip:"Rend will only be used when rage is smaller than this value.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>1==e.getRotation().useRend&&e.getTalents().bloodthirst}),k({fieldName:"rendCdThreshold",label:"Rend Refresh Time",labelTooltip:"Refresh Rend when the remaining duration is less than this amount of time (seconds).",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>1==e.getRotation().useRend}),P({fieldName:"useHsDuringExecute",label:"HS during Execute Phase",labelTooltip:"Use Heroic Strike during Execute Phase."}),P({fieldName:"useBtDuringExecute",label:"BT during Execute Phase",labelTooltip:"Use Bloodthirst during Execute Phase.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>e.getTalents().bloodthirst}),P({fieldName:"useWwDuringExecute",label:"WW during Execute Phase",labelTooltip:"Use Whirlwind during Execute Phase.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>e.getTalents().bloodthirst}),P({fieldName:"useSlamOverExecute",label:"Slam Over Execute",labelTooltip:"Use Slam Over Execute when Bloodsurge Procs in Execute Phase.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>e.getTalents().bloodthirst}),P({fieldName:"spamExecute",label:"Spam Execute",labelTooltip:"Use Execute whenever possible during Execute Phase.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>e.getTalents().mortalStrike}),W({fieldName:"sunderArmor",label:"Sunder Armor",values:[{name:"Never",value:i.SunderArmorNone},{name:"Help Stack",value:i.SunderArmorHelpStack},{name:"Maintain Debuff",value:i.SunderArmorMaintain}]}),W({fieldName:"stanceOption",label:"Stance Option",labelTooltip:"Stance to stay on. The default for Fury (Bloodthirst) is Berserker Stance and Battle Stance for everything else.",values:[{name:"Default",value:s.DefaultStance},{name:"Battle Stance",value:s.BattleStance},{name:"Berserker Stance",value:s.BerserkerStance}]}),P({fieldName:"maintainDemoShout",label:"Maintain Demo Shout",labelTooltip:"Keep Demo Shout active on the primary target."}),P({fieldName:"maintainThunderClap",label:"Maintain Thunder Clap",labelTooltip:"Keep Thunder Clap active on the primary target."})]};class L extends x{constructor(e,n){super(e,n,{cssClass:"warrior-sim-ui",knownIssues:[],epStats:[S.StatStrength,S.StatAgility,S.StatAttackPower,S.StatExpertise,S.StatMeleeHit,S.StatMeleeCrit,S.StatMeleeHaste,S.StatArmorPenetration,S.StatArmor],epReferenceStat:S.StatAttackPower,displayStats:[S.StatHealth,S.StatStamina,S.StatStrength,S.StatAgility,S.StatAttackPower,S.StatExpertise,S.StatMeleeHit,S.StatMeleeCrit,S.StatMeleeHaste,S.StatArmorPenetration,S.StatArmor],defaults:{gear:F.gear,epWeights:p.fromMap({[S.StatStrength]:3.23,[S.StatAgility]:3,[S.StatAttackPower]:1,[S.StatExpertise]:3.29,[S.StatMeleeHit]:.48,[S.StatMeleeCrit]:3.62,[S.StatMeleeHaste]:2.92,[S.StatArmorPenetration]:3.19,[S.StatArmor]:.08}),consumes:G,rotation:I,talents:M.data,specOptions:D,raidBuffs:b.create({giftOfTheWild:E.TristateEffectImproved,swiftRetribution:!0,strengthOfEarthTotem:E.TristateEffectImproved,icyTalons:!0,abominationsMight:!0,leaderOfThePack:E.TristateEffectRegular,sanctifiedRetribution:!0,bloodlust:!0,devotionAura:E.TristateEffectImproved,stoneskinTotem:E.TristateEffectImproved}),partyBuffs:T.create({heroicPresence:!1}),individualBuffs:C.create({blessingOfKings:!0,blessingOfMight:E.TristateEffectImproved}),debuffs:v.create({bloodFrenzy:!0,heartOfTheCrusader:!0,mangle:!0,sunderArmor:!0,curseOfWeakness:E.TristateEffectRegular,faerieFire:E.TristateEffectImproved})},playerIconInputs:[K,_],rotationInputs:q,includeBuffDebuffInputs:[],excludeBuffDebuffInputs:[],otherInputs:{inputs:[J,O,N]},encounterPicker:{showExecuteProportion:!0},presets:{talents:[B,M],gear:[U,F,j,z]}})}}export{H as A,D,M as F,z as P,L as W,B as a,G as b,I as c,F as d};
//# sourceMappingURL=sim-aed2738f.chunk.js.map
