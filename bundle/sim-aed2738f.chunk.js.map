{"version":3,"file":"sim-aed2738f.chunk.js","sources":["../../../ui/warrior/presets.ts","../../../ui/warrior/inputs.ts","../../../ui/warrior/sim.ts"],"sourcesContent":["import { Consumes } from '../core/proto/common.js';\nimport { EquipmentSpec } from '../core/proto/common.js';\nimport { Flask } from '../core/proto/common.js';\nimport { Food } from '../core/proto/common.js';\nimport { Glyphs } from '../core/proto/common.js';\nimport { ItemSpec } from '../core/proto/common.js';\nimport { Potions } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Faction } from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport { Player } from '../core/player.js';\n\nimport {\n\tWarriorShout,\n\tWarriorTalents as WarriorTalents,\n\tWarrior,\n\tWarrior_Rotation as WarriorRotation,\n\tWarrior_Rotation_SunderArmor as SunderArmor,\n\tWarrior_Options as WarriorOptions,\n\tWarriorMajorGlyph,\n\tWarriorMinorGlyph,\n\tWarrior_Rotation_StanceOption as StanceOption,\n} from '../core/proto/warrior.js';\n\nimport * as Gems from '../core/proto_utils/gems.js';\nimport * as Tooltips from '../core/constants/tooltips.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const ArmsTalents = {\n\tname: 'Arms',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '3022032023335100102012213231251-305-2033',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: WarriorMajorGlyph.GlyphOfRending,\n\t\t\tmajor2: WarriorMajorGlyph.GlyphOfMortalStrike,\n\t\t\tmajor3: WarriorMajorGlyph.GlyphOfExecution,\n\t\t\tminor1: WarriorMinorGlyph.GlyphOfThunderClap,\n\t\t\tminor2: WarriorMinorGlyph.GlyphOfCommand,\n\t\t\tminor3: WarriorMinorGlyph.GlyphOfCharge,\n\t\t}),\n\t}),\n};\n\nexport const FuryTalents = {\n\tname: 'Fury',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '32002301233-305053000520310053120500351',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: WarriorMajorGlyph.GlyphOfWhirlwind,\n\t\t\tmajor2: WarriorMajorGlyph.GlyphOfHeroicStrike,\n\t\t\tmajor3: WarriorMajorGlyph.GlyphOfExecution,\n\t\t\tminor1: WarriorMinorGlyph.GlyphOfBattle,\n\t\t\tminor2: WarriorMinorGlyph.GlyphOfBloodrage,\n\t\t\tminor3: WarriorMinorGlyph.GlyphOfCharge,\n\t\t}),\n\t}),\n};\n\nexport const DefaultRotation = WarriorRotation.create({\n\tuseRend: false,\n\tuseMs: true,\n\tuseCleave: false,\n\n\tprioritizeWw: true,\n\tsunderArmor: SunderArmor.SunderArmorNone,\n\n\tmsRageThreshold: 35,\n\thsRageThreshold: 30,\n  rendHealthThresholdAbove: 20,\n\trendRageThresholdBelow: 70,\n\tslamRageThreshold: 25,\n\trendCdThreshold: 0,\n\tuseHsDuringExecute: true,\n\tuseBtDuringExecute: true,\n\tuseWwDuringExecute: true,\n\tuseSlamOverExecute: true,\n\tspamExecute: true,\n\tstanceOption: StanceOption.DefaultStance,\n});\n\nexport const ArmsRotation = WarriorRotation.create({\n\tuseRend: true,\n\tuseMs: true,\n\tuseCleave: false,\n\tsunderArmor: SunderArmor.SunderArmorNone,\n\tmsRageThreshold: 355,\n\tslamRageThreshold: 25,\n\thsRageThreshold: 50,\n\trendCdThreshold: 0,\n\tuseHsDuringExecute: true,\n\tspamExecute: true,\n\tstanceOption: StanceOption.DefaultStance,\n});\n\nexport const DefaultOptions = WarriorOptions.create({\n\tstartingRage: 0,\n\tuseRecklessness: true,\n\tshout: WarriorShout.WarriorShoutCommanding,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodSpicedWormBurger,\n\tdefaultPotion: Potions.IndestructiblePotion,\n\tprepopPotion: Potions.PotionOfSpeed,\n});\n\nexport const P1_PRERAID_FURY_PRESET = {\n\tname: 'P1 Pre-Raid Fury Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().bloodthirst,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n        {\n          \"id\": 41386,\n          \"enchant\": 44879,\n          \"gems\": [\n            41398,\n            42702\n          ]\n        },\n        {\n          \"id\": 42645,\n          \"gems\": [\n            40003\n          ]\n        },\n        {\n          \"id\": 44195,\n          \"enchant\": 44871\n        },\n        {\n          \"id\": 37647,\n          \"enchant\": 55002\n        },\n        {\n          \"id\": 39606,\n          \"enchant\": 44489,\n          \"gems\": [\n            40003,\n            40003\n          ]\n        },\n        {\n          \"id\": 44203,\n          \"enchant\": 44484,\n          \"gems\": [\n            0\n          ]\n        },\n        {\n          \"id\": 39609,\n          \"enchant\": 54999,\n          \"gems\": [\n            40037,\n            0\n          ]\n        },\n        {\n          \"id\": 40694,\n          \"gems\": [\n            42149,\n            42149\n          ]\n        },\n        {\n          \"id\": 44205,\n          \"enchant\": 38374\n        },\n        {\n          \"id\": 44306,\n          \"enchant\": 55016,\n          \"gems\": [\n            40037,\n            40037\n          ]\n        },\n        {\n          \"id\": 42642,\n          \"gems\": [\n            42149\n          ]\n        },\n        {\n          \"id\": 37642\n        },\n        {\n          \"id\": 42987\n        },\n        {\n          \"id\": 40684\n        },\n        {\n          \"id\": 37852,\n          \"enchant\": 44492\n        },\n        {\n          \"id\": 37852,\n          \"enchant\": 44492\n        },\n        {\n          \"id\": 37191\n        }\n      ]}`),\n};\n\nexport const P1_FURY_PRESET = {\n\tname: 'P1 Fury Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().bloodthirst,\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\n        {\n          \"id\": 44006,\n          \"enchant\": 44879,\n          \"gems\": [\n            41285,\n            42702\n          ]\n        },\n        {\n          \"id\": 44664,\n          \"gems\": [\n            40037\n          ]\n        },\n        {\n          \"id\": 40530,\n          \"enchant\": 44871,\n          \"gems\": [\n            42149\n          ]\n        },\n        {\n          \"id\": 40403,\n          \"enchant\": 55002\n        },\n        {\n          \"id\": 40539,\n          \"enchant\": 44489,\n          \"gems\": [\n            40037\n          ]\n        },\n        {\n          \"id\": 39765,\n          \"enchant\": 44484,\n          \"gems\": [\n            40037\n          ]\n        },\n        {\n          \"id\": 40541,\n          \"enchant\": 54999,\n          \"gems\": [\n            0\n          ]\n        },\n        {\n          \"id\": 40205,\n          \"gems\": [\n            42149\n          ]\n        },\n        {\n          \"id\": 40529,\n          \"enchant\": 38374,\n          \"gems\": [\n            40037,\n            40086\n          ]\n        },\n        {\n          \"id\": 40591,\n          \"enchant\": 55016\n        },\n        {\n          \"id\": 43993,\n          \"gems\": [\n            42149\n          ]\n        },\n        {\n          \"id\": 40717\n        },\n        {\n          \"id\": 42987\n        },\n        {\n          \"id\": 40256\n        },\n        {\n          \"id\": 40384,\n          \"enchant\": 44492\n        },\n        {\n          \"id\": 40384,\n          \"enchant\": 44492\n        },\n        {\n          \"id\": 40385\n        }\n      ]}`),\n};\n\nexport const P1_PRERAID_ARMS_PRESET = {\n\tname: 'P1 Pre-Raid Arms Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().mortalStrike,\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\n        {\n          \"id\": 41386,\n          \"enchant\": 44879,\n          \"gems\": [\n            41285,\n            42702\n          ]\n        },\n        {\n          \"id\": 42645,\n          \"gems\": [\n            40002\n          ]\n        },\n        {\n          \"id\": 44195,\n          \"enchant\": 44871\n        },\n        {\n          \"id\": 37647,\n          \"enchant\": 55002\n        },\n        {\n          \"id\": 39606,\n          \"enchant\": 44489,\n          \"gems\": [\n            40002,\n            40002\n          ]\n        },\n        {\n          \"id\": 41355,\n          \"enchant\": 44484,\n          \"gems\": [\n            0\n          ]\n        },\n        {\n          \"id\": 39609,\n          \"enchant\": 54999,\n          \"gems\": [\n            40037,\n            0\n          ]\n        },\n        {\n          \"id\": 40694,\n          \"gems\": [\n            42149,\n            42149\n          ]\n        },\n        {\n          \"id\": 37193,\n          \"enchant\": 38374,\n          \"gems\": [\n            40002,\n            40037\n          ]\n        },\n        {\n          \"id\": 44306,\n          \"enchant\": 55016,\n          \"gems\": [\n            40086,\n            40002\n          ]\n        },\n        {\n          \"id\": 42642,\n          \"gems\": [\n            42149\n          ]\n        },\n        {\n          \"id\": 37642\n        },\n        {\n          \"id\": 42987\n        },\n        {\n          \"id\": 40684\n        },\n        {\n          \"id\": 37852,\n          \"enchant\": 44492\n        },\n        {},\n        {\n          \"id\": 37191\n        }\n      ]}`),\n};\n\nexport const P1_ARMS_PRESET = {\n\tname: 'P1 Arms Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().mortalStrike,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n        {\n          \"id\": 40528,\n          \"enchant\": 44879,\n          \"gems\": [\n            41398,\n            42153\n          ]\n        },\n        {\n          \"id\": 44664,\n          \"gems\": [\n            39996\n          ]\n        },\n        {\n          \"id\": 40530,\n          \"enchant\": 44871,\n          \"gems\": [\n            40038\n          ]\n        },\n        {\n          \"id\": 40403,\n          \"enchant\": 55002\n        },\n        {\n          \"id\": 40539,\n          \"enchant\": 44489,\n          \"gems\": [\n            42153\n          ]\n        },\n        {\n          \"id\": 40330,\n          \"enchant\": 44484,\n          \"gems\": [\n            40002\n          ]\n        },\n        {\n          \"id\": 40541,\n          \"enchant\": 54999,\n          \"gems\": [\n            0\n          ]\n        },\n        {\n          \"id\": 40205,\n          \"gems\": [\n            42153\n          ]\n        },\n        {\n          \"id\": 40318,\n          \"enchant\": 38374,\n          \"gems\": [\n            49110,\n            40038\n          ]\n        },\n        {\n          \"id\": 40591,\n          \"enchant\": 55016\n        },\n        {\n          \"id\": 43993,\n          \"gems\": [\n            40002\n          ]\n        },\n        {\n          \"id\": 40474\n        },\n        {\n          \"id\": 42987\n        },\n        {\n          \"id\": 40256\n        },\n        {\n          \"id\": 40384,\n          \"enchant\": 44492\n        },\n        {},\n        {\n          \"id\": 40385\n        }\n      ]}`),\n};\n","import { IconPickerConfig } from '../core/components/icon_picker.js';\nimport { RaidTarget } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { NO_TARGET } from '../core/proto_utils/utils.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { Sim } from '../core/sim.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { Target } from '../core/target.js';\n\nimport {\n\tWarriorShout,\n\tWarriorTalents as WarriorTalents,\n\tWarrior,\n\tWarrior_Rotation as WarriorRotation,\n\tWarrior_Rotation_SunderArmor as SunderArmor,\n\tWarrior_Options as WarriorOptions,\n\tWarrior_Rotation_StanceOption as StanceOption\n} from '../core/proto/warrior.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\nimport * as Presets from './presets.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const Recklessness = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecWarrior>({\n\tfieldName: 'useRecklessness',\n\tid: ActionId.fromSpellId(1719),\n});\n\nexport const StartingRage = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecWarrior>({\n\tfieldName: 'startingRage',\n\tlabel: 'Starting Rage',\n\tlabelTooltip: 'Initial rage at the start of each iteration.',\n});\n\nexport const ShoutPicker = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecWarrior, WarriorShout>({\n\tfieldName: 'shout',\n\tvalues: [\n\t\t{ color: 'c79c6e', value: WarriorShout.WarriorShoutNone },\n\t\t{ actionId: ActionId.fromSpellId(2048), value: WarriorShout.WarriorShoutBattle },\n\t\t{ actionId: ActionId.fromSpellId(469), value: WarriorShout.WarriorShoutCommanding },\n\t],\n});\n\nexport const WarriorRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useMs',\n\t\t\tlabel: 'Use Mortal Strike',\n\t\t\tlabelTooltip: 'Use Mortal Strike when rage threshold is met.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().mortalStrike,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useCleave',\n\t\t\tlabel: 'Use Cleave',\n\t\t\tlabelTooltip: 'Use Cleave instead of Heroic Strike.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useRend',\n\t\t\tlabel: 'Use Rend',\n\t\t\tlabelTooltip: 'Use Rend when rage threshold is met and the debuff duration is less than refresh time.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'prioritizeWw',\n\t\t\tlabel: 'Prioritize WW',\n\t\t\tlabelTooltip: 'Prioritize Whirlwind over Bloodthirst.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().bloodthirst,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'msRageThreshold',\n\t\t\tlabel: 'Mortal Strike rage threshold',\n\t\t\tlabelTooltip: 'Mortal Strike when rage is above:',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().mortalStrike,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'slamRageThreshold',\n\t\t\tlabel: 'Slam rage threshold',\n\t\t\tlabelTooltip: 'Slam when rage is above:',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().mortalStrike,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'hsRageThreshold',\n\t\t\tlabel: 'HS rage threshold',\n\t\t\tlabelTooltip: 'Heroic Strike when rage is above:',\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'rendHealthThresholdAbove',\n\t\t\tlabel: 'Rend health threshold (%)',\n\t\t\tlabelTooltip: 'Rend will only be used when boss health is above this value in %.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getRotation().useRend == true && player.getTalents().bloodthirst,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'rendRageThresholdBelow',\n\t\t\tlabel: 'Rend rage threshold below',\n\t\t\tlabelTooltip: 'Rend will only be used when rage is smaller than this value.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getRotation().useRend == true && player.getTalents().bloodthirst,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'rendCdThreshold',\n\t\t\tlabel: 'Rend Refresh Time',\n\t\t\tlabelTooltip: 'Refresh Rend when the remaining duration is less than this amount of time (seconds).',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getRotation().useRend == true,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useHsDuringExecute',\n\t\t\tlabel: 'HS during Execute Phase',\n\t\t\tlabelTooltip: 'Use Heroic Strike during Execute Phase.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useBtDuringExecute',\n\t\t\tlabel: 'BT during Execute Phase',\n\t\t\tlabelTooltip: 'Use Bloodthirst during Execute Phase.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().bloodthirst,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useWwDuringExecute',\n\t\t\tlabel: 'WW during Execute Phase',\n\t\t\tlabelTooltip: 'Use Whirlwind during Execute Phase.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().bloodthirst,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useSlamOverExecute',\n\t\t\tlabel: 'Slam Over Execute',\n\t\t\tlabelTooltip: 'Use Slam Over Execute when Bloodsurge Procs in Execute Phase.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().bloodthirst,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'spamExecute',\n\t\t\tlabel: 'Spam Execute',\n\t\t\tlabelTooltip: 'Use Execute whenever possible during Execute Phase.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().mortalStrike,\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecWarrior, SunderArmor>({\n\t\t\tfieldName: 'sunderArmor',\n\t\t\tlabel: 'Sunder Armor',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Never', value: SunderArmor.SunderArmorNone },\n\t\t\t\t{ name: 'Help Stack', value: SunderArmor.SunderArmorHelpStack },\n\t\t\t\t{ name: 'Maintain Debuff', value: SunderArmor.SunderArmorMaintain },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecWarrior, StanceOption>({\n\t\t\tfieldName: 'stanceOption',\n\t\t\tlabel: 'Stance Option',\n\t\t\tlabelTooltip: 'Stance to stay on. The default for Fury (Bloodthirst) is Berserker Stance and Battle Stance for everything else.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Default', value: StanceOption.DefaultStance },\n\t\t\t\t{ name: 'Battle Stance', value: StanceOption.BattleStance },\n\t\t\t\t{ name: 'Berserker Stance', value: StanceOption.BerserkerStance },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'maintainDemoShout',\n\t\t\tlabel: 'Maintain Demo Shout',\n\t\t\tlabelTooltip: 'Keep Demo Shout active on the primary target.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'maintainThunderClap',\n\t\t\tlabel: 'Maintain Thunder Clap',\n\t\t\tlabelTooltip: 'Keep Thunder Clap active on the primary target.',\n\t\t}),\n\t],\n};\n","import { RaidBuffs } from '../core/proto/common.js';\nimport { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Debuffs } from '../core/proto/common.js';\nimport { Class } from '../core/proto/common.js';\nimport { Consumes } from '../core/proto/common.js';\nimport { Encounter } from '../core/proto/common.js';\nimport { ItemSlot } from '../core/proto/common.js';\nimport { MobType } from '../core/proto/common.js';\nimport { RaidTarget } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { Player } from '../core/player.js';\nimport { Sim } from '../core/sim.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\n\nimport { Warrior, Warrior_Rotation as WarriorRotation, WarriorTalents as WarriorTalents, Warrior_Options as WarriorOptions } from '../core/proto/warrior.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Tooltips from '../core/constants/tooltips.js';\n\nimport * as WarriorInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class WarriorSimUI extends IndividualSimUI<Spec.SpecWarrior> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecWarrior>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'warrior-sim-ui',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatExpertise,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatArmor,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\t\t\tepReferenceStat: Stat.StatAttackPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatStamina,\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatExpertise,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatArmor,\n\t\t\t],\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.P1_FURY_PRESET.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatStrength]: 3.23,\n\t\t\t\t\t[Stat.StatAgility]: 3.00,\n\t\t\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t\t\t[Stat.StatExpertise]: 3.29,\n\t\t\t\t\t[Stat.StatMeleeHit]: 0.48,\n\t\t\t\t\t[Stat.StatMeleeCrit]: 3.62,\n\t\t\t\t\t[Stat.StatMeleeHaste]: 2.92,\n\t\t\t\t\t[Stat.StatArmorPenetration]: 3.19,\n\t\t\t\t\t[Stat.StatArmor]: 0.08,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.FuryTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: RaidBuffs.create({\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tswiftRetribution: true,\n\t\t\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t\ticyTalons: true,\n\t\t\t\t\tabominationsMight: true,\n\t\t\t\t\tleaderOfThePack: TristateEffect.TristateEffectRegular,\n\t\t\t\t\tsanctifiedRetribution: true,\n\t\t\t\t\tbloodlust: true,\n\t\t\t\t\tdevotionAura: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tstoneskinTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tpartyBuffs: PartyBuffs.create({\n\t\t\t\t\theroicPresence: false,\n\t\t\t\t}),\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\t\t\tblessingOfKings: true,\n\t\t\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tdebuffs: Debuffs.create({\n\t\t\t\t\tbloodFrenzy: true,\n\t\t\t\t\theartOfTheCrusader: true,\n\t\t\t\t\tmangle: true,\n\t\t\t\t\tsunderArmor: true,\n\t\t\t\t\tcurseOfWeakness: TristateEffect.TristateEffectRegular,\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t},\n\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t\tWarriorInputs.ShoutPicker,\n\t\t\t\tWarriorInputs.Recklessness,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: WarriorInputs.WarriorRotationConfig,\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tWarriorInputs.StartingRage,\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\t\t],\n\t\t\t},\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: true,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.ArmsTalents,\n\t\t\t\t\tPresets.FuryTalents,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.P1_PRERAID_FURY_PRESET,\n\t\t\t\t\tPresets.P1_FURY_PRESET,\n\t\t\t\t\tPresets.P1_PRERAID_ARMS_PRESET,\n\t\t\t\t\tPresets.P1_ARMS_PRESET,\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["ArmsTalents","name","data","SavedTalents","create","talentsString","glyphs","Glyphs","major1","WarriorMajorGlyph","GlyphOfRending","major2","GlyphOfMortalStrike","major3","GlyphOfExecution","minor1","WarriorMinorGlyph","GlyphOfThunderClap","minor2","GlyphOfCommand","minor3","GlyphOfCharge","FuryTalents","GlyphOfWhirlwind","GlyphOfHeroicStrike","GlyphOfBattle","GlyphOfBloodrage","DefaultRotation","WarriorRotation","useRend","useMs","useCleave","prioritizeWw","sunderArmor","SunderArmor","SunderArmorNone","msRageThreshold","hsRageThreshold","rendHealthThresholdAbove","rendRageThresholdBelow","slamRageThreshold","rendCdThreshold","useHsDuringExecute","useBtDuringExecute","useWwDuringExecute","useSlamOverExecute","spamExecute","stanceOption","StanceOption","DefaultStance","ArmsRotation","DefaultOptions","WarriorOptions","startingRage","useRecklessness","shout","WarriorShout","WarriorShoutCommanding","DefaultConsumes","Consumes","flask","Flask","FlaskOfEndlessRage","food","Food","FoodSpicedWormBurger","defaultPotion","Potions","IndestructiblePotion","prepopPotion","PotionOfSpeed","P1_PRERAID_FURY_PRESET","tooltip","Tooltips.BASIC_BIS_DISCLAIMER","enableWhen","player","getTalents","bloodthirst","gear","EquipmentSpec","fromJsonString","P1_FURY_PRESET","P1_PRERAID_ARMS_PRESET","mortalStrike","P1_ARMS_PRESET","Recklessness","InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","StartingRage","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","ShoutPicker","InputHelpers.makeSpecOptionsEnumIconInput","values","color","value","WarriorShoutNone","actionId","WarriorShoutBattle","WarriorRotationConfig","inputs","InputHelpers.makeRotationBooleanInput","changeEmitter","TypedEvent","onAny","rotationChangeEmitter","talentsChangeEmitter","showWhen","InputHelpers.makeRotationNumberInput","getRotation","InputHelpers.makeRotationEnumInput","SunderArmorHelpStack","SunderArmorMaintain","BattleStance","BerserkerStance","WarriorSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","knownIssues","epStats","Stat","StatStrength","StatAgility","StatAttackPower","StatExpertise","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatArmor","epReferenceStat","displayStats","StatHealth","StatStamina","defaults","Presets.P1_FURY_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","talents","Presets.FuryTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","swiftRetribution","strengthOfEarthTotem","icyTalons","abominationsMight","leaderOfThePack","TristateEffectRegular","sanctifiedRetribution","bloodlust","devotionAura","stoneskinTotem","partyBuffs","PartyBuffs","heroicPresence","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Debuffs","bloodFrenzy","heartOfTheCrusader","mangle","curseOfWeakness","faerieFire","playerIconInputs","WarriorInputs.ShoutPicker","WarriorInputs.Recklessness","rotationInputs","WarriorInputs.WarriorRotationConfig","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","WarriorInputs.StartingRage","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.ArmsTalents","Presets.P1_PRERAID_FURY_PRESET","Presets.P1_PRERAID_ARMS_PRESET","Presets.P1_ARMS_PRESET"],"mappings":"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"}