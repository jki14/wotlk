{"version":3,"file":"sim-386779f8.chunk.js","sources":["../../../ui/deathknight/inputs.ts","../../../ui/deathknight/presets.ts","../../../ui/deathknight/sim.ts"],"sourcesContent":["import { RaidTarget, Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\n\nimport {\n\tDeathknightTalents as DeathKnightTalents,\n\tDeathknight_Rotation_ArmyOfTheDead as ArmyOfTheDead,\n\tDeathknight_Rotation_FirstDisease as FirstDisease,\n\tDeathknight_Rotation_DeathAndDecayPrio as DeathAndDecayPrio,\n\tDeathknight_Rotation_Presence as StartingPresence,\n\tDeathknight_Rotation_BloodRuneFiller as BloodRuneFiller,\n\tDeathknight_Rotation_BloodTap as BloodTap,\n\tDeathknight_Rotation_FrostRotationType as FrostRotationType,\n\tDeathknight_Rotation_CustomSpellOption as CustomSpellOption,\n\tDeathknight_Rotation as DeathKnightRotation,\n\tDeathknight_Options as DeathKnightOptions,\n} from '../core/proto/deathknight.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\nimport { Player } from '../core/player';\nimport { EventID, TypedEvent } from '../core/typed_event';\nimport { NO_TARGET } from '../core/proto_utils/utils.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const SelfUnholyFrenzy = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'unholyFrenzyTarget',\n\tlabel: 'Self Unholy Frenzy',\n\tlabelTooltip: 'Cast Unholy Frenzy on yourself.',\n\textraCssClasses: [\n\t\t'within-raid-sim-hide',\n\t],\n\tgetValue: (player: Player<Spec.SpecDeathknight>) => player.getSpecOptions().unholyFrenzyTarget?.targetIndex != NO_TARGET,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecDeathknight>, newValue: boolean) => {\n\t\tconst newOptions = player.getSpecOptions();\n\t\tnewOptions.unholyFrenzyTarget = RaidTarget.create({\n\t\t\ttargetIndex: newValue ? 0 : NO_TARGET,\n\t\t});\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t},\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().hysteria,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const StartingRunicPower = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'startingRunicPower',\n\tlabel: 'Starting Runic Power',\n\tlabelTooltip: 'Initial RP at the start of each iteration.',\n});\n\nexport const PetUptime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'petUptime',\n\tlabel: 'Ghoul Uptime (%)',\n\tlabelTooltip: 'Percent of the fight duration for which your ghoul will be on target.',\n\tpercent: true,\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().masterOfGhouls,\n});\n\nexport const PrecastGhoulFrenzy = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'precastGhoulFrenzy',\n\tlabel: 'Pre-Cast Ghoul Frenzy',\n\tlabelTooltip: 'Cast Ghoul Frenzy 10 seconds before combat starts.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && player.getTalents().ghoulFrenzy,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const PrecastHornOfWinter = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'precastHornOfWinter',\n\tlabel: 'Pre-Cast Horn of Winter',\n\tlabelTooltip: 'Precast Horn of Winter for 10 extra runic power before fight.',\n});\n\nexport const RefreshHornOfWinter = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'refreshHornOfWinter',\n\tlabel: 'Refresh Horn of Winter',\n\tlabelTooltip: 'Refresh Horn of Winter on free GCDs.',\n});\n\nexport const DiseaseRefreshDuration = InputHelpers.makeRotationNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'diseaseRefreshDuration',\n\tlabel: 'Disease Refresh Duration',\n\tlabelTooltip: 'Minimum duration for refreshing a disease.',\n});\n\nexport const UseDeathAndDecay = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'useDeathAndDecay',\n\tlabel: 'Death and Decay',\n\tlabelTooltip: 'Use Death and Decay based rotation.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && player.getTalents().scourgeStrike && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const SetDeathAndDecayPrio = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, DeathAndDecayPrio>({\n\tfieldName: 'deathAndDecayPrio',\n\tlabel: 'Death and Decay Prio',\n\tlabelTooltip: '<p>Chose how to prioritize death and decay usage:</p>\\\n\t\t<p><b>Max Rune Downtime</b>: Prioritizes spending runes over holding them for death and decay</p>\\\n\t\t<p><b>Max Dnd Uptime</b>: Prioritizes dnd uptime and can hold runes for longer then rune grace</p>',\n\tvalues: [\n\t\t{ name: 'Max Rune Downtime', value: DeathAndDecayPrio.MaxRuneDowntime },\n\t\t{ name: 'Max Dnd Uptime', value: DeathAndDecayPrio.MaxDndUptime },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && (player.getRotation().useDeathAndDecay || !player.getTalents().scourgeStrike) && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const UseEmpowerRuneWeapon = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'useEmpowerRuneWeapon',\n\tlabel: 'Empower Rune Weapon',\n\tlabelTooltip: 'Use Empower Rune Weapon in rotation.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => !player.getRotation().autoRotation && player.getRotation().frostRotationType != FrostRotationType.Custom,\n});\n\nexport const BloodlustPresence = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, StartingPresence>({\n\tfieldName: 'blPresence',\n\tlabel: 'Bloodlust Presence',\n\tlabelTooltip: 'Presence during bloodlust.',\n\tvalues: [\n\t\t{ name: 'Blood', value: StartingPresence.Blood },\n\t\t{ name: 'Unholy', value: StartingPresence.Unholy },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const BloodTapGhoulFrenzy = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'btGhoulFrenzy',\n\tlabel: 'BT Ghoul Frenzy',\n\tlabelTooltip: 'Use Ghoul Frenzy only with Blood Tap.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().ghoulFrenzy && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const FirstDiseaseInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, FirstDisease>({\n\tfieldName: 'firstDisease',\n\tlabel: 'First Disease',\n\tlabelTooltip: 'Chose which disease to apply first.',\n\tvalues: [\n\t\t{ name: 'Frost Fever', value: FirstDisease.FrostFever },\n\t\t{ name: 'Blood Plague', value: FirstDisease.BloodPlague },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const ArmyOfTheDeadInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, ArmyOfTheDead>({\n\tfieldName: 'armyOfTheDead',\n\tlabel: 'Army of the Dead',\n\tlabelTooltip: 'Chose how to use Army of the Dead.',\n\tvalues: [\n\t\t{ name: 'Do not use', value: ArmyOfTheDead.DoNotUse },\n\t\t{ name: 'Pre pull', value: ArmyOfTheDead.PreCast },\n\t\t{ name: 'As Major CD', value: ArmyOfTheDead.AsMajorCd },\n\t],\n});\n\nexport const StartingPresenceInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, StartingPresence>({\n\tfieldName: 'startingPresence',\n\tlabel: 'Starting Presence',\n\tlabelTooltip: 'Chose the presence you start combat in.',\n\tvalues: [\n\t\t{ name: 'Blood', value: StartingPresence.Blood },\n\t\t{ name: 'Unholy', value: StartingPresence.Unholy },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const BloodRuneFillerInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, BloodRuneFiller>({\n\tfieldName: 'bloodRuneFiller',\n\tlabel: 'Blood Rune Filler',\n\tlabelTooltip: 'Chose what to spend your free blood runes on.',\n\tvalues: [\n\t\t{ name: 'Blood Strike', value: BloodRuneFiller.BloodStrike },\n\t\t{ name: 'Blood Boil', value: BloodRuneFiller.BloodBoil },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const BloodTapInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, BloodTap>({\n\tfieldName: 'bloodTap',\n\tlabel: 'Blood Tap',\n\tlabelTooltip: 'Chose what to spend your Blood Tap on.',\n\tvalues: [\n\t\t{ name: 'Ghoul Frenzy', value: BloodTap.GhoulFrenzy },\n\t\t{ name: 'Icy Touch', value: BloodTap.IcyTouch },\n\t\t{ name: 'Blood Strike', value: BloodTap.BloodStrikeBT },\n\t\t{ name: 'Blood Boil', value: BloodTap.BloodBoilBT },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const UseAMSInput = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'useAms',\n\tlabel: 'Use AMS',\n\tlabelTooltip: 'Use AMS around predicted damage for a RP gain.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast && !player.getRotation().autoRotation && player.getRotation().frostRotationType != FrostRotationType.Custom,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const AvgAMSSuccessRateInput = InputHelpers.makeRotationNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'avgAmsSuccessRate',\n\tlabel: 'Avg AMS Success %',\n\tlabelTooltip: 'Chance for damage to be taken during the 5 second window of AMS.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getRotation().useAms == true && !player.getRotation().autoRotation && player.getTalents().howlingBlast && player.getRotation().frostRotationType != FrostRotationType.Custom,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const AvgAMSHitInput = InputHelpers.makeRotationNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'avgAmsHit',\n\tlabel: 'Avg AMS Hit',\n\tlabelTooltip: 'How much on average (+-10%) the character is hit for when AMS is successful.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getRotation().useAms == true && !player.getRotation().autoRotation && player.getTalents().howlingBlast && player.getRotation().frostRotationType != FrostRotationType.Custom,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const OblitDelayDurationInput = InputHelpers.makeRotationNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'oblitDelayDuration',\n\tlabel: 'Oblit Delay (ms)',\n\tlabelTooltip: 'How long a FS/HB/HW can delay a Oblit by.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast && !player.getRotation().autoRotation && player.getRotation().frostRotationType != FrostRotationType.Custom,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const UseAutoRotation = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'autoRotation',\n\tlabel: 'Automatic Rotation',\n\tlabelTooltip: 'Have sim automatically adjust rotation based on the scenario. This is still in development and currently only works for Unholy.',\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\nshowWhen: (player: Player<Spec.SpecDeathknight>) => !player.getTalents().howlingBlast,\n});\n\nexport const DesyncRotation = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'desyncRotation',\n\tlabel: 'Use Desync Rotation',\n\tlabelTooltip: 'Use the Desync Rotation.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast && !player.getRotation().autoRotation && player.sim.getShowExperimental(),\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const Presence = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, StartingPresence>({\n\tfieldName: 'presence',\n\tlabel: 'Presence',\n\tlabelTooltip: 'Presence to be in during the encounter.',\n\tvalues: [\n\t\t{ name: 'Blood', value: StartingPresence.Blood },\n\t\t{ name: 'Frost', value: StartingPresence.Frost },\n\t\t{ name: 'Unholy', value: StartingPresence.Unholy },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const FrostCustomRotation = InputHelpers.makeCustomRotationInput<Spec.SpecDeathknight, CustomSpellOption>({\n\tfieldName: 'frostCustomRotation',\n\tnumColumns: 4,\n\tvalues: [\n\t\t{ actionId: ActionId.fromSpellId(49909), value: CustomSpellOption.CustomIcyTouch },\n\t\t{ actionId: ActionId.fromSpellId(49921), value: CustomSpellOption.CustomPlagueStrike },\n\t\t{ actionId: ActionId.fromSpellId(50842), value: CustomSpellOption.CustomPestilence },\n\t\t{ actionId: ActionId.fromSpellId(51425), value: CustomSpellOption.CustomObliterate },\n\t\t{ actionId: ActionId.fromSpellId(51411), value: CustomSpellOption.CustomHowlingBlast },\n\t\t{ actionId: ActionId.fromSpellId(59057), value: CustomSpellOption.CustomHowlingBlastRime },\n\t\t{ actionId: ActionId.fromSpellId(49941), value: CustomSpellOption.CustomBloodBoil },\n\t\t{ actionId: ActionId.fromSpellId(49930), value: CustomSpellOption.CustomBloodStrike },\n\t\t{ actionId: ActionId.fromSpellId(49938), value: CustomSpellOption.CustomDeathAndDecay },\n\t\t{ actionId: ActionId.fromSpellId(57623), value: CustomSpellOption.CustomHornOfWinter },\n\t\t{ actionId: ActionId.fromSpellId(51271), value: CustomSpellOption.CustomUnbreakableArmor },\n\t\t{ actionId: ActionId.fromSpellId(45529), value: CustomSpellOption.CustomBloodTap },\n\t\t{ actionId: ActionId.fromSpellId(47568), value: CustomSpellOption.CustomEmpoweredRuneWeapon },\n\t\t{ actionId: ActionId.fromSpellId(55268), value: CustomSpellOption.CustomFrostStrike },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getRotation().frostRotationType == FrostRotationType.Custom,\n});\n\nexport const DeathKnightRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, FrostRotationType>({\n\t\t\tfieldName: 'frostRotationType',\n\t\t\tlabel: 'Rotation Type',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Single Target', value: FrostRotationType.SingleTarget },\n\t\t\t\t{ name: 'Custom', value: FrostRotationType.Custom },\n\t\t\t],\n\t\t\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast && !player.getRotation().autoRotation,\n\t\t}),\n\t\tPresence,\n\t\tUseAutoRotation,\n\t\tBloodTapGhoulFrenzy,\n\t\tUseEmpowerRuneWeapon,\n\t\tBloodTapInput,\n\t\tArmyOfTheDeadInput,\n\t\tFirstDiseaseInput,\n\t\tStartingPresenceInput,\n\t\tBloodlustPresence,\n\t\tBloodRuneFillerInput,\n\t\tUseDeathAndDecay,\n\t\tOblitDelayDurationInput,\n\t\tUseAMSInput,\n\t\tAvgAMSSuccessRateInput,\n\t\tAvgAMSHitInput,\n\t\tDesyncRotation,\n\t\tFrostCustomRotation,\n\t],\n};\n","import { Consumes, Explosive, PetFood, RaidTarget } from '../core/proto/common.js';\nimport { EquipmentSpec } from '../core/proto/common.js';\nimport { Flask } from '../core/proto/common.js';\nimport { Food } from '../core/proto/common.js';\nimport { Glyphs } from '../core/proto/common.js';\nimport { Potions } from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Player } from '../core/player.js';\nimport { NO_TARGET } from '../core/proto_utils/utils.js';\nimport { CustomRotation, CustomSpell } from '../core/proto/common.js';\n\nimport {\n\tDeathknight_Rotation as DeathKnightRotation,\n\tDeathknight_Options as DeathKnightOptions,\n\tDeathknightMajorGlyph,\n\tDeathknightMinorGlyph,\n\tDeathknight_Rotation_CustomSpellOption as CustomSpellOption,\n  Deathknight_Rotation_FrostRotationType,\n} from '../core/proto/deathknight.js';\n\nimport * as Tooltips from '../core/constants/tooltips.js';\nimport { Deathknight_Rotation_Presence, Deathknight_Rotation_BloodRuneFiller } from '../core/proto/deathknight.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wotlk.wowhead.com/talent-calc and copy the numbers in the url.\nexport const FrostTalents = {\n\tname: 'Frost BL',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '23050005-32005350352203012300033101351',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfObliterate,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfFrostStrike,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDisease,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const FrostUnholyTalents = {\n\tname: 'Frost UH',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-32002350352203012300033101351-230200305003',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfObliterate,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfFrostStrike,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDisease,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const UnholyDualWieldTalents = {\n\tname: 'Unholy DW',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-320043500002-2300303050032152000150013133051',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfTheGhoul,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfDarkDeath,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDeathAndDecay,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const Unholy2HTalents = {\n\tname: 'Unholy 2H',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-320050500002-2300303150032152000150013133151',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfTheGhoul,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfDarkDeath,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfIcyTouch,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const BloodTalents = {\n\tname: 'Blood DPS',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '2305020530003303231023101351--230220305003',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfDancingRuneWeapon,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfDeathStrike,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDarkDeath,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const DefaultUnholyRotation = DeathKnightRotation.create({\n\tuseDeathAndDecay: true,\n\tbtGhoulFrenzy: true,\n\trefreshHornOfWinter: false,\n\tuseEmpowerRuneWeapon: true,\n\tstartingPresence: Deathknight_Rotation_Presence.Unholy,\n\tbloodRuneFiller: Deathknight_Rotation_BloodRuneFiller.BloodBoil,\n\tuseAms: false,\n});\n\nexport const DefaultUnholyOptions = DeathKnightOptions.create({\n\tstartingRunicPower: 0,\n\tpetUptime: 1,\n\tprecastGhoulFrenzy: true,\n\tprecastHornOfWinter: true,\n\tunholyFrenzyTarget: RaidTarget.create({\n\t\ttargetIndex: NO_TARGET, // In an individual sim the 0-indexed player is ourself.\n\t}),\n});\n\nexport const DefaultFrostRotation = DeathKnightRotation.create({\n\tuseDeathAndDecay: false,\n\tbtGhoulFrenzy: false,\n\trefreshHornOfWinter: false,\n\tuseEmpowerRuneWeapon: true,\n\tstartingPresence: Deathknight_Rotation_Presence.Blood,\n\tpresence: Deathknight_Rotation_Presence.Blood,\n\tbloodRuneFiller: Deathknight_Rotation_BloodRuneFiller.BloodBoil,\n\tuseAms: false,\n\tavgAmsSuccessRate: 1.0,\n\tavgAmsHit: 10000.0,\n\toblitDelayDuration: 0,\n  frostRotationType: Deathknight_Rotation_FrostRotationType.SingleTarget,\n  frostCustomRotation: CustomRotation.create({\n\t\tspells: [\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomDeathAndDecay }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomIcyTouch }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomPlagueStrike }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomPestilence }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomHowlingBlastRime }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomHowlingBlast }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomBloodBoil }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomObliterate }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomFrostStrike }),\n\t\t],\n\t}),\n});\n\nexport const DefaultFrostOptions = DeathKnightOptions.create({\n\tstartingRunicPower: 0,\n\tpetUptime: 1,\n\tprecastHornOfWinter: true,\n\tunholyFrenzyTarget: RaidTarget.create({\n\t\ttargetIndex: NO_TARGET, // In an individual sim the 0-indexed player is ourself.\n\t}),\n});\n\nexport const DefaultBloodRotation = DeathKnightRotation.create({\n\trefreshHornOfWinter: false,\n\tuseEmpowerRuneWeapon: true,\n\tstartingPresence: Deathknight_Rotation_Presence.Blood,\n\tbloodRuneFiller: Deathknight_Rotation_BloodRuneFiller.BloodStrike,\n\tuseAms: false,\n});\n\nexport const DefaultBloodOptions = DeathKnightOptions.create({\n\tstartingRunicPower: 0,\n\tpetUptime: 1,\n\tprecastHornOfWinter: true,\n\tunholyFrenzyTarget: RaidTarget.create({\n\t\ttargetIndex: NO_TARGET, // In an individual sim the 0-indexed player is ourself.\n\t}),\n});\n\nexport const OtherDefaults = {\n};\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodDragonfinFilet,\n\tdefaultPotion: Potions.PotionOfSpeed,\n\tpetFood: PetFood.PetFoodSpicedMammothTreats,\n\tprepopPotion: Potions.PotionOfSpeed,\n\tthermalSapper: true,\n\tfillerExplosive: Explosive.ExplosiveSaroniteBomb,\n});\n\nexport const P1_UNHOLY_2H_PRERAID_PRESET = {\n\tname: 'Pre-Raid 2H Unholy',\n\ttoolbar: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle,\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\n    {\n      \"id\": 41386,\n      \"enchant\": 44879,\n      \"gems\": [\n        41400,\n        49110\n      ]\n    },\n    {\n      \"id\": 37397\n    },\n    {\n      \"id\": 37627,\n      \"enchant\": 44871,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 37647,\n      \"enchant\": 44472\n    },\n    {\n      \"id\": 39617,\n      \"enchant\": 44489,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 41355,\n      \"enchant\": 44484,\n      \"gems\": [\n        0\n      ]\n    },\n    {\n      \"id\": 39618,\n      \"enchant\": 54999,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 40688,\n      \"gems\": [\n        39996,\n        42142\n      ]\n    },\n    {\n      \"id\": 37193,\n      \"enchant\": 38374,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 44306,\n      \"enchant\": 55016,\n      \"gems\": [\n        39996,\n        39996\n      ]\n    },\n    {\n      \"id\": 37642\n    },\n    {\n      \"id\": 44935\n    },\n    {\n      \"id\": 40684\n    },\n    {\n      \"id\": 42987\n    },\n    {\n      \"id\": 41257,\n      \"enchant\": 53344\n    },\n    {},\n    {\n      \"id\": 40867\n    }\n  ]}`),\n};\n\nexport const P1_UNHOLY_2H_BIS_PRESET = {\n\tname: 'P1 2H Unholy',\n\ttoolbar: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle,\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\n    {\n      \"id\": 44006,\n      \"enchant\": 44879,\n      \"gems\": [\n        41400,\n        49110\n      ]\n    },\n    {\n      \"id\": 44664,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 40557,\n      \"enchant\": 44871,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 40403,\n      \"enchant\": 44472\n    },\n    {\n      \"id\": 40550,\n      \"enchant\": 44489,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 40330,\n      \"enchant\": 44484,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 40552,\n      \"enchant\": 54999,\n      \"gems\": [\n        40038,\n        0\n      ]\n    },\n    {\n      \"id\": 40278,\n      \"gems\": [\n        42142,\n        42142\n      ]\n    },\n    {\n      \"id\": 40556,\n      \"enchant\": 38374,\n      \"gems\": [\n        39996,\n        39996\n      ]\n    },\n    {\n      \"id\": 40591,\n      \"enchant\": 55016\n    },\n    {\n      \"id\": 39401\n    },\n    {\n      \"id\": 40075\n    },\n    {\n      \"id\": 40256\n    },\n    {\n      \"id\": 42987\n    },\n    {\n      \"id\": 40384,\n      \"enchant\": 53344\n    },\n    {},\n    {\n      \"id\": 40207\n    }\n  ]}`),\n};\n\nexport const P1_UNHOLY_DW_PRERAID_PRESET = {\n\tname: 'Pre-Raid DW Unholy',\n\ttoolbar: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n    {\n      \"id\": 41386,\n      \"enchant\": 44879,\n      \"gems\": [\n        41400,\n        49110\n      ]\n    },\n    {\n      \"id\": 37397\n    },\n    {\n      \"id\": 37627,\n      \"enchant\": 44871,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 37647,\n      \"enchant\": 44472\n    },\n    {\n      \"id\": 39617,\n      \"enchant\": 44489,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 41355,\n      \"enchant\": 44484,\n      \"gems\": [\n        0\n      ]\n    },\n    {\n      \"id\": 39618,\n      \"enchant\": 54999,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 40688,\n      \"gems\": [\n        39996,\n        42142\n      ]\n    },\n    {\n      \"id\": 37193,\n      \"enchant\": 38374,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 44306,\n      \"enchant\": 55016,\n      \"gems\": [\n        39996,\n        39996\n      ]\n    },\n    {\n      \"id\": 37642\n    },\n    {\n      \"id\": 44935\n    },\n    {\n      \"id\": 40684\n    },\n    {\n      \"id\": 42987\n    },\n    {\n      \"id\": 41383,\n      \"enchant\": 53344\n    },\n    {\n      \"id\": 40703,\n      \"enchant\": 44495\n    },\n    {\n      \"id\": 40867\n    }\n  ]}`),\n};\n\nexport const P1_UNHOLY_DW_BIS_PRESET = {\n\tname: 'P1 DW Unholy',\n\ttoolbar: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n    {\n      \"id\": 44006,\n      \"enchant\": 44879,\n      \"gems\": [\n        41398,\n        42702\n      ]\n    },\n    {\n      \"id\": 39421\n    },\n    {\n      \"id\": 40557,\n      \"enchant\": 44871,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 40403,\n      \"enchant\": 44472\n    },\n    {\n      \"id\": 40550,\n      \"enchant\": 44489,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 40330,\n      \"enchant\": 44484,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 40347,\n      \"enchant\": 54999,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 40278,\n      \"gems\": [\n        42142,\n        42142\n      ]\n    },\n    {\n      \"id\": 40294,\n      \"enchant\": 38374\n    },\n    {\n      \"id\": 39706,\n      \"enchant\": 55016,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 39401\n    },\n    {\n      \"id\": 40075\n    },\n    {\n      \"id\": 37390\n    },\n    {\n      \"id\": 42987\n    },\n    {\n      \"id\": 40402,\n      \"enchant\": 53344\n    },\n    {\n      \"id\": 40491,\n      \"enchant\": 53344\n    },\n    {\n      \"id\": 42620\n    }\n  ]}`),\n};\n\nexport const P1_FROST_PRE_BIS_PRESET = {\n\tname: 'Pre-Raid Frost',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast,\n\tgear: EquipmentSpec.fromJsonString(`{   \"items\": [\n    {\n      \"id\": 41386,\n      \"enchant\": 44879,\n      \"gems\": [\n        41398,\n        49110\n      ]\n    },\n    {\n      \"id\": 42645,\n      \"gems\": [\n        42142\n      ]\n    },\n    {\n      \"id\": 34388,\n      \"enchant\": 44871,\n      \"gems\": [\n        39996,\n        39996\n      ]\n    },\n    {\n      \"id\": 37647,\n      \"enchant\": 44472\n    },\n    {\n      \"id\": 39617,\n      \"enchant\": 44489,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 41355,\n      \"enchant\": 44484,\n      \"gems\": [\n        0\n      ]\n    },\n    {\n      \"id\": 39618,\n      \"enchant\": 54999,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 37171,\n      \"gems\": [\n        39996,\n        39996\n      ]\n    },\n    {\n      \"id\": 37193,\n      \"enchant\": 38374,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 44306,\n      \"enchant\": 55016,\n      \"gems\": [\n        39996,\n        39996\n      ]\n    },\n    {\n      \"id\": 42642,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 44935\n    },\n    {\n      \"id\": 40684\n    },\n    {\n      \"id\": 42987\n    },\n    {\n      \"id\": 41383,\n      \"enchant\": 53343\n    },\n    {\n      \"id\": 43611,\n      \"enchant\": 53344\n    },\n    {\n      \"id\": 40715\n    }\n  ]}`),\n};\n\nexport const P1_FROST_BIS_PRESET = {\n\tname: 'P1 Frost',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast,\n\tgear: EquipmentSpec.fromJsonString(`{   \"items\": [\n    {\n      \"id\": 44006,\n      \"enchant\": 44879,\n      \"gems\": [\n        41398,\n        42702\n      ]\n    },\n    {\n      \"id\": 44664,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 40557,\n      \"enchant\": 44871,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 40403,\n      \"enchant\": 44472\n    },\n    {\n      \"id\": 40550,\n      \"enchant\": 44489,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 40330,\n      \"enchant\": 44484,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 40552,\n      \"enchant\": 54999,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 40278,\n      \"gems\": [\n        39996,\n        42142\n      ]\n    },\n    {\n      \"id\": 40556,\n      \"enchant\": 38374,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 40591,\n      \"enchant\": 55016\n    },\n    {\n      \"id\": 39401\n    },\n    {\n      \"id\": 40075\n    },\n    {\n      \"id\": 40256\n    },\n    {\n      \"id\": 42987\n    },\n    {\n      \"id\": 40189,\n      \"enchant\": 53343\n    },\n    {\n      \"id\": 40189,\n      \"enchant\": 53344\n    },\n    {\n      \"id\": 40207\n    }\n  ]}`),\n};\n\nexport const P1_BLOOD_BIS_PRESET = {\n\tname: 'P1 Blood',\n\ttoolbar: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().dancingRuneWeapon,\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\n    {\n      \"id\": 44006,\n      \"enchant\": 44879,\n      \"gems\": [\n        41398,\n        49110\n      ]\n    },\n    {\n      \"id\": 44664,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 40557,\n      \"enchant\": 44871,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 40250,\n      \"enchant\": 44472\n    },\n    {\n      \"id\": 40550,\n      \"enchant\": 44489,\n      \"gems\": [\n        42142,\n        39996\n      ]\n    },\n    {\n      \"id\": 40330,\n      \"enchant\": 44484,\n      \"gems\": [\n        39996,\n        0\n      ]\n    },\n    {\n      \"id\": 40552,\n      \"enchant\": 54999,\n      \"gems\": [\n        40038,\n        0\n      ]\n    },\n    {\n      \"id\": 40278,\n      \"gems\": [\n        42142,\n        42142\n      ]\n    },\n    {\n      \"id\": 40556,\n      \"enchant\": 38374,\n      \"gems\": [\n        39996,\n        39996\n      ]\n    },\n    {\n      \"id\": 40591,\n      \"enchant\": 55016\n    },\n    {\n      \"id\": 43993,\n      \"gems\": [\n        39996\n      ]\n    },\n    {\n      \"id\": 40075\n    },\n    {\n      \"id\": 40256\n    },\n    {\n      \"id\": 42987\n    },\n    {\n      \"id\": 40384,\n      \"enchant\": 53344\n    },\n    {},\n    {\n      \"id\": 40207\n    }\n  ]}`),\n};\n","import { RaidBuffs } from '../core/proto/common.js';\nimport { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Debuffs } from '../core/proto/common.js';\nimport { Class } from '../core/proto/common.js';\nimport { Consumes } from '../core/proto/common.js';\nimport { Encounter } from '../core/proto/common.js';\nimport { ItemSlot } from '../core/proto/common.js';\nimport { MobType } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\n\nimport { Deathknight, Deathknight_Rotation as DeathKnightRotation, DeathknightTalents as DeathKnightTalents, Deathknight_Options as DeathKnightOptions } from '../core/proto/deathknight.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Tooltips from '../core/constants/tooltips.js';\n\nimport * as DeathKnightInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class DeathknightSimUI extends IndividualSimUI<Spec.SpecDeathknight> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecDeathknight>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'deathknight-sim-ui',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t\t\"<p>Blood dps is not implemented.</p>\\\n\t\t\t\t<p>Rotation logic is not fully tuned yet.</p>\\\n\t\t\t\t<p>Pet scaling is likely to not be properly working until further beta testing.</p>\"\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatArmor,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatExpertise,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\t\t\tepReferenceStat: Stat.StatAttackPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatArmor,\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatExpertise,\n\t\t\t],\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.P1_FROST_BIS_PRESET.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatStrength]: 2.88,\n\t\t\t\t\t[Stat.StatAgility]: 1.22,\n\t\t\t\t\t[Stat.StatArmor]: 0.01,\n\t\t\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t\t\t[Stat.StatExpertise]: 2.26,\n\t\t\t\t\t[Stat.StatMeleeHaste]: 1.23,\n\t\t\t\t\t[Stat.StatMeleeHit]: 1.15,\n\t\t\t\t\t[Stat.StatMeleeCrit]: 1.43,\n\t\t\t\t\t[Stat.StatArmorPenetration]: 1.56,\n\t\t\t\t\t[Stat.StatSpellHit]: 0.71,\n\t\t\t\t\t[Stat.StatSpellCrit]: 0.07,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultFrostRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.FrostTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultFrostOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: RaidBuffs.create({\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tswiftRetribution: true,\n\t\t\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t\ticyTalons: true,\n\t\t\t\t\tabominationsMight: true,\n\t\t\t\t\tleaderOfThePack: TristateEffect.TristateEffectRegular,\n\t\t\t\t\tsanctifiedRetribution: true,\n\t\t\t\t\tbloodlust: true,\n\t\t\t\t\tdevotionAura: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tstoneskinTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tmoonkinAura: TristateEffect.TristateEffectRegular,\n\t\t\t\t\twrathOfAirTotem: true,\n\t\t\t\t\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tpartyBuffs: PartyBuffs.create({\n\t\t\t\t\theroicPresence: false,\n\t\t\t\t}),\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\t\t\tblessingOfKings: true,\n\t\t\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tdebuffs: Debuffs.create({\n\t\t\t\t\tbloodFrenzy: true,\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tsunderArmor: true,\n\t\t\t\t\tebonPlaguebringer: true,\n\t\t\t\t\tmangle: true,\n\t\t\t\t\theartOfTheCrusader: true,\n\t\t\t\t\tshadowMastery: true,\n\t\t\t\t}),\n\t\t\t},\n\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: DeathKnightInputs.DeathKnightRotationConfig,\n\t\t\tpetConsumeInputs: [\n\t\t\t\tIconInputs.SpicedMammothTreats,\n\t\t\t],\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.SpellDamageDebuff,\n\t\t\t\tIconInputs.StaminaBuff,\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.AttackPowerDebuff,\n\t\t\t\tIconInputs.DamageReductionPercentBuff,\n\t\t\t\tIconInputs.MeleeAttackSpeedDebuff,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tDeathKnightInputs.SelfUnholyFrenzy,\n\t\t\t\t\tDeathKnightInputs.StartingRunicPower,\n\t\t\t\t\tDeathKnightInputs.PetUptime,\n\n\t\t\t\t\tDeathKnightInputs.PrecastGhoulFrenzy,\n\t\t\t\t\tDeathKnightInputs.PrecastHornOfWinter,\n\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\t\t],\n\t\t\t},\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: false,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.FrostTalents,\n\t\t\t\t\tPresets.FrostUnholyTalents,\n\t\t\t\t\tPresets.UnholyDualWieldTalents,\n\t\t\t\t\tPresets.Unholy2HTalents,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.P1_FROST_PRE_BIS_PRESET,\n\t\t\t\t\tPresets.P1_FROST_BIS_PRESET,\n\t\t\t\t\tPresets.P1_UNHOLY_DW_PRERAID_PRESET,\n\t\t\t\t\tPresets.P1_UNHOLY_DW_BIS_PRESET,\n\t\t\t\t\tPresets.P1_UNHOLY_2H_PRERAID_PRESET,\n\t\t\t\t\tPresets.P1_UNHOLY_2H_BIS_PRESET,\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["SelfUnholyFrenzy","InputHelpers.makeSpecOptionsBooleanInput","fieldName","label","labelTooltip","extraCssClasses","getValue","player","getSpecOptions","unholyFrenzyTarget","targetIndex","NO_TARGET","setValue","eventID","newValue","newOptions","RaidTarget","create","setSpecOptions","showWhen","getTalents","hysteria","changeEmitter","TypedEvent","onAny","rotationChangeEmitter","talentsChangeEmitter","StartingRunicPower","InputHelpers.makeSpecOptionsNumberInput","PetUptime","percent","masterOfGhouls","PrecastGhoulFrenzy","summonGargoyle","ghoulFrenzy","PrecastHornOfWinter","InputHelpers.makeRotationBooleanInput","InputHelpers.makeRotationNumberInput","UseDeathAndDecay","scourgeStrike","getRotation","autoRotation","InputHelpers.makeRotationEnumInput","values","name","value","DeathAndDecayPrio","MaxRuneDowntime","MaxDndUptime","useDeathAndDecay","UseEmpowerRuneWeapon","frostRotationType","FrostRotationType","Custom","BloodlustPresence","StartingPresence","Blood","Unholy","BloodTapGhoulFrenzy","FirstDiseaseInput","FirstDisease","FrostFever","BloodPlague","ArmyOfTheDeadInput","ArmyOfTheDead","DoNotUse","PreCast","AsMajorCd","StartingPresenceInput","BloodRuneFillerInput","BloodRuneFiller","BloodStrike","BloodBoil","BloodTapInput","BloodTap","GhoulFrenzy","IcyTouch","BloodStrikeBT","BloodBoilBT","UseAMSInput","howlingBlast","AvgAMSSuccessRateInput","useAms","AvgAMSHitInput","OblitDelayDurationInput","UseAutoRotation","DesyncRotation","sim","getShowExperimental","Presence","Frost","FrostCustomRotation","InputHelpers.makeCustomRotationInput","numColumns","actionId","ActionId","fromSpellId","CustomSpellOption","CustomIcyTouch","CustomPlagueStrike","CustomPestilence","CustomObliterate","CustomHowlingBlast","CustomHowlingBlastRime","CustomBloodBoil","CustomBloodStrike","CustomDeathAndDecay","CustomHornOfWinter","CustomUnbreakableArmor","CustomBloodTap","CustomEmpoweredRuneWeapon","CustomFrostStrike","DeathKnightRotationConfig","inputs","SingleTarget","FrostTalents","data","SavedTalents","talentsString","glyphs","Glyphs","major1","DeathknightMajorGlyph","GlyphOfObliterate","major2","GlyphOfFrostStrike","major3","GlyphOfDisease","minor1","DeathknightMinorGlyph","GlyphOfHornOfWinter","minor2","GlyphOfPestilence","minor3","GlyphOfRaiseDead","FrostUnholyTalents","UnholyDualWieldTalents","GlyphOfTheGhoul","GlyphOfDarkDeath","GlyphOfDeathAndDecay","Unholy2HTalents","GlyphOfIcyTouch","BloodTalents","GlyphOfDancingRuneWeapon","GlyphOfDeathStrike","DefaultUnholyRotation","DeathKnightRotation","btGhoulFrenzy","refreshHornOfWinter","useEmpowerRuneWeapon","startingPresence","Deathknight_Rotation_Presence","bloodRuneFiller","Deathknight_Rotation_BloodRuneFiller","DefaultUnholyOptions","DeathKnightOptions","startingRunicPower","petUptime","precastGhoulFrenzy","precastHornOfWinter","DefaultFrostRotation","presence","avgAmsSuccessRate","avgAmsHit","oblitDelayDuration","Deathknight_Rotation_FrostRotationType","frostCustomRotation","CustomRotation","spells","CustomSpell","spell","DefaultFrostOptions","DefaultBloodRotation","DefaultBloodOptions","OtherDefaults","DefaultConsumes","Consumes","flask","Flask","FlaskOfEndlessRage","food","Food","FoodDragonfinFilet","defaultPotion","Potions","PotionOfSpeed","petFood","PetFood","PetFoodSpicedMammothTreats","prepopPotion","thermalSapper","fillerExplosive","Explosive","ExplosiveSaroniteBomb","P1_UNHOLY_2H_PRERAID_PRESET","toolbar","Tooltips.BASIC_BIS_DISCLAIMER","enableWhen","gear","EquipmentSpec","fromJsonString","P1_UNHOLY_2H_BIS_PRESET","P1_UNHOLY_DW_PRERAID_PRESET","P1_UNHOLY_DW_BIS_PRESET","P1_FROST_PRE_BIS_PRESET","tooltip","P1_FROST_BIS_PRESET","P1_BLOOD_BIS_PRESET","dancingRuneWeapon","DeathknightSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","knownIssues","epStats","Stat","StatStrength","StatArmor","StatAgility","StatAttackPower","StatExpertise","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatSpellHit","StatSpellCrit","StatSpellHaste","epReferenceStat","displayStats","StatHealth","defaults","Presets.P1_FROST_BIS_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultFrostRotation","talents","Presets.FrostTalents","specOptions","Presets.DefaultFrostOptions","raidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","swiftRetribution","strengthOfEarthTotem","icyTalons","abominationsMight","leaderOfThePack","TristateEffectRegular","sanctifiedRetribution","bloodlust","devotionAura","stoneskinTotem","moonkinAura","wrathOfAirTotem","powerWordFortitude","partyBuffs","PartyBuffs","heroicPresence","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Debuffs","bloodFrenzy","faerieFire","sunderArmor","ebonPlaguebringer","mangle","heartOfTheCrusader","shadowMastery","playerIconInputs","rotationInputs","DeathKnightInputs.DeathKnightRotationConfig","petConsumeInputs","IconInputs.SpicedMammothTreats","includeBuffDebuffInputs","IconInputs.SpellDamageDebuff","IconInputs.StaminaBuff","excludeBuffDebuffInputs","IconInputs.AttackPowerDebuff","IconInputs.DamageReductionPercentBuff","IconInputs.MeleeAttackSpeedDebuff","otherInputs","DeathKnightInputs.SelfUnholyFrenzy","DeathKnightInputs.StartingRunicPower","DeathKnightInputs.PetUptime","DeathKnightInputs.PrecastGhoulFrenzy","DeathKnightInputs.PrecastHornOfWinter","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.FrostUnholyTalents","Presets.UnholyDualWieldTalents","Presets.Unholy2HTalents","Presets.P1_FROST_PRE_BIS_PRESET","Presets.P1_UNHOLY_DW_PRERAID_PRESET","Presets.P1_UNHOLY_DW_BIS_PRESET","Presets.P1_UNHOLY_2H_PRERAID_PRESET","Presets.P1_UNHOLY_2H_BIS_PRESET"],"mappings":"6dAyBa,MAAAA,EAAmBC,EAA+D,CAC9FC,UAAW,qBACXC,MAAO,qBACPC,aAAc,kCACdC,gBAAiB,CAChB,wBAEDC,SAAWC,GAAyCA,EAAOC,iBAAiBC,oBAAoBC,aAAeC,EAC/GC,SAAU,CAACC,EAAkBN,EAAsCO,KAC5D,MAAAC,EAAaR,EAAOC,iBACfO,EAAAN,mBAAqBO,EAAWC,OAAO,CACjDP,YAAaI,EAAW,EAAIH,IAEtBJ,EAAAW,eAAeL,EAASE,EAAU,EAE1CI,SAAWZ,GAAyCA,EAAOa,aAAaC,SACxEC,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,yBAGpGC,EAAqBC,EAA8D,CAC/F1B,UAAW,qBACXC,MAAO,uBACPC,aAAc,+CAGFyB,EAAYD,EAA8D,CACtF1B,UAAW,YACXC,MAAO,mBACPC,aAAc,wEACd0B,SAAS,EACTX,SAAWZ,GAAyCA,EAAOa,aAAaW,iBAG5DC,EAAqB/B,EAA+D,CAChGC,UAAW,qBACXC,MAAO,wBACPC,aAAc,qDACde,SAAWZ,GAAyCA,EAAOa,aAAaa,gBAAkB1B,EAAOa,aAAac,YAC9GZ,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,yBAGpGS,GAAsBlC,EAA+D,CACjGC,UAAW,sBACXC,MAAO,0BACPC,aAAc,kEAGoBgC,EAA4D,CAC9FlC,UAAW,sBACXC,MAAO,yBACPC,aAAc,yCAGuBiC,EAA2D,CAChGnC,UAAW,yBACXC,MAAO,2BACPC,aAAc,+CAGF,MAAAkC,GAAmBF,EAA4D,CAC3FlC,UAAW,mBACXC,MAAO,kBACPC,aAAc,sCACde,SAAWZ,GAAyCA,EAAOa,aAAaa,gBAAkB1B,EAAOa,aAAamB,gBAAkBhC,EAAOiC,cAAcC,aACrJnB,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,yBAG7EgB,EAA4E,CAC/GxC,UAAW,oBACXC,MAAO,uBACPC,aAAc,mQAGduC,OAAQ,CACP,CAAEC,KAAM,oBAAqBC,MAAOC,EAAkBC,iBACtD,CAAEH,KAAM,iBAAkBC,MAAOC,EAAkBE,eAEpD7B,SAAWZ,GAAyCA,EAAOa,aAAaa,iBAAmB1B,EAAOiC,cAAcS,mBAAqB1C,EAAOa,aAAamB,iBAAmBhC,EAAOiC,cAAcC,aACjMnB,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,yBAGpG,MAAAwB,GAAuBd,EAA4D,CAC/FlC,UAAW,uBACXC,MAAO,sBACPC,aAAc,uCACde,SAAWZ,IAA0CA,EAAOiC,cAAcC,cAAgBlC,EAAOiC,cAAcW,mBAAqBC,EAAkBC,SAG1IC,GAAoBZ,EAA2E,CAC3GxC,UAAW,aACXC,MAAO,qBACPC,aAAc,6BACduC,OAAQ,CACP,CAAEC,KAAM,QAASC,MAAOU,EAAiBC,OACzC,CAAEZ,KAAM,SAAUC,MAAOU,EAAiBE,SAE3CtC,SAAWZ,GAAyCA,EAAOa,aAAaa,iBAAmB1B,EAAOiC,cAAcC,aAChHnB,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,yBAGpGgC,GAAsBtB,EAA4D,CAC9FlC,UAAW,gBACXC,MAAO,kBACPC,aAAc,wCACde,SAAWZ,GAAyCA,EAAOa,aAAac,cAAgB3B,EAAOiC,cAAcC,aAC7GnB,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,yBAGpGiC,GAAoBjB,EAAuE,CACvGxC,UAAW,eACXC,MAAO,gBACPC,aAAc,sCACduC,OAAQ,CACP,CAAEC,KAAM,cAAeC,MAAOe,EAAaC,YAC3C,CAAEjB,KAAM,eAAgBC,MAAOe,EAAaE,cAE7C3C,SAAWZ,GAAyCA,EAAOa,aAAaa,iBAAmB1B,EAAOiC,cAAcC,aAChHnB,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,yBAGpGqC,GAAqBrB,EAAwE,CACzGxC,UAAW,gBACXC,MAAO,mBACPC,aAAc,qCACduC,OAAQ,CACP,CAAEC,KAAM,aAAcC,MAAOmB,EAAcC,UAC3C,CAAErB,KAAM,WAAYC,MAAOmB,EAAcE,SACzC,CAAEtB,KAAM,cAAeC,MAAOmB,EAAcG,cAIjCC,GAAwB1B,EAA2E,CAC/GxC,UAAW,mBACXC,MAAO,oBACPC,aAAc,0CACduC,OAAQ,CACP,CAAEC,KAAM,QAASC,MAAOU,EAAiBC,OACzC,CAAEZ,KAAM,SAAUC,MAAOU,EAAiBE,SAE3CtC,SAAWZ,GAAyCA,EAAOa,aAAaa,iBAAmB1B,EAAOiC,cAAcC,aAChHnB,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,yBAGpG2C,GAAuB3B,EAA0E,CAC7GxC,UAAW,kBACXC,MAAO,oBACPC,aAAc,gDACduC,OAAQ,CACP,CAAEC,KAAM,eAAgBC,MAAOyB,EAAgBC,aAC/C,CAAE3B,KAAM,aAAcC,MAAOyB,EAAgBE,YAE9CrD,SAAWZ,GAAyCA,EAAOa,aAAaa,iBAAmB1B,EAAOiC,cAAcC,aAChHnB,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,yBAGpG+C,GAAgB/B,EAAmE,CAC/FxC,UAAW,WACXC,MAAO,YACPC,aAAc,yCACduC,OAAQ,CACP,CAAEC,KAAM,eAAgBC,MAAO6B,EAASC,aACxC,CAAE/B,KAAM,YAAaC,MAAO6B,EAASE,UACrC,CAAEhC,KAAM,eAAgBC,MAAO6B,EAASG,eACxC,CAAEjC,KAAM,aAAcC,MAAO6B,EAASI,cAEvC3D,SAAWZ,GAAyCA,EAAOa,aAAaa,iBAAmB1B,EAAOiC,cAAcC,aAChHnB,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,yBAGpGqD,GAAc3C,EAA4D,CACtFlC,UAAW,SACXC,MAAO,UACPC,aAAc,iDACde,SAAWZ,GAAyCA,EAAOa,aAAa4D,eAAiBzE,EAAOiC,cAAcC,cAAgBlC,EAAOiC,cAAcW,mBAAqBC,EAAkBC,OAC1L/B,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,yBAGpGuD,GAAyB5C,EAA2D,CAChGnC,UAAW,oBACXC,MAAO,oBACPC,aAAc,mEACde,SAAWZ,GAAwE,GAA/BA,EAAOiC,cAAc0C,SAAmB3E,EAAOiC,cAAcC,cAAgBlC,EAAOa,aAAa4D,cAAgBzE,EAAOiC,cAAcW,mBAAqBC,EAAkBC,OACjO/B,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,yBAGpGyD,GAAiB9C,EAA2D,CACxFnC,UAAW,YACXC,MAAO,cACPC,aAAc,+EACde,SAAWZ,GAAwE,GAA/BA,EAAOiC,cAAc0C,SAAmB3E,EAAOiC,cAAcC,cAAgBlC,EAAOa,aAAa4D,cAAgBzE,EAAOiC,cAAcW,mBAAqBC,EAAkBC,OACjO/B,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,yBAGpG0D,GAA0B/C,EAA2D,CACjGnC,UAAW,qBACXC,MAAO,mBACPC,aAAc,4CACde,SAAWZ,GAAyCA,EAAOa,aAAa4D,eAAiBzE,EAAOiC,cAAcC,cAAgBlC,EAAOiC,cAAcW,mBAAqBC,EAAkBC,OAC1L/B,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,yBAGpG2D,GAAkBjD,EAA4D,CAC1FlC,UAAW,eACXC,MAAO,qBACPC,aAAc,kIACdkB,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,uBACjHP,SAAWZ,IAA0CA,EAAOa,aAAa4D,eAG5DM,GAAiBlD,EAA4D,CACzFlC,UAAW,iBACXC,MAAO,sBACPC,aAAc,2BACde,SAAWZ,GAAyCA,EAAOa,aAAa4D,eAAiBzE,EAAOiC,cAAcC,cAAgBlC,EAAOgF,IAAIC,sBACzIlE,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,yBAGpG+D,GAAW/C,EAA2E,CAClGxC,UAAW,WACXC,MAAO,WACPC,aAAc,0CACduC,OAAQ,CACP,CAAEC,KAAM,QAASC,MAAOU,EAAiBC,OACzC,CAAEZ,KAAM,QAASC,MAAOU,EAAiBmC,OACzC,CAAE9C,KAAM,SAAUC,MAAOU,EAAiBE,SAE3CtC,SAAWZ,GAAyCA,EAAOa,aAAa4D,eAAiBzE,EAAOiC,cAAcC,aAC9GnB,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,yBAGpGiE,GAAsBC,EAA8E,CAChH1F,UAAW,sBACX2F,WAAY,EACZlD,OAAQ,CACP,CAAEmD,SAAUC,EAASC,YAAY,OAAQnD,MAAOoD,EAAkBC,gBAClE,CAAEJ,SAAUC,EAASC,YAAY,OAAQnD,MAAOoD,EAAkBE,oBAClE,CAAEL,SAAUC,EAASC,YAAY,OAAQnD,MAAOoD,EAAkBG,kBAClE,CAAEN,SAAUC,EAASC,YAAY,OAAQnD,MAAOoD,EAAkBI,kBAClE,CAAEP,SAAUC,EAASC,YAAY,OAAQnD,MAAOoD,EAAkBK,oBAClE,CAAER,SAAUC,EAASC,YAAY,OAAQnD,MAAOoD,EAAkBM,wBAClE,CAAET,SAAUC,EAASC,YAAY,OAAQnD,MAAOoD,EAAkBO,iBAClE,CAAEV,SAAUC,EAASC,YAAY,OAAQnD,MAAOoD,EAAkBQ,mBAClE,CAAEX,SAAUC,EAASC,YAAY,OAAQnD,MAAOoD,EAAkBS,qBAClE,CAAEZ,SAAUC,EAASC,YAAY,OAAQnD,MAAOoD,EAAkBU,oBAClE,CAAEb,SAAUC,EAASC,YAAY,OAAQnD,MAAOoD,EAAkBW,wBAClE,CAAEd,SAAUC,EAASC,YAAY,OAAQnD,MAAOoD,EAAkBY,gBAClE,CAAEf,SAAUC,EAASC,YAAY,OAAQnD,MAAOoD,EAAkBa,2BAClE,CAAEhB,SAAUC,EAASC,YAAY,OAAQnD,MAAOoD,EAAkBc,oBAEnE5F,SAAWZ,GAAyCA,EAAOiC,cAAcW,mBAAqBC,EAAkBC,SAGpG2D,GAA4B,CACxCC,OAAQ,CACPvE,EAA4E,CAC3ExC,UAAW,oBACXC,MAAO,gBACPwC,OAAQ,CACP,CAAEC,KAAM,gBAAiBC,MAAOO,EAAkB8D,cAClD,CAAEtE,KAAM,SAAUC,MAAOO,EAAkBC,SAE5C/B,cAAgBf,GAAyCgB,EAAWC,MAAM,CAACjB,EAAOkB,sBAAuBlB,EAAOmB,uBAChHP,SAAWZ,GAAyCA,EAAOa,aAAa4D,eAAiBzE,EAAOiC,cAAcC,eAE/GgD,GACAJ,GACA3B,GACAR,GACAuB,GACAV,GACAJ,GACAS,GACAd,GACAe,GACA/B,GACA8C,GACAL,GACAE,GACAE,GACAG,GACAK,KCnRWwB,GAAe,CAC3BvE,KAAM,WACNwE,KAAMC,EAAapG,OAAO,CACzBqG,cAAe,yCACfC,OAAQC,EAAOvG,OAAO,CACrBwG,OAAQC,EAAsBC,kBAC9BC,OAAQF,EAAsBG,mBAC9BC,OAAQJ,EAAsBK,eAC9BC,OAAQC,EAAsBC,oBAC9BC,OAAQF,EAAsBG,kBAC9BC,OAAQJ,EAAsBK,sBAKpBC,GAAqB,CACjC3F,KAAM,WACNwE,KAAMC,EAAapG,OAAO,CACzBqG,cAAe,8CACfC,OAAQC,EAAOvG,OAAO,CACrBwG,OAAQC,EAAsBC,kBAC9BC,OAAQF,EAAsBG,mBAC9BC,OAAQJ,EAAsBK,eAC9BC,OAAQC,EAAsBC,oBAC9BC,OAAQF,EAAsBG,kBAC9BC,OAAQJ,EAAsBK,sBAKpBE,GAAyB,CACrC5F,KAAM,YACNwE,KAAMC,EAAapG,OAAO,CACzBqG,cAAe,gDACfC,OAAQC,EAAOvG,OAAO,CACrBwG,OAAQC,EAAsBe,gBAC9Bb,OAAQF,EAAsBgB,iBAC9BZ,OAAQJ,EAAsBiB,qBAC9BX,OAAQC,EAAsBC,oBAC9BC,OAAQF,EAAsBG,kBAC9BC,OAAQJ,EAAsBK,sBAKpBM,GAAkB,CAC9BhG,KAAM,YACNwE,KAAMC,EAAapG,OAAO,CACzBqG,cAAe,gDACfC,OAAQC,EAAOvG,OAAO,CACrBwG,OAAQC,EAAsBe,gBAC9Bb,OAAQF,EAAsBgB,iBAC9BZ,OAAQJ,EAAsBmB,gBAC9Bb,OAAQC,EAAsBC,oBAC9BC,OAAQF,EAAsBG,kBAC9BC,OAAQJ,EAAsBK,sBAKpBQ,GAAe,CAC3BlG,KAAM,YACNwE,KAAMC,EAAapG,OAAO,CACzBqG,cAAe,6CACfC,OAAQC,EAAOvG,OAAO,CACrBwG,OAAQC,EAAsBqB,yBAC9BnB,OAAQF,EAAsBsB,mBAC9BlB,OAAQJ,EAAsBgB,iBAC9BV,OAAQC,EAAsBC,oBAC9BC,OAAQF,EAAsBG,kBAC9BC,OAAQJ,EAAsBK,sBAKpBW,GAAwBC,EAAoBjI,OAAO,CAC/DgC,kBAAkB,EAClBkG,eAAe,EACfC,qBAAqB,EACrBC,sBAAsB,EACtBC,iBAAkBC,EAA8B9F,OAChD+F,gBAAiBC,EAAqCjF,UACtDU,QAAQ,IAGIwE,GAAuBC,EAAmB1I,OAAO,CAC7D2I,mBAAoB,EACpBC,UAAW,EACXC,oBAAoB,EACpBC,qBAAqB,EACrBtJ,mBAAoBO,EAAWC,OAAO,CACrCP,YAAaC,MAIFqJ,GAAuBd,EAAoBjI,OAAO,CAC9DgC,kBAAkB,EAClBkG,eAAe,EACfC,qBAAqB,EACrBC,sBAAsB,EACtBC,iBAAkBC,EAA8B/F,MAChDyG,SAAUV,EAA8B/F,MACxCgG,gBAAiBC,EAAqCjF,UACtDU,QAAQ,EACRgF,kBAAmB,EACnBC,UAAW,IACXC,mBAAoB,EACnBjH,kBAAmBkH,EAAuCnD,aAC1DoD,oBAAqBC,EAAetJ,OAAO,CAC3CuJ,OAAQ,CACPC,EAAYxJ,OAAO,CAAEyJ,MAAOzE,EAAkBS,sBAC9C+D,EAAYxJ,OAAO,CAAEyJ,MAAOzE,EAAkBC,iBAC9CuE,EAAYxJ,OAAO,CAAEyJ,MAAOzE,EAAkBE,qBAC9CsE,EAAYxJ,OAAO,CAAEyJ,MAAOzE,EAAkBG,mBAC9CqE,EAAYxJ,OAAO,CAAEyJ,MAAOzE,EAAkBM,yBAC9CkE,EAAYxJ,OAAO,CAAEyJ,MAAOzE,EAAkBK,qBAC9CmE,EAAYxJ,OAAO,CAAEyJ,MAAOzE,EAAkBO,kBAC9CiE,EAAYxJ,OAAO,CAAEyJ,MAAOzE,EAAkBI,mBAC9CoE,EAAYxJ,OAAO,CAAEyJ,MAAOzE,EAAkBc,yBAKpC4D,GAAsBhB,EAAmB1I,OAAO,CAC5D2I,mBAAoB,EACpBC,UAAW,EACXE,qBAAqB,EACrBtJ,mBAAoBO,EAAWC,OAAO,CACrCP,YAAaC,MAIFiK,GAAuB1B,EAAoBjI,OAAO,CAC9DmI,qBAAqB,EACrBC,sBAAsB,EACtBC,iBAAkBC,EAA8B/F,MAChDgG,gBAAiBC,EAAqClF,YACtDW,QAAQ,IAGI2F,GAAsBlB,EAAmB1I,OAAO,CAC5D2I,mBAAoB,EACpBC,UAAW,EACXE,qBAAqB,EACrBtJ,mBAAoBO,EAAWC,OAAO,CACrCP,YAAaC,MAIFmK,GAAgB,CAC7B,EAEaC,GAAkBC,EAAS/J,OAAO,CAC9CgK,MAAOC,EAAMC,mBACbC,KAAMC,EAAKC,mBACXC,cAAeC,EAAQC,cACvBC,QAASC,EAAQC,2BACjBC,aAAcL,EAAQC,cACtBK,eAAe,EACfC,gBAAiBC,EAAUC,wBAGfC,GAA8B,CAC1CtJ,KAAM,qBACNuJ,QAASC,EACTC,WAAa9L,GAAyCA,EAAOa,aAAaa,eAC1EqK,KAAMC,EAAcC,eAAe,wsCA4FvBC,GAA0B,CACtC7J,KAAM,eACNuJ,QAASC,EACTC,WAAa9L,GAAyCA,EAAOa,aAAaa,eAC1EqK,KAAMC,EAAcC,eAAe,wsCA4FvBE,GAA8B,CAC1C9J,KAAM,qBACNuJ,QAASC,EACTC,WAAa9L,GAAyCA,EAAOa,aAAaa,eAC1EqK,KAAMC,EAAcC,eAAe,yvCA+FvBG,GAA0B,CACtC/J,KAAM,eACNuJ,QAASC,EACTC,WAAa9L,GAAyCA,EAAOa,aAAaa,eAC1EqK,KAAMC,EAAcC,eAAe,+rCA2FvBI,GAA0B,CACtChK,KAAM,iBACNiK,QAAST,EACTC,WAAa9L,GAAyCA,EAAOa,aAAa4D,aAC1EsH,KAAMC,EAAcC,eAAe,g2CAsGvBM,GAAsB,CAClClK,KAAM,WACNiK,QAAST,EACTC,WAAa9L,GAAyCA,EAAOa,aAAa4D,aAC1EsH,KAAMC,EAAcC,eAAe,4vCA+FvBO,GAAsB,CAClCnK,KAAM,WACNuJ,QAASC,EACTC,WAAa9L,GAAyCA,EAAOa,aAAa4L,kBAC1EV,KAAMC,EAAcC,eAAe,kvCC1vB7B,MAAMS,WAAyBC,EACrCC,YAAYC,EAAyB7M,GACpC8M,MAAMD,EAAY7M,EAAQ,CACzB+M,SAAU,qBAEVC,YAAa,CACZ,wLAMDC,QAAS,CACRC,EAAKC,aACLD,EAAKE,UACLF,EAAKG,YACLH,EAAKI,gBACLJ,EAAKK,cACLL,EAAKM,aACLN,EAAKO,cACLP,EAAKQ,eACLR,EAAKS,qBACLT,EAAKU,aACLV,EAAKW,cACLX,EAAKY,gBAGNC,gBAAiBb,EAAKI,gBAEtBU,aAAc,CACbd,EAAKe,WACLf,EAAKE,UACLF,EAAKC,aACLD,EAAKG,YACLH,EAAKU,aACLV,EAAKW,cACLX,EAAKI,gBACLJ,EAAKM,aACLN,EAAKO,cACLP,EAAKQ,eACLR,EAAKS,qBACLT,EAAKK,eAENW,SAAU,CAETnC,KAAMoC,GAA4BpC,KAElCqC,UAAWC,EAAMC,QAAQ,CACxB,CAACpB,EAAKC,cAAe,KACrB,CAACD,EAAKG,aAAc,KACpB,CAACH,EAAKE,WAAY,IAClB,CAACF,EAAKI,iBAAkB,EACxB,CAACJ,EAAKK,eAAgB,KACtB,CAACL,EAAKQ,gBAAiB,KACvB,CAACR,EAAKM,cAAe,KACrB,CAACN,EAAKO,eAAgB,KACtB,CAACP,EAAKS,sBAAuB,KAC7B,CAACT,EAAKU,cAAe,IACrB,CAACV,EAAKW,eAAgB,MAGvBU,SAAUC,GAEVC,SAAUC,GAEVC,QAASC,GAAqB/H,KAE9BgI,YAAaC,GAEbC,UAAWC,EAAUtO,OAAO,CAC3BuO,cAAeC,EAAeC,uBAC9BC,kBAAkB,EAClBC,qBAAsBH,EAAeC,uBACrCG,WAAW,EACXC,mBAAmB,EACnBC,gBAAiBN,EAAeO,sBAChCC,uBAAuB,EACvBC,WAAW,EACXC,aAAcV,EAAeC,uBAC7BU,eAAgBX,EAAeC,uBAC/BW,YAAaZ,EAAeO,sBAC5BM,iBAAiB,EACjBC,mBAAoBd,EAAeC,yBAEpCc,WAAYC,EAAWxP,OAAO,CAC7ByP,gBAAgB,IAEjBC,gBAAiBC,EAAgB3P,OAAO,CACvC4P,iBAAiB,EACjBC,gBAAiBrB,EAAeC,yBAEjCqB,QAASC,EAAQ/P,OAAO,CACvBgQ,aAAa,EACbC,WAAYzB,EAAeC,uBAC3ByB,aAAa,EACbC,mBAAmB,EACnBC,QAAQ,EACRC,oBAAoB,EACpBC,eAAe,KAKjBC,iBAAkB,GAGlBC,eAAgBC,GAChBC,iBAAkB,CACjBC,GAGDC,wBAAyB,CACxBC,EACAC,GAEDC,wBAAyB,CACxBC,EACAC,EACAC,GAGDC,YAAa,CACZnL,OAAQ,CACPoL,EACAC,EACAC,EAEAC,EACAC,GAEAC,EACAC,IAGFC,gBAAiB,CAEhBC,uBAAuB,GAGxBC,QAAS,CAER5D,QAAS,CACRC,GACA4D,GACAC,GACAC,IAGD3G,KAAM,CACL4G,GACAxE,GACAyE,GACAC,GACAC,GACAC,MAIJ"}