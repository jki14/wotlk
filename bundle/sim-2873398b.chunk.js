import{a6 as e,cG as n,cH as t,cI as a,cJ as i,bs as s,cK as o,cL as r,cM as l,ab as d,ac as m,cN as c,bo as u,b4 as f,b7 as S,b9 as g,a_ as p,d as h,a as b,T as v,Z as O,R as I,a3 as P,bm as y,bn as T,D as A}from"./raid_sim_action-9e0deda9.chunk.js";import{j as k,b as R,v as E,h as H,i as D,B as w,I as W,T as B,E as M,H as C,F as x,q as N}from"./individual_sim_ui-458732be.chunk.js";const j=k({fieldName:"customRotation",numColumns:2,values:[{actionId:e.fromSpellId(53408),value:n.JudgementOfWisdom},{actionId:e.fromSpellId(48806),value:n.HammerOfWrath},{actionId:e.fromSpellId(48819),value:n.Consecration},{actionId:e.fromSpellId(48817),value:n.HolyWrath},{actionId:e.fromSpellId(48801),value:n.Exorcism},{actionId:e.fromSpellId(61411),value:n.ShieldOfRighteousness},{actionId:e.fromSpellId(48827),value:n.AvengersShield},{actionId:e.fromSpellId(53595),value:n.HammerOfTheRighteous},{actionId:e.fromSpellId(48952),value:n.HolyShield}]}),G={inputs:[R({fieldName:"hammerFirst",label:"Open with HotR",labelTooltip:"Open with Hammer of the Righteous instead of Shield of Righteousness. Recommended for AoE."}),R({fieldName:"useCustomPrio",label:"Use custom priority",labelTooltip:"Deviates from the standard 96969 rotation, using the priority configured below. Will still attempt to keep a filler GCD between Hammer and Shield."}),j]},J=E({fieldName:"aura",label:"Aura",values:[{name:"None",value:t.NoPaladinAura},{name:"Devotion Aura",value:t.DevotionAura},{name:"Retribution Aura",value:t.RetributionAura}]}),F=E({fieldName:"seal",label:"Seal",labelTooltip:"The seal active before encounter",values:[{name:"Vengeance",value:a.Vengeance},{name:"Command",value:a.Command}]}),V=E({fieldName:"judgement",label:"Judgement",labelTooltip:"Judgement debuff you will use on the target during the encounter.",values:[{name:"Wisdom",value:i.JudgementOfWisdom},{name:"Light",value:i.JudgementOfLight}]}),L=H({fieldName:"useAvengingWrath",label:"Use Avenging Wrath"}),_=D({fieldName:"damageTakenPerSecond",label:"Damage Taken Per Second",labelTooltip:"Damage taken per second across the encounter. Used to model mana regeneration from Spiritual Attunement. This value should NOT include damage taken from Seal of Blood / Judgement of Blood. Leave at 0 if you do not take damage during the encounter."}),U={name:"Baseline Example",data:s.create({talentsString:"-05005135200132311333312321-511302012003",glyphs:{major1:o.GlyphOfSealOfVengeance,major2:o.GlyphOfRighteousDefense,major3:o.GlyphOfDivinePlea,minor1:r.GlyphOfSenseUndead,minor2:r.GlyphOfLayOnHands,minor3:r.GlyphOfBlessingOfKings}})},K=l.create({hammerFirst:!1,useCustomPrio:!1,customRotation:d.create({spells:[m.create({spell:n.ShieldOfRighteousness}),m.create({spell:n.HammerOfTheRighteous}),m.create({spell:n.HolyShield}),m.create({spell:n.HammerOfWrath}),m.create({spell:n.Consecration}),m.create({spell:n.AvengersShield}),m.create({spell:n.JudgementOfWisdom}),m.create({spell:n.Exorcism})]})}),z=c.create({aura:t.RetributionAura,judgement:i.JudgementOfWisdom,damageTakenPerSecond:0}),q=u.create({flask:f.FlaskOfStoneblood,food:S.FoodDragonfinFilet,defaultPotion:g.IndestructiblePotion,prepopPotion:g.IndestructiblePotion}),Z={name:"Preraid Preset",tooltip:w,enableWhen:e=>!0,gear:p.fromJsonString('{"items": [\n        {\n          "id": 42549,\n          "enchant": 44878,\n          "gems": [\n            41396,\n            49110\n          ]\n        },\n        {\n          "id": 40679\n        },\n        {\n          "id": 37635,\n          "enchant": 44957,\n          "gems": [\n            40015\n          ]\n        },\n        {\n          "id": 44188,\n          "enchant": 55002\n        },\n        {\n          "id": 39638,\n          "enchant": 47766,\n          "gems": [\n            36767,\n            40089\n          ]\n        },\n        {\n          "id": 37682,\n          "enchant": 44944,\n          "gems": [\n            0\n          ]\n        },\n        {\n          "id": 39639,\n          "enchant": 63770,\n          "gems": [\n            36767,\n            0\n          ]\n        },\n        {\n          "id": 37379,\n          "enchant": 54793,\n          "gems": [\n            40022,\n            40008\n          ]\n        },\n        {\n          "id": 37292,\n          "enchant": 38373,\n          "gems": [\n            40089\n          ]\n        },\n        {\n          "id": 44243,\n          "enchant": 55016\n        },\n        {\n          "id": 37186\n        },\n        {\n          "id": 37257\n        },\n        {\n          "id": 44063,\n          "gems": [\n            36767,\n            40015\n          ]\n        },\n        {\n          "id": 37220\n        },\n        {\n          "id": 37179,\n          "enchant": 22559\n        },\n        {\n          "id": 43085,\n          "enchant": 44936\n        },\n        {\n          "id": 40707\n        }\n      ]}')},Q={name:"P1 Preset",tooltip:w,enableWhen:e=>!0,gear:p.fromJsonString('{"items": [\n        {\n          "id": 40581,\n          "enchant": 44878,\n          "gems": [\n            41396,\n            36767\n          ]\n        },\n        {\n          "id": 40387\n        },\n        {\n          "id": 40584,\n          "enchant": 44957,\n          "gems": [\n            49110\n          ]\n        },\n        {\n          "id": 40410,\n          "enchant": 55002\n        },\n        {\n          "id": 40579,\n          "enchant": 44489,\n          "gems": [\n            36767,\n            40022\n          ]\n        },\n        {\n          "id": 39764,\n          "enchant": 44944,\n          "gems": [\n            0\n          ]\n        },\n        {\n          "id": 40580,\n          "enchant": 63770,\n          "gems": [\n            40008,\n            0\n          ]\n        },\n        {\n          "id": 39759,\n          "enchant": 54793,\n          "gems": [\n            40008,\n            40008\n          ]\n        },\n        {\n          "id": 40589,\n          "enchant": 38373\n        },\n        {\n          "id": 39717,\n          "enchant": 55016,\n          "gems": [\n            40089\n          ]\n        },\n        {\n          "id": 40718\n        },\n        {\n          "id": 40107\n        },\n        {\n          "id": 44063,\n          "gems": [\n            36767,\n            40089\n          ]\n        },\n        {\n          "id": 37220\n        },\n        {\n          "id": 40345,\n          "enchant": 44496\n        },\n        {\n          "id": 40400,\n          "enchant": 44936\n        },\n        {\n          "id": 40707\n        }\n      ]}')};class X extends W{constructor(e,n){super(e,n,{cssClass:"protection-paladin-sim-ui",knownIssues:[],epStats:[h.StatStamina,h.StatStrength,h.StatAgility,h.StatAttackPower,h.StatMeleeHit,h.StatSpellHit,h.StatMeleeCrit,h.StatExpertise,h.StatMeleeHaste,h.StatArmorPenetration,h.StatSpellPower,h.StatArmor,h.StatDefense,h.StatBlock,h.StatBlockValue,h.StatDodge,h.StatParry,h.StatResilience],epReferenceStat:h.StatSpellPower,displayStats:[h.StatHealth,h.StatArmor,h.StatStamina,h.StatStrength,h.StatAgility,h.StatAttackPower,h.StatMeleeHit,h.StatMeleeCrit,h.StatMeleeHaste,h.StatExpertise,h.StatArmorPenetration,h.StatSpellPower,h.StatSpellHit,h.StatDefense,h.StatBlock,h.StatBlockValue,h.StatDodge,h.StatParry,h.StatResilience],modifyDisplayStats:e=>{let n=new b;return v.freezeAllAndDo((()=>{e.getMajorGlyphs().includes(o.GlyphOfSealOfVengeance)&&e.getSpecOptions().seal==a.Vengeance&&(n=n.addStat(h.StatExpertise,10*O))})),{talents:n}},defaults:{gear:Q.gear,epWeights:b.fromMap({[h.StatArmor]:.07,[h.StatStamina]:1.14,[h.StatStrength]:1,[h.StatAgility]:.62,[h.StatAttackPower]:.26,[h.StatExpertise]:.69,[h.StatMeleeHit]:.79,[h.StatMeleeCrit]:.3,[h.StatMeleeHaste]:.17,[h.StatArmorPenetration]:.04,[h.StatSpellPower]:.13,[h.StatBlock]:.52,[h.StatBlockValue]:.28,[h.StatDodge]:.46,[h.StatParry]:.61,[h.StatDefense]:.54}),consumes:q,rotation:K,talents:U.data,specOptions:z,raidBuffs:I.create({giftOfTheWild:P.TristateEffectImproved,powerWordFortitude:P.TristateEffectImproved,strengthOfEarthTotem:P.TristateEffectImproved,arcaneBrilliance:!0,unleashedRage:!0,leaderOfThePack:P.TristateEffectRegular,icyTalons:!0,totemOfWrath:!0,demonicPact:500,swiftRetribution:!0,moonkinAura:P.TristateEffectRegular,sanctifiedRetribution:!0,manaSpringTotem:P.TristateEffectRegular,bloodlust:!0,thorns:P.TristateEffectImproved,devotionAura:P.TristateEffectImproved,shadowProtection:!0}),partyBuffs:y.create({}),individualBuffs:T.create({blessingOfKings:!0,blessingOfSanctuary:!0,blessingOfWisdom:P.TristateEffectImproved,blessingOfMight:P.TristateEffectImproved}),debuffs:A.create({judgementOfWisdom:!0,judgementOfLight:!0,misery:!0,faerieFire:P.TristateEffectImproved,ebonPlaguebringer:!0,totemOfWrath:!0,shadowMastery:!0,bloodFrenzy:!0,mangle:!0,exposeArmor:!0,sunderArmor:!0,vindication:!0,thunderClap:P.TristateEffectImproved,insectSwarm:!0})},playerIconInputs:[],rotationInputs:G,includeBuffDebuffInputs:[],excludeBuffDebuffInputs:[],otherInputs:{inputs:[B,M,C,x,J,L,V,F,_,N]},encounterPicker:{showExecuteProportion:!1},presets:{talents:[U],gear:[Z,Q]}})}}export{K as D,U as G,X as P,z as a,q as b,Q as c};
//# sourceMappingURL=sim-2873398b.chunk.js.map
