{"version":3,"file":"index-08a57293.entry.js","sources":["../../../ui/core/components/raid_target_picker.ts","../../../ui/raid/presets.ts","../../../ui/raid/buff_bot.ts","../../../ui/raid/assignments_picker.ts","../../../ui/raid/blessings_picker.ts","../../../ui/raid/import_export.ts","../../../ui/raid/raid_picker.ts","../../../ui/raid/tanks_picker.ts","../../../ui/raid/raid_sim_ui.ts","../../../ui/raid/index.ts"],"sourcesContent":["import { Component } from '../components/component.js';\nimport { Input, InputConfig } from '../components/input.js';\nimport { Player } from '../player.js';\nimport { Raid } from '../raid.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\nimport { RaidTarget } from '../proto/common.js';\nimport { Spec } from '../proto/common.js';\nimport { newRaidTarget, emptyRaidTarget } from '../proto_utils/utils.js';\n\ndeclare var tippy: any;\n\nexport interface RaidTargetPickerConfig<ModObject> extends InputConfig<ModObject, RaidTarget> {\n\tnoTargetLabel: string,\n\tcompChangeEmitter: TypedEvent<void>,\n}\n\nexport interface RaidTargetElemOption {\n\ticonUrl: string,\n\ttext: string,\n\tcolor: string,\n\tisDropdown: boolean,\n};\n\nexport interface RaidTargetOption extends RaidTargetElemOption {\n\tvalue: Player<any> | null,\n};\n\n// Dropdown menu for selecting a player.\nexport class RaidTargetPicker<ModObject> extends Input<ModObject, RaidTarget> {\n\tprivate readonly config: RaidTargetPickerConfig<ModObject>;\n\tprivate readonly raid: Raid;\n\tprivate readonly noTargetOption: RaidTargetOption;\n\n\tprivate curPlayer: Player<any> | null;\n\tprivate curRaidTarget: RaidTarget;\n\n\tprivate currentOptions: Array<RaidTargetOption>;\n\n\tprivate readonly buttonElem: HTMLElement;\n\tprivate readonly dropdownElem: HTMLElement;\n\n\tconstructor(parent: HTMLElement, raid: Raid, modObj: ModObject, config: RaidTargetPickerConfig<ModObject>) {\n\t\tsuper(parent, 'raid-target-picker-root', modObj, config);\n\t\tthis.rootElem.classList.add('dropdown-root');\n\t\tthis.config = config;\n\t\tthis.raid = raid;\n\t\tthis.curPlayer = this.raid.getPlayerFromRaidTarget(config.getValue(modObj));\n\t\tthis.curRaidTarget = this.getInputValue();\n\n\t\tthis.noTargetOption = {\n\t\t\ticonUrl: '',\n\t\t\ttext: config.noTargetLabel,\n\t\t\tcolor: 'black',\n\t\t\tvalue: null,\n\t\t\tisDropdown: true,\n\t\t};\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<div class=\"dropdown-button raid-target-picker-button\"></div>\n\t\t\t<div class=\"dropdown-panel raid-target-picker-dropdown\"></div>\n    `;\n\n\t\tthis.buttonElem = this.rootElem.getElementsByClassName('raid-target-picker-button')[0] as HTMLElement;\n\t\tthis.dropdownElem = this.rootElem.getElementsByClassName('raid-target-picker-dropdown')[0] as HTMLElement;\n\n\t\tthis.buttonElem.addEventListener('click', event => {\n\t\t\tevent.preventDefault();\n\t\t});\n\n\t\tthis.currentOptions = [];\n\t\tthis.updateOptions(TypedEvent.nextEventID());\n\t\tconfig.compChangeEmitter.on(eventID => {\n\t\t\tthis.updateOptions(eventID);\n\t\t});\n\n\t\tthis.init();\n\t}\n\n\tprivate makeTargetOptions(): Array<RaidTargetOption> {\n\t\tconst playerOptions = this.raid.getPlayers().filter(player => player != null).map(player => {\n\t\t\treturn {\n\t\t\t\ticonUrl: player!.getTalentTreeIcon(),\n\t\t\t\ttext: player!.getLabel(),\n\t\t\t\tcolor: player!.getClassColor(),\n\t\t\t\tisDropdown: true,\n\t\t\t\tvalue: player,\n\t\t\t};\n\t\t});\n\t\treturn [this.noTargetOption].concat(playerOptions);\n\t}\n\n\tprivate updateOptions(eventID: EventID) {\n\t\tthis.currentOptions = this.makeTargetOptions();\n\n\t\tthis.dropdownElem.innerHTML = '';\n\t\tthis.currentOptions.forEach(option => this.dropdownElem.appendChild(this.makeOption(option)));\n\n\t\tconst prevRaidTarget = this.curRaidTarget;\n\t\tthis.curRaidTarget = this.getInputValue();\n\t\tif (!RaidTarget.equals(prevRaidTarget, this.curRaidTarget)) {\n\t\t\tthis.inputChanged(eventID);\n\t\t} else {\n\t\t\tthis.setInputValue(this.curRaidTarget);\n\t\t}\n\t}\n\n\tprivate makeOption(data: RaidTargetOption): HTMLElement {\n\t\tconst option = RaidTargetPicker.makeOptionElem(data);\n\n\t\toption.addEventListener('click', event => {\n\t\t\tevent.preventDefault();\n\t\t\tthis.curPlayer = data.value;\n\t\t\tthis.curRaidTarget = this.getInputValue();\n\t\t\tthis.inputChanged(TypedEvent.nextEventID());\n\t\t});\n\n\t\treturn option;\n\t}\n\n\tgetInputElem(): HTMLElement {\n\t\treturn this.buttonElem;\n\t}\n\n\tgetInputValue(): RaidTarget {\n\t\tif (this.curPlayer) {\n\t\t\treturn this.curPlayer.makeRaidTarget();\n\t\t} else {\n\t\t\treturn emptyRaidTarget();\n\t\t}\n\t}\n\n\tsetInputValue(newValue: RaidTarget) {\n\t\tthis.curRaidTarget = RaidTarget.clone(newValue);\n\t\tthis.curPlayer = this.raid.getPlayerFromRaidTarget(this.curRaidTarget);\n\n\t\tconst optionData = this.currentOptions.find(optionData => optionData.value == this.curPlayer);\n\t\tif (!optionData) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.buttonElem.innerHTML = '';\n\t\tthis.buttonElem.appendChild(RaidTargetPicker.makeOptionElem(optionData));\n\t}\n\n\tstatic makeOptionElem(data: RaidTargetElemOption): HTMLElement {\n\t\tconst optionContainer = document.createElement('div');\n\t\toptionContainer.classList.add('dropdown-option-container');\n\n\t\tconst option = document.createElement('div');\n\t\toption.classList.add('raid-target-picker-option');\n\t\toptionContainer.appendChild(option);\n\t\tif (data.isDropdown) {\n\t\t\toption.classList.add('dropdown-option');\n\t\t}\n\n\t\tif (data.color) {\n\t\t\toption.style.backgroundColor = data.color;\n\t\t}\n\n\t\tif (data.iconUrl) {\n\t\t\tconst icon = document.createElement('img');\n\t\t\ticon.src = data.iconUrl;\n\t\t\ticon.classList.add('raid-target-picker-icon');\n\t\t\toption.appendChild(icon);\n\t\t}\n\n\t\tif (data.text) {\n\t\t\tconst label = document.createElement('span');\n\t\t\tlabel.textContent = data.text;\n\t\t\tlabel.classList.add('raid-target-picker-label');\n\t\t\toption.appendChild(label);\n\t\t}\n\n\t\treturn optionContainer;\n\t}\n}\n","import { IndividualSimUI, OtherDefaults } from '../core/individual_sim_ui.js';\nimport { Raid as RaidProto } from '../core/proto/api.js';\nimport { Party as PartyProto } from '../core/proto/api.js';\nimport { Class } from '../core/proto/common.js';\nimport { Consumes } from '../core/proto/common.js';\n\nimport { Encounter as EncounterProto } from '../core/proto/common.js';\nimport { EquipmentSpec } from '../core/proto/common.js';\nimport { Race } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js';\nimport { Faction } from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport { SpecOptions } from '../core/proto_utils/utils.js';\nimport { SpecRotation } from '../core/proto_utils/utils.js';\nimport { playerToSpec } from '../core/proto_utils/utils.js';\nimport { specIconsLarge } from '../core/proto_utils/utils.js';\nimport { specNames } from '../core/proto_utils/utils.js';\nimport { talentTreeIcons } from '../core/proto_utils/utils.js';\nimport { NO_TARGET } from '../core/proto_utils/utils.js';\nimport { Player } from '../core/player.js';\n\nimport { BuffBot } from './buff_bot.js';\n\nimport * as DeathknightPresets from '../deathknight/presets.js';\nimport * as BalanceDruidPresets from '../balance_druid/presets.js';\nimport * as FeralDruidPresets from '../feral_druid/presets.js';\nimport * as FeralTankDruidPresets from '../feral_tank_druid/presets.js';\nimport * as ElementalShamanPresets from '../elemental_shaman/presets.js';\nimport * as EnhancementShamanPresets from '../enhancement_shaman/presets.js';\nimport * as HunterPresets from '../hunter/presets.js';\nimport * as MagePresets from '../mage/presets.js';\nimport * as RoguePresets from '../rogue/presets.js';\nimport * as RetributionPaladinPresets from '../retribution_paladin/presets.js';\nimport * as ProtectionPaladinPresets from '../protection_paladin/presets.js';\nimport * as ShadowPriestPresets from '../shadow_priest/presets.js';\nimport * as SmitePriestPresets from '../smite_priest/presets.js';\nimport * as WarriorPresets from '../warrior/presets.js';\nimport * as ProtectionWarriorPresets from '../protection_warrior/presets.js';\nimport * as WarlockPresets from '../warlock/presets.js';\n\n\nimport { BalanceDruidSimUI } from '../balance_druid/sim.js';\nimport { FeralDruidSimUI } from '../feral_druid/sim.js';\nimport { FeralTankDruidSimUI } from '../feral_tank_druid/sim.js';\nimport { EnhancementShamanSimUI } from '../enhancement_shaman/sim.js';\nimport { ElementalShamanSimUI } from '../elemental_shaman/sim.js';\nimport { HunterSimUI } from '../hunter/sim.js';\nimport { MageSimUI } from '../mage/sim.js';\nimport { RogueSimUI } from '../rogue/sim.js';\nimport { RetributionPaladinSimUI } from '../retribution_paladin/sim.js';\nimport { ProtectionPaladinSimUI } from '../protection_paladin/sim.js';\nimport { ShadowPriestSimUI } from '../shadow_priest/sim.js';\nimport { SmitePriestSimUI } from '../smite_priest/sim.js';\nimport { WarriorSimUI } from '../warrior/sim.js';\nimport { ProtectionWarriorSimUI } from '../protection_warrior/sim.js';\nimport { WarlockSimUI } from '../warlock/sim.js';\nimport { DeathknightSimUI } from '../deathknight/sim.js';\n\nexport const specSimFactories: Partial<Record<Spec, (parentElem: HTMLElement, player: Player<any>) => IndividualSimUI<any>>> = {\n\t[Spec.SpecDeathknight]: (parentElem: HTMLElement, player: Player<any>) => new DeathknightSimUI(parentElem, player),\n\t[Spec.SpecBalanceDruid]: (parentElem: HTMLElement, player: Player<any>) => new BalanceDruidSimUI(parentElem, player),\n\t[Spec.SpecFeralDruid]: (parentElem: HTMLElement, player: Player<any>) => new FeralDruidSimUI(parentElem, player),\n\t[Spec.SpecFeralTankDruid]: (parentElem: HTMLElement, player: Player<any>) => new FeralTankDruidSimUI(parentElem, player),\n\t[Spec.SpecElementalShaman]: (parentElem: HTMLElement, player: Player<any>) => new ElementalShamanSimUI(parentElem, player),\n\t[Spec.SpecEnhancementShaman]: (parentElem: HTMLElement, player: Player<any>) => new EnhancementShamanSimUI(parentElem, player),\n\t[Spec.SpecHunter]: (parentElem: HTMLElement, player: Player<any>) => new HunterSimUI(parentElem, player),\n\t[Spec.SpecMage]: (parentElem: HTMLElement, player: Player<any>) => new MageSimUI(parentElem, player),\n\t[Spec.SpecRogue]: (parentElem: HTMLElement, player: Player<any>) => new RogueSimUI(parentElem, player),\n\t[Spec.SpecRetributionPaladin]: (parentElem: HTMLElement, player: Player<any>) => new RetributionPaladinSimUI(parentElem, player),\n\t[Spec.SpecProtectionPaladin]: (parentElem: HTMLElement, player: Player<any>) => new ProtectionPaladinSimUI(parentElem, player),\n\t[Spec.SpecShadowPriest]: (parentElem: HTMLElement, player: Player<any>) => new ShadowPriestSimUI(parentElem, player),\n\t[Spec.SpecSmitePriest]: (parentElem: HTMLElement, player: Player<any>) => new SmitePriestSimUI(parentElem, player),\n\t[Spec.SpecWarrior]: (parentElem: HTMLElement, player: Player<any>) => new WarriorSimUI(parentElem, player),\n\t[Spec.SpecProtectionWarrior]: (parentElem: HTMLElement, player: Player<any>) => new ProtectionWarriorSimUI(parentElem, player),\n\t[Spec.SpecWarlock]: (parentElem: HTMLElement, player: Player<any>) => new WarlockSimUI(parentElem, player),\n};\n\n// Configuration necessary for creating new players.\nexport interface PresetSpecSettings<SpecType extends Spec> {\n\tspec: Spec,\n\trotation: SpecRotation<SpecType>,\n\ttalents: SavedTalents,\n\tspecOptions: SpecOptions<SpecType>,\n\tconsumes: Consumes,\n\n\tdefaultName: string,\n\tdefaultFactionRaces: Record<Faction, Race>,\n\tdefaultGear: Record<Faction, Record<number, EquipmentSpec>>,\n\totherDefaults?: OtherDefaults,\n\n\ttooltip: string,\n\ticonUrl: string,\n}\n\n// Configuration necessary for creating new BuffBots.\nexport interface BuffBotSettings {\n\t// The value of this field must never change, to preserve local storage data.\n\tbuffBotId: string,\n\n\t// Set this to true to remove a buff bot option after launching a real sim.\n\t// This will allow users with saved settings to properly load the buffbot but\n\t// also remove the buffbot as an option from the UI.\n\tdeprecated?: boolean,\n\n\tspec: Spec,\n\tname: string,\n\ttooltip: string,\n\ticonUrl: string,\n\n\t// Callback to apply buffs from this buff bot.\n\tmodifyRaidProto: (buffBot: BuffBot, raidProto: RaidProto, partyProto: PartyProto) => void,\n}\n\nexport const playerPresets: Array<PresetSpecSettings<any>> = [\n\t{\n\t\tspec: Spec.SpecDeathknight,\n\t\trotation: DeathknightPresets.DefaultFrostRotation,\n\t\ttalents: DeathknightPresets.FrostTalents.data,\n\t\tspecOptions: DeathknightPresets.DefaultFrostOptions,\n\t\tconsumes: DeathknightPresets.DefaultConsumes,\n\t\tdefaultName: 'Frost DK',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: DeathknightPresets.P1_FROST_BIS_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: DeathknightPresets.P1_FROST_BIS_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\totherDefaults: DeathknightPresets.OtherDefaults,\n\t\ttooltip: 'Frost Death Knight',\n\t\ticonUrl: talentTreeIcons[Class.ClassDeathknight][1],\n\t},\n\t{\n\t\tspec: Spec.SpecDeathknight,\n\t\trotation: DeathknightPresets.DefaultUnholyRotation,\n\t\ttalents: DeathknightPresets.UnholyDualWieldTalents.data,\n\t\tspecOptions: DeathknightPresets.DefaultUnholyOptions,\n\t\tconsumes: DeathknightPresets.DefaultConsumes,\n\t\tdefaultName: 'DW Unholy DK',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: DeathknightPresets.P1_UNHOLY_DW_BIS_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: DeathknightPresets.P1_UNHOLY_DW_BIS_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\totherDefaults: DeathknightPresets.OtherDefaults,\n\t\ttooltip: 'Dual Wield Unholy DK',\n\t\ticonUrl: talentTreeIcons[Class.ClassDeathknight][2],\n\t},\n\t{\n\t\tspec: Spec.SpecDeathknight,\n\t\trotation: DeathknightPresets.DefaultBloodRotation,\n\t\ttalents: DeathknightPresets.BloodTalents.data,\n\t\tspecOptions: DeathknightPresets.DefaultBloodOptions,\n\t\tconsumes: DeathknightPresets.DefaultConsumes,\n\t\tdefaultName: 'Blood Dps DK',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: DeathknightPresets.P1_BLOOD_BIS_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: DeathknightPresets.P1_BLOOD_BIS_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\totherDefaults: DeathknightPresets.OtherDefaults,\n\t\ttooltip: 'Blood Dps DK',\n\t\ticonUrl: talentTreeIcons[Class.ClassDeathknight][0],\n\t},\n\t{\n\t\tspec: Spec.SpecBalanceDruid,\n\t\trotation: BalanceDruidPresets.DefaultRotation,\n\t\ttalents: BalanceDruidPresets.StandardTalents.data,\n\t\tspecOptions: BalanceDruidPresets.DefaultOptions,\n\t\tconsumes: BalanceDruidPresets.DefaultConsumes,\n\t\tdefaultName: 'Balance Druid',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: BalanceDruidPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: BalanceDruidPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecBalanceDruid],\n\t\ticonUrl: specIconsLarge[Spec.SpecBalanceDruid],\n\t},\n\t{\n\t\tspec: Spec.SpecFeralDruid,\n\t\trotation: FeralDruidPresets.DefaultRotation,\n\t\ttalents: FeralDruidPresets.StandardTalents.data,\n\t\tspecOptions: FeralDruidPresets.DefaultOptions,\n\t\tconsumes: FeralDruidPresets.DefaultConsumes,\n\t\tdefaultName: 'Cat Druid',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: FeralDruidPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: FeralDruidPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecFeralDruid],\n\t\ticonUrl: specIconsLarge[Spec.SpecFeralDruid],\n\t},\n\t{\n\t\tspec: Spec.SpecFeralTankDruid,\n\t\trotation: FeralTankDruidPresets.DefaultRotation,\n\t\ttalents: FeralTankDruidPresets.StandardTalents.data,\n\t\tspecOptions: FeralTankDruidPresets.DefaultOptions,\n\t\tconsumes: FeralTankDruidPresets.DefaultConsumes,\n\t\tdefaultName: 'Bear Druid',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: FeralTankDruidPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: FeralTankDruidPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecFeralTankDruid],\n\t\ticonUrl: specIconsLarge[Spec.SpecFeralTankDruid],\n\t},\n\t{\n\t\tspec: Spec.SpecHunter,\n\t\trotation: HunterPresets.DefaultRotation,\n\t\ttalents: HunterPresets.BeastMasteryTalents.data,\n\t\tspecOptions: HunterPresets.BMDefaultOptions,\n\t\tconsumes: HunterPresets.DefaultConsumes,\n\t\tdefaultName: 'BM Hunter',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: HunterPresets.MM_P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: HunterPresets.MM_P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'BM Hunter',\n\t\ticonUrl: talentTreeIcons[Class.ClassHunter][0],\n\t},\n\t{\n\t\tspec: Spec.SpecHunter,\n\t\trotation: HunterPresets.DefaultRotation,\n\t\ttalents: HunterPresets.MarksmanTalents.data,\n\t\tspecOptions: HunterPresets.DefaultOptions,\n\t\tconsumes: HunterPresets.DefaultConsumes,\n\t\tdefaultName: 'MM Hunter',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: HunterPresets.MM_P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: HunterPresets.MM_P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'MM Hunter',\n\t\ticonUrl: talentTreeIcons[Class.ClassHunter][1],\n\t},\n\t{\n\t\tspec: Spec.SpecHunter,\n\t\trotation: HunterPresets.DefaultRotation,\n\t\ttalents: HunterPresets.SurvivalTalents.data,\n\t\tspecOptions: HunterPresets.DefaultOptions,\n\t\tconsumes: HunterPresets.DefaultConsumes,\n\t\tdefaultName: 'SV Hunter',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: HunterPresets.SV_P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: HunterPresets.SV_P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'SV Hunter',\n\t\ticonUrl: talentTreeIcons[Class.ClassHunter][2],\n\t},\n\t{\n\t\tspec: Spec.SpecMage,\n\t\trotation: MagePresets.DefaultArcaneRotation,\n\t\ttalents: MagePresets.ArcaneTalents.data,\n\t\tspecOptions: MagePresets.DefaultArcaneOptions,\n\t\tconsumes: MagePresets.DefaultArcaneConsumes,\n\t\tdefaultName: 'Arcane Mage',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceGnome,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: MagePresets.P1_ARCANE_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: MagePresets.P1_ARCANE_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Arcane Mage',\n\t\ticonUrl: talentTreeIcons[Class.ClassMage][0],\n\t},\n\t{\n\t\tspec: Spec.SpecMage,\n\t\trotation: MagePresets.DefaultFireRotation,\n\t\ttalents: MagePresets.FireTalents.data,\n\t\tspecOptions: MagePresets.DefaultFireOptions,\n\t\tconsumes: MagePresets.DefaultFireConsumes,\n\t\tdefaultName: 'Fire Mage',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceGnome,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: MagePresets.P1_FIRE_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: MagePresets.P1_FIRE_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Fire Mage',\n\t\ticonUrl: talentTreeIcons[Class.ClassMage][1],\n\t},\n\t{\n\t\tspec: Spec.SpecMage,\n\t\trotation: MagePresets.DefaultFrostRotation,\n\t\ttalents: MagePresets.FrostTalents.data,\n\t\tspecOptions: MagePresets.DefaultFrostOptions,\n\t\tconsumes: MagePresets.DefaultFrostConsumes,\n\t\tdefaultName: 'Frost Mage',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceGnome,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: MagePresets.P1_FROST_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: MagePresets.P1_FROST_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Frost Mage',\n\t\ticonUrl: talentTreeIcons[Class.ClassMage][2],\n\t},\n\t{\n\t\tspec: Spec.SpecRogue,\n\t\trotation: RoguePresets.DefaultRotation,\n\t\ttalents: RoguePresets.CombatTalents.data,\n\t\tspecOptions: RoguePresets.DefaultOptions,\n\t\tconsumes: RoguePresets.DefaultConsumes,\n\t\tdefaultName: 'Combat Rogue',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: RoguePresets.P1_PRESET_COMBAT.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: RoguePresets.P1_PRESET_COMBAT.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Combat Rogue',\n\t\ticonUrl: specIconsLarge[Spec.SpecRogue],\n\t},\n\t{\n\t\tspec: Spec.SpecElementalShaman,\n\t\trotation: ElementalShamanPresets.DefaultRotation,\n\t\ttalents: ElementalShamanPresets.StandardTalents.data,\n\t\tspecOptions: ElementalShamanPresets.DefaultOptions,\n\t\tconsumes: ElementalShamanPresets.DefaultConsumes,\n\t\tdefaultName: 'Ele Shaman',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDraenei,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: ElementalShamanPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: ElementalShamanPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecElementalShaman],\n\t\ticonUrl: specIconsLarge[Spec.SpecElementalShaman],\n\t},\n\t{\n\t\tspec: Spec.SpecEnhancementShaman,\n\t\trotation: EnhancementShamanPresets.DefaultRotation,\n\t\ttalents: EnhancementShamanPresets.StandardTalents.data,\n\t\tspecOptions: EnhancementShamanPresets.DefaultOptions,\n\t\tconsumes: EnhancementShamanPresets.DefaultConsumes,\n\t\tdefaultName: 'Enh Shaman',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDraenei,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: EnhancementShamanPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: EnhancementShamanPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecEnhancementShaman],\n\t\ticonUrl: specIconsLarge[Spec.SpecEnhancementShaman],\n\t},\n\t{\n\t\tspec: Spec.SpecShadowPriest,\n\t\trotation: ShadowPriestPresets.DefaultRotation,\n\t\ttalents: ShadowPriestPresets.StandardTalents.data,\n\t\tspecOptions: ShadowPriestPresets.DefaultOptions,\n\t\tconsumes: ShadowPriestPresets.DefaultConsumes,\n\t\tdefaultName: 'Shadow Priest',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDwarf,\n\t\t\t[Faction.Horde]: Race.RaceUndead,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: ShadowPriestPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: ShadowPriestPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecShadowPriest],\n\t\ticonUrl: specIconsLarge[Spec.SpecShadowPriest],\n\t},\n\t{\n\t\tspec: Spec.SpecSmitePriest,\n\t\trotation: SmitePriestPresets.DefaultRotation,\n\t\ttalents: SmitePriestPresets.StandardTalents.data,\n\t\tspecOptions: SmitePriestPresets.DefaultOptions,\n\t\tconsumes: SmitePriestPresets.DefaultConsumes,\n\t\tdefaultName: 'Smite Priest',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDwarf,\n\t\t\t[Faction.Horde]: Race.RaceUndead,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: SmitePriestPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: SmitePriestPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecSmitePriest],\n\t\ticonUrl: specIconsLarge[Spec.SpecSmitePriest],\n\t},\n\t{\n\t\tspec: Spec.SpecWarrior,\n\t\trotation: WarriorPresets.ArmsRotation,\n\t\ttalents: WarriorPresets.ArmsTalents.data,\n\t\tspecOptions: WarriorPresets.DefaultOptions,\n\t\tconsumes: WarriorPresets.DefaultConsumes,\n\t\tdefaultName: 'Arms Warrior',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: WarriorPresets.P1_ARMS_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: WarriorPresets.P1_ARMS_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Arms Warrior',\n\t\ticonUrl: talentTreeIcons[Class.ClassWarrior][0],\n\t},\n\t{\n\t\tspec: Spec.SpecWarrior,\n\t\trotation: WarriorPresets.DefaultRotation,\n\t\ttalents: WarriorPresets.FuryTalents.data,\n\t\tspecOptions: WarriorPresets.DefaultOptions,\n\t\tconsumes: WarriorPresets.DefaultConsumes,\n\t\tdefaultName: 'Fury Warrior',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: WarriorPresets.P1_FURY_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: WarriorPresets.P1_FURY_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Fury Warrior',\n\t\ticonUrl: talentTreeIcons[Class.ClassWarrior][1],\n\t},\n\t{\n\t\tspec: Spec.SpecProtectionWarrior,\n\t\trotation: ProtectionWarriorPresets.DefaultRotation,\n\t\ttalents: ProtectionWarriorPresets.StandardTalents.data,\n\t\tspecOptions: ProtectionWarriorPresets.DefaultOptions,\n\t\tconsumes: ProtectionWarriorPresets.DefaultConsumes,\n\t\tdefaultName: 'Prot Warrior',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: ProtectionWarriorPresets.P1_BALANCED_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: ProtectionWarriorPresets.P1_BALANCED_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Protection Warrior',\n\t\ticonUrl: talentTreeIcons[Class.ClassWarrior][2],\n\t},\n\t{\n\t\tspec: Spec.SpecRetributionPaladin,\n\t\trotation: RetributionPaladinPresets.DefaultRotation,\n\t\ttalents: RetributionPaladinPresets.AuraMasteryTalents.data,\n\t\tspecOptions: RetributionPaladinPresets.DefaultOptions,\n\t\tconsumes: RetributionPaladinPresets.DefaultConsumes,\n\t\tdefaultName: 'Ret Paladin',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceBloodElf,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: RetributionPaladinPresets.P1_PRESET.gear,\n\t\t\t\t2: RetributionPaladinPresets.P2_PRESET.gear,\n\t\t\t\t3: RetributionPaladinPresets.P3_PRESET.gear,\n\t\t\t\t4: RetributionPaladinPresets.P4_PRESET.gear,\n\t\t\t\t5: RetributionPaladinPresets.P5_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: RetributionPaladinPresets.P1_PRESET.gear,\n\t\t\t\t2: RetributionPaladinPresets.P2_PRESET.gear,\n\t\t\t\t3: RetributionPaladinPresets.P3_PRESET.gear,\n\t\t\t\t4: RetributionPaladinPresets.P4_PRESET.gear,\n\t\t\t\t5: RetributionPaladinPresets.P5_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Ret Paladin',\n\t\ticonUrl: talentTreeIcons[Class.ClassPaladin][2],\n\t},\n\t{\n\t\tspec: Spec.SpecProtectionPaladin,\n\t\trotation: ProtectionPaladinPresets.DefaultRotation,\n\t\ttalents: ProtectionPaladinPresets.GenericAoeTalents.data,\n\t\tspecOptions: ProtectionPaladinPresets.DefaultOptions,\n\t\tconsumes: ProtectionPaladinPresets.DefaultConsumes,\n\t\tdefaultName: 'Prot Paladin',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceBloodElf,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: ProtectionPaladinPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: ProtectionPaladinPresets.P1_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Protection Paladin',\n\t\ticonUrl: talentTreeIcons[Class.ClassPaladin][1],\n\t},\n\t{\n\t\tspec: Spec.SpecWarlock,\n\t\trotation: WarlockPresets.DestructionRotation,\n\t\ttalents: WarlockPresets.DestructionTalents.data,\n\t\tspecOptions: WarlockPresets.DestructionOptions,\n\t\tconsumes: WarlockPresets.DefaultConsumes,\n\t\tdefaultName: 'Destro Warlock',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Demo_Destro.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_14.gear,\n\t\t\t},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Demo_Destro.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_14.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Demo_Destro.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_14.gear,\n\t\t\t},\n\t\t},\n\t\totherDefaults: WarlockPresets.OtherDefaults,\n\t\ttooltip: 'Destruction Warlock: Adds Improved Soul Leech and Blood Pact',\n\t\ticonUrl: talentTreeIcons[Class.ClassWarlock][2],\n\t},\n\t{\n\t\tspec: Spec.SpecWarlock,\n\t\trotation: WarlockPresets.AfflictionRotation,\n\t\ttalents: WarlockPresets.AfflictionTalents.data,\n\t\tspecOptions: WarlockPresets.AfflictionOptions,\n\t\tconsumes: WarlockPresets.DefaultConsumes,\n\t\tdefaultName: 'Affli Warlock',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Affliction.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_11.gear,\n\t\t\t},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Affliction.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_11.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Affliction.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_11.gear,\n\t\t\t},\n\t\t},\n\t\totherDefaults: WarlockPresets.OtherDefaults,\n\t\ttooltip: 'Affliction Warlock: Adds Improved Fel Intelligence',\n\t\ticonUrl: talentTreeIcons[Class.ClassWarlock][0],\n\t},\n\t{\n\t\tspec: Spec.SpecWarlock,\n\t\trotation: WarlockPresets.DemonologyRotation,\n\t\ttalents: WarlockPresets.DemonologyTalents.data,\n\t\tspecOptions: WarlockPresets.DemonologyOptions,\n\t\tconsumes: WarlockPresets.DefaultConsumes,\n\t\tdefaultName: 'Demo Warlock',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Demo_Destro.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_14.gear,\n\t\t\t},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Demo_Destro.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_14.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Demo_Destro.gear,\n\t\t\t\t2: WarlockPresets.P1_PreBiS_14.gear,\n\t\t\t},\n\t\t},\n\t\totherDefaults: WarlockPresets.OtherDefaults,\n\t\ttooltip: 'Demonology Warlock: Adds Demonic Pact',\n\t\ticonUrl: talentTreeIcons[Class.ClassWarlock][1],\n\t},\n];\n\nexport const implementedSpecs: Array<Spec> = [...new Set(playerPresets.map(preset => preset.spec))];\n\nexport const buffBotPresets: Array<BuffBotSettings> = [\n\t{\n\t\t// The value of this field must never change, to preserve local storage data.\n\t\tbuffBotId: 'Bear',\n\t\tdeprecated: true,\n\t\tspec: Spec.SpecBalanceDruid,\n\t\tname: 'Bear',\n\t\ttooltip: 'Bear: Adds Gift of the Wild, an Innervate, Faerie Fire, and Leader of the Pack.',\n\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_racial_bearform.jpg',\n\t\tmodifyRaidProto: (buffBot: BuffBot, raidProto: RaidProto, partyProto: PartyProto) => {\n\t\t\traidProto.buffs!.giftOfTheWild = Math.max(raidProto.buffs!.giftOfTheWild, TristateEffect.TristateEffectRegular);\n\t\t\traidProto.buffs!.thorns = Math.max(raidProto.buffs!.thorns, TristateEffect.TristateEffectRegular);\n\t\t\traidProto.debuffs!.faerieFire = Math.max(raidProto.debuffs!.faerieFire, TristateEffect.TristateEffectRegular);\n\t\t\traidProto.buffs!.leaderOfThePack = Math.max(raidProto.buffs!.leaderOfThePack, TristateEffect.TristateEffectRegular);\n\n\t\t\tconst innervateIndex = buffBot.getInnervateAssignment().targetIndex;\n\t\t\tif (innervateIndex != NO_TARGET) {\n\t\t\t\tconst partyIndex = Math.floor(innervateIndex / 5);\n\t\t\t\tconst playerIndex = innervateIndex % 5;\n\t\t\t\tconst playerProto = raidProto.parties[partyIndex].players[playerIndex];\n\t\t\t\tif (playerProto.buffs) {\n\t\t\t\t\tplayerProto.buffs.innervates++;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t},\n\t{\n\t\t// The value of this field must never change, to preserve local storage data.\n\t\tbuffBotId: 'Resto Druid',\n\t\tspec: Spec.SpecBalanceDruid,\n\t\tname: 'Resto Druid',\n\t\ttooltip: 'Resto Druid: Adds Improved Gift of the Wild, and an Innervate.',\n\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_healingtouch.jpg',\n\t\tmodifyRaidProto: (buffBot: BuffBot, raidProto: RaidProto, partyProto: PartyProto) => {\n\t\t\traidProto.buffs!.giftOfTheWild = TristateEffect.TristateEffectImproved;\n\t\t\traidProto.buffs!.thorns = Math.max(raidProto.buffs!.thorns, TristateEffect.TristateEffectRegular);\n\n\t\t\tconst innervateIndex = buffBot.getInnervateAssignment().targetIndex;\n\t\t\tif (innervateIndex != NO_TARGET) {\n\t\t\t\tconst partyIndex = Math.floor(innervateIndex / 5);\n\t\t\t\tconst playerIndex = innervateIndex % 5;\n\t\t\t\tconst playerProto = raidProto.parties[partyIndex].players[playerIndex];\n\t\t\t\tif (playerProto.buffs) {\n\t\t\t\t\tplayerProto.buffs.innervates++;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t},\n\t{\n\t\t// The value of this field must never change, to preserve local storage data.\n\t\tbuffBotId: 'Dreamstate',\n\t\tspec: Spec.SpecBalanceDruid,\n\t\tname: 'Dreamstate',\n\t\ttooltip: 'Dreamstate: Adds Improved Gift of the Wild, an Innervate, and Improved Faerie Fire.',\n\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_faeriefire.jpg',\n\t\tmodifyRaidProto: (buffBot: BuffBot, raidProto: RaidProto, partyProto: PartyProto) => {\n\t\t\traidProto.buffs!.giftOfTheWild = TristateEffect.TristateEffectImproved;\n\t\t\traidProto.buffs!.thorns = TristateEffect.TristateEffectImproved;\n\t\t\traidProto.debuffs!.faerieFire = TristateEffect.TristateEffectImproved;\n\n\t\t\tconst innervateIndex = buffBot.getInnervateAssignment().targetIndex;\n\t\t\tif (innervateIndex != NO_TARGET) {\n\t\t\t\tconst partyIndex = Math.floor(innervateIndex / 5);\n\t\t\t\tconst playerIndex = innervateIndex % 5;\n\t\t\t\tconst playerProto = raidProto.parties[partyIndex].players[playerIndex];\n\t\t\t\tif (playerProto.buffs) {\n\t\t\t\t\tplayerProto.buffs.innervates++;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t},\n\t{\n\t\t// The value of this field must never change, to preserve local storage data.\n\t\tbuffBotId: 'Mage',\n\t\tdeprecated: true,\n\t\tspec: Spec.SpecMage,\n\t\tname: 'Mage',\n\t\ttooltip: 'Mage: Adds Arcane Brilliance.',\n\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_arcaneintellect.jpg',\n\t\tmodifyRaidProto: (buffBot: BuffBot, raidProto: RaidProto, partyProto: PartyProto) => {\n\t\t\traidProto.buffs!.arcaneBrilliance = true;\n\t\t},\n\t},\n\t{\n\t\t// The value of this field must never change, to preserve local storage data.\n\t\tbuffBotId: 'Paladin',\n\t\tspec: Spec.SpecRetributionPaladin,\n\t\tname: 'Holy Paladin',\n\t\ttooltip: 'Holy Paladin: Adds a set of blessings.',\n\t\ticonUrl: talentTreeIcons[Class.ClassPaladin][0],\n\t\tmodifyRaidProto: (buffBot: BuffBot, raidProto: RaidProto, partyProto: PartyProto) => {\n\t\t\t// Do nothing, blessings are handled elswhere.\n\t\t},\n\t},\n\t{\n\t\t// The value of this field must never change, to preserve local storage data.\n\t\tbuffBotId: 'JoW Paladin',\n\t\tspec: Spec.SpecRetributionPaladin,\n\t\tname: 'JoW Paladin',\n\t\ttooltip: 'JoW Paladin: Adds a set of blessings and Judgement of Wisdom.',\n\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_righteousnessaura.jpg',\n\t\tmodifyRaidProto: (buffBot: BuffBot, raidProto: RaidProto, partyProto: PartyProto) => {\n\t\t\t// Blessings are handled elswhere.\n\t\t\traidProto.debuffs!.judgementOfWisdom = true;\n\t\t},\n\t},\n\t{\n\t\t// The value of this field must never change, to preserve local storage data.\n\t\tbuffBotId: 'Holy Priest',\n\t\tspec: Spec.SpecShadowPriest,\n\t\tname: 'Holy Priest',\n\t\ttooltip: 'Holy Priest: Adds Improved PW Fortitude and Shadow Protection.',\n\t\ticonUrl: talentTreeIcons[Class.ClassPriest][1],\n\t\tmodifyRaidProto: (buffBot: BuffBot, raidProto: RaidProto, partyProto: PartyProto) => {\n\t\t\traidProto.buffs!.shadowProtection = true;\n\t\t\traidProto.buffs!.powerWordFortitude = TristateEffect.TristateEffectImproved;\n\t\t},\n\t},\n\t{\n\t\t// The value of this field must never change, to preserve local storage data.\n\t\tbuffBotId: 'Divine Spirit Priest',\n\t\tspec: Spec.SpecShadowPriest,\n\t\tname: 'Disc Priest',\n\t\ttooltip: 'Disc Priest: Adds Improved PW Fort, Shadow Protection, Improved Divine Spirit and a Power Infusion.',\n\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_powerinfusion.jpg',\n\t\tmodifyRaidProto: (buffBot: BuffBot, raidProto: RaidProto, partyProto: PartyProto) => {\n\t\t\traidProto.buffs!.shadowProtection = true;\n\t\t\traidProto.buffs!.powerWordFortitude = TristateEffect.TristateEffectImproved;\n\t\t\traidProto.buffs!.divineSpirit = true;\n\n\t\t\tconst powerInfusionIndex = buffBot.getPowerInfusionAssignment().targetIndex;\n\t\t\tif (powerInfusionIndex != NO_TARGET) {\n\t\t\t\tconst partyIndex = Math.floor(powerInfusionIndex / 5);\n\t\t\t\tconst playerIndex = powerInfusionIndex % 5;\n\t\t\t\tconst playerProto = raidProto.parties[partyIndex].players[playerIndex];\n\t\t\t\tif (playerProto.buffs) {\n\t\t\t\t\tplayerProto.buffs.powerInfusions++;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t},\n\t{\n\t\t// The value of this field must never change, to preserve local storage data.\n\t\tbuffBotId: 'Rogue',\n\t\tspec: Spec.SpecShadowPriest,\n\t\tname: 'Rogue',\n\t\ttooltip: 'Rogue: Adds TotT.',\n\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_tricksofthetrade.jpg',\n\t\tmodifyRaidProto: (buffBot: BuffBot, raidProto: RaidProto, partyProto: PartyProto) => {\n\t\t\tconst tricksOfTheTradeIndex = buffBot.getTricksOfTheTradeAssignment().targetIndex;\n\t\t\tif (tricksOfTheTradeIndex != NO_TARGET) {\n\t\t\t\tconst partyIndex = Math.floor(tricksOfTheTradeIndex / 5);\n\t\t\t\tconst playerIndex = tricksOfTheTradeIndex % 5;\n\t\t\t\tconst playerProto = raidProto.parties[partyIndex].players[playerIndex];\n\t\t\t\tif (playerProto.buffs) {\n\t\t\t\t\tplayerProto.buffs.tricksOfTheTrades++;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t},\n\t{\n\t\t// The value of this field must never change, to preserve local storage data.\n\t\tbuffBotId: 'Resto Shaman',\n\t\tspec: Spec.SpecElementalShaman,\n\t\tname: 'Resto Shaman',\n\t\ttooltip: 'Resto Shaman: Adds Bloodlust, Mana Spring Totem, Mana Tide Totem, Strength of Earth Totem. Chooses air totem based on party composition.',\n\t\ticonUrl: talentTreeIcons[Class.ClassShaman][2],\n\t\tmodifyRaidProto: (buffBot: BuffBot, raidProto: RaidProto, partyProto: PartyProto) => {\n\t\t\traidProto.buffs!.bloodlust = true;\n\t\t\traidProto.buffs!.manaSpringTotem = TristateEffect.TristateEffectImproved;\n\t\t\tpartyProto.buffs!.manaTideTotems++;\n\n\t\t\t// Choose which air totem to drop based on party composition.\n\t\t\tconst woaSpecs = [\n\t\t\t\tSpec.SpecBalanceDruid,\n\t\t\t\tSpec.SpecMage,\n\t\t\t\tSpec.SpecShadowPriest,\n\t\t\t\tSpec.SpecSmitePriest,\n\t\t\t\tSpec.SpecEnhancementShaman,\n\t\t\t\tSpec.SpecElementalShaman,\n\t\t\t\tSpec.SpecWarlock,\n\t\t\t];\n\t\t\tconst wfSpecs = [\n\t\t\t\tSpec.SpecRetributionPaladin,\n\t\t\t\tSpec.SpecRogue,\n\t\t\t\tSpec.SpecWarrior,\n\t\t\t\tSpec.SpecProtectionWarrior,\n\t\t\t\tSpec.SpecFeralDruid,\n\t\t\t\tSpec.SpecFeralTankDruid,\n\t\t\t];\n\t\t\tconst [woaVotes, wfVotes] = [woaSpecs, wfSpecs]\n\t\t\t\t.map(specs => partyProto.players\n\t\t\t\t\t.filter(player => player.class != Class.ClassUnknown)\n\t\t\t\t\t.map(player => playerToSpec(player))\n\t\t\t\t\t.filter(playerSpec => specs.includes(playerSpec))\n\t\t\t\t\t.length);\n\n\t\t\tif (woaVotes >= wfVotes) {\n\t\t\t\traidProto.buffs!.wrathOfAirTotem = true;\n\t\t\t} else {\n\t\t\t\traidProto.buffs!.windfuryTotem = TristateEffect.TristateEffectRegular;\n\t\t\t}\n\t\t},\n\t},\n\t{\n\t\t// The value of this field must never change, to preserve local storage data.\n\t\tbuffBotId: 'Arms Warrior',\n\t\tdeprecated: true,\n\t\tspec: Spec.SpecWarrior,\n\t\tname: 'Arms Warrior',\n\t\ttooltip: 'Arms Warrior: Adds Sunder Armor, Blood Frenzy, and Improved Battle Shout.',\n\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/medium/ability_warrior_savageblow.jpg',\n\t\tmodifyRaidProto: (buffBot: BuffBot, raidProto: RaidProto, partyProto: PartyProto) => {\n\t\t\traidProto.buffs!.battleShout = TristateEffect.TristateEffectImproved;\n\t\t\tconst debuffs = raidProto.debuffs!;\n\t\t\tdebuffs.sunderArmor = true;\n\t\t\tdebuffs.bloodFrenzy = true;\n\t\t},\n\t},\n\t{\n\t\t// The value of this field must never change, to preserve local storage data.\n\t\tbuffBotId: 'Fury Warrior',\n\t\tdeprecated: true,\n\t\tspec: Spec.SpecWarrior,\n\t\tname: 'Fury Warrior',\n\t\ttooltip: 'Fury Warrior: Adds Sunder Armor and Improved Battle Shout.',\n\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/medium/ability_warrior_innerrage.jpg',\n\t\tmodifyRaidProto: (buffBot: BuffBot, raidProto: RaidProto, partyProto: PartyProto) => {\n\t\t\traidProto.buffs!.battleShout = TristateEffect.TristateEffectImproved;\n\t\t\tconst debuffs = raidProto.debuffs!;\n\t\t\tdebuffs.sunderArmor = true;\n\t\t},\n\t},\n\t{\n\t\t// The value of this field must never change, to preserve local storage data.\n\t\tbuffBotId: 'Prot Warrior',\n\t\tdeprecated: true,\n\t\tspec: Spec.SpecWarrior,\n\t\tname: 'Prot Warrior',\n\t\ttooltip: 'Prot Warrior: Adds Sunder Armor.',\n\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/medium/inv_shield_06.jpg',\n\t\tmodifyRaidProto: (buffBot: BuffBot, raidProto: RaidProto, partyProto: PartyProto) => {\n\t\t\tconst debuffs = raidProto.debuffs!;\n\t\t\tdebuffs.sunderArmor = true;\n\t\t},\n\t},\n\t{\n\t\t// The value of this field must never change, to preserve local storage data.\n\t\tbuffBotId: 'Unholy Frenzy Dk',\n\t\tspec: Spec.SpecDeathknight,\n\t\tname: 'Blood DK',\n\t\ttooltip: 'Deathknight: Adds Unholy Frenzy.',\n\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_bladedarmor.jpg',\n\t\tmodifyRaidProto: (buffBot: BuffBot, raidProto: RaidProto, partyProto: PartyProto) => {\n\t\t\tconst unholyFrenzyIndex = buffBot.getUnholyFrenzyAssignment().targetIndex;\n\t\t\tif (unholyFrenzyIndex != NO_TARGET) {\n\t\t\t\tconst partyIndex = Math.floor(unholyFrenzyIndex / 5);\n\t\t\t\tconst playerIndex = unholyFrenzyIndex % 5;\n\t\t\t\tconst playerProto = raidProto.parties[partyIndex].players[playerIndex];\n\t\t\t\tif (playerProto.buffs) {\n\t\t\t\t\tplayerProto.buffs.unholyFrenzy++;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t},\n];\n","import { Class } from '../core/proto/common.js';\nimport { RaidTarget } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { BuffBot as BuffBotProto } from '../core/proto/ui.js';\nimport { classColors } from '../core/proto_utils/utils.js';\nimport { emptyRaidTarget } from '../core/proto_utils/utils.js';\nimport { specToClass } from '../core/proto_utils/utils.js';\nimport { Sim } from '../core/sim.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { BuffBotSettings, buffBotPresets } from './presets.js';\n\nexport const NO_ASSIGNMENT = -1;\n\n// Represents a buff bot in a raid.\nexport class BuffBot {\n\tsettings: BuffBotSettings;\n\tspec: Spec = 0;\n\tname: string = '';\n\n\tprivate raidIndex: number = NO_ASSIGNMENT;\n\tprivate innervateAssignment: RaidTarget = emptyRaidTarget();\n\tprivate powerInfusionAssignment: RaidTarget = emptyRaidTarget();\n\tprivate tricksOfTheTradeAssignment: RaidTarget = emptyRaidTarget();\n\tprivate unholyFrenzyAssignment: RaidTarget = emptyRaidTarget();\n\n\treadonly raidIndexChangeEmitter = new TypedEvent<void>();\n\treadonly innervateAssignmentChangeEmitter = new TypedEvent<void>();\n\treadonly powerInfusionAssignmentChangeEmitter = new TypedEvent<void>();\n\treadonly tricksOfTheTradeAssignmentChangeEmitter = new TypedEvent<void>();\n\treadonly unholyFrenzyAssignmentChangeEmitter = new TypedEvent<void>();\n\treadonly changeEmitter = new TypedEvent<void>();\n\n\tprivate readonly sim: Sim;\n\n\tconstructor(id: string, sim: Sim) {\n\t\tconst settings = buffBotPresets.find(preset => preset.buffBotId == id);\n\t\tif (!settings) {\n\t\t\tthrow new Error('No buff bot config with id \\'' + id + '\\'!');\n\t\t}\n\n\t\tthis.sim = sim;\n\t\tthis.settings = settings;\n\t\tthis.updateSettings();\n\n\t\t[\n\t\t\tthis.raidIndexChangeEmitter,\n\t\t\tthis.innervateAssignmentChangeEmitter,\n\t\t\tthis.powerInfusionAssignmentChangeEmitter,\n\t\t\tthis.tricksOfTheTradeAssignmentChangeEmitter,\n\t\t\tthis.unholyFrenzyAssignmentChangeEmitter,\n\t\t].forEach(emitter => emitter.on(eventID => this.changeEmitter.emit(eventID)));\n\n\t\tthis.changeEmitter.on(eventID => sim.raid.getParty(this.getPartyIndex()).changeEmitter.emit(eventID));\n\t}\n\n\tprivate updateSettings() {\n\t\tthis.spec = this.settings.spec;\n\t\tthis.name = this.settings.name;\n\t}\n\n\tgetLabel(): string {\n\t\treturn `${this.name} (#${this.getRaidIndex() + 1})`;\n\t}\n\n\tgetClass(): Class {\n\t\treturn specToClass[this.settings.spec];\n\t}\n\n\tgetClassColor(): string {\n\t\treturn classColors[this.getClass()];\n\t}\n\n\tgetRaidIndex(): number {\n\t\treturn this.raidIndex;\n\t}\n\tsetRaidIndex(eventID: EventID, newRaidIndex: number) {\n\t\tif (newRaidIndex != this.raidIndex) {\n\t\t\tthis.raidIndex = newRaidIndex;\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tthis.raidIndexChangeEmitter.emit(eventID);\n\t\t\t\tthis.sim.raid.compChangeEmitter.emit(eventID);\n\t\t\t});\n\t\t}\n\t}\n\n\tgetPartyIndex(): number {\n\t\treturn Math.floor(this.getRaidIndex() / 5);\n\t}\n\n\tgetInnervateAssignment(): RaidTarget {\n\t\t// Defensive copy.\n\t\treturn RaidTarget.clone(this.innervateAssignment);\n\t}\n\tsetInnervateAssignment(eventID: EventID, newInnervateAssignment: RaidTarget) {\n\t\tif (RaidTarget.equals(newInnervateAssignment, this.innervateAssignment))\n\t\t\treturn;\n\n\t\t// Defensive copy.\n\t\tthis.innervateAssignment = RaidTarget.clone(newInnervateAssignment);\n\t\tthis.innervateAssignmentChangeEmitter.emit(eventID);\n\t}\n\n\tgetPowerInfusionAssignment(): RaidTarget {\n\t\t// Defensive copy.\n\t\treturn RaidTarget.clone(this.powerInfusionAssignment);\n\t}\n\tsetPowerInfusionAssignment(eventID: EventID, newPowerInfusionAssignment: RaidTarget) {\n\t\tif (RaidTarget.equals(newPowerInfusionAssignment, this.powerInfusionAssignment))\n\t\t\treturn;\n\n\t\t// Defensive copy.\n\t\tthis.powerInfusionAssignment = RaidTarget.clone(newPowerInfusionAssignment);\n\t\tthis.powerInfusionAssignmentChangeEmitter.emit(eventID);\n\t}\n\n\tgetTricksOfTheTradeAssignment(): RaidTarget {\n\t\t// Defensive copy.\n\t\treturn RaidTarget.clone(this.tricksOfTheTradeAssignment);\n\t}\n\tsetTricksOfTheTradeAssignment(eventID: EventID, newTricksOfTheTradeAssignment: RaidTarget) {\n\t\tif (RaidTarget.equals(newTricksOfTheTradeAssignment, this.tricksOfTheTradeAssignment))\n\t\t\treturn;\n\n\t\t// Defensive copy.\n\t\tthis.tricksOfTheTradeAssignment = RaidTarget.clone(newTricksOfTheTradeAssignment);\n\t\tthis.tricksOfTheTradeAssignmentChangeEmitter.emit(eventID);\n\t}\n\n\tgetUnholyFrenzyAssignment(): RaidTarget {\n\t\t// Defensive copy.\n\t\treturn RaidTarget.clone(this.unholyFrenzyAssignment);\n\t}\n\tsetUnholyFrenzyAssignment(eventID: EventID, newUnholyFrenzyAssignment: RaidTarget) {\n\t\tif (RaidTarget.equals(newUnholyFrenzyAssignment, this.unholyFrenzyAssignment))\n\t\t\treturn;\n\n\t\t// Defensive copy.\n\t\tthis.unholyFrenzyAssignment = RaidTarget.clone(newUnholyFrenzyAssignment);\n\t\tthis.unholyFrenzyAssignmentChangeEmitter.emit(eventID);\n\t}\n\n\ttoProto(): BuffBotProto {\n\t\treturn BuffBotProto.create({\n\t\t\tid: this.settings.buffBotId,\n\t\t\traidIndex: this.getRaidIndex(),\n\t\t\tinnervateAssignment: this.getInnervateAssignment(),\n\t\t\tpowerInfusionAssignment: this.getPowerInfusionAssignment(),\n\t\t\ttricksOfTheTradeAssignment: this.getTricksOfTheTradeAssignment(),\n\t\t\tunholyFrenzyAssignment: this.getUnholyFrenzyAssignment(),\n\t\t});\n\t}\n\n\tfromProto(eventID: EventID, proto: BuffBotProto) {\n\t\tconst settings = buffBotPresets.find(preset => preset.buffBotId == proto.id);\n\t\tif (!settings) {\n\t\t\tthrow new Error('No buff bot config with id \\'' + proto.id + '\\'!');\n\t\t}\n\t\tthis.settings = settings;\n\t\tthis.updateSettings();\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.setRaidIndex(eventID, proto.raidIndex);\n\t\t\tthis.setInnervateAssignment(eventID, proto.innervateAssignment || emptyRaidTarget());\n\t\t\tthis.setPowerInfusionAssignment(eventID, proto.powerInfusionAssignment || emptyRaidTarget());\n\t\t\tthis.setTricksOfTheTradeAssignment(eventID, proto.tricksOfTheTradeAssignment || emptyRaidTarget());\n\t\t\tthis.setUnholyFrenzyAssignment(eventID, proto.unholyFrenzyAssignment || emptyRaidTarget());\n\t\t});\n\t}\n\n\tclone(eventID: EventID): BuffBot {\n\t\tconst newBuffBot = new BuffBot(this.settings.buffBotId, this.sim);\n\t\tnewBuffBot.fromProto(eventID, this.toProto());\n\t\treturn newBuffBot;\n\t}\n}\n","import { Component } from '../core/components/component.js';\nimport { Input, InputConfig } from '../core/components/input.js';\nimport { RaidTargetPicker } from '../core/components/raid_target_picker.js';\nimport { Player } from '../core/player.js';\nimport { Raid } from '../core/raid.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { Class } from '../core/proto/common.js';\nimport { RaidTarget } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { getEnumValues } from '../core/utils.js';\nimport { wait } from '../core/utils.js';\nimport { emptyRaidTarget } from '../core/proto_utils/utils.js';\n\nimport { BuffBot } from './buff_bot.js';\nimport { RaidSimUI } from './raid_sim_ui.js';\n\ndeclare var tippy: any;\n\nexport class AssignmentsPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly innervatesPicker: InnervatesPicker;\n\tprivate readonly powerInfusionsPicker: PowerInfusionsPicker;\n\tprivate readonly tricksOfTheTradesPicker: TricksOfTheTradesPicker;\n\tprivate readonly unholyFrenzyPicker: UnholyFrenzyPicker;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'assignments-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.innervatesPicker = new InnervatesPicker(this.rootElem, raidSimUI);\n\t\tthis.powerInfusionsPicker = new PowerInfusionsPicker(this.rootElem, raidSimUI);\n\t\tthis.tricksOfTheTradesPicker = new TricksOfTheTradesPicker(this.rootElem, raidSimUI);\n\t\tthis.unholyFrenzyPicker = new UnholyFrenzyPicker(this.rootElem, raidSimUI);\n\t}\n}\n\ninterface AssignmentTargetPicker {\n\tplayerOrBot: Player<any> | BuffBot,\n\ttargetPicker: RaidTargetPicker<Player<any>> | RaidTargetPicker<BuffBot>,\n\ttargetPlayer: Player<any> | null;\n};\n\nabstract class AssignedBuffPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly playersContainer: HTMLElement;\n\n\tprivate targetPickers: Array<AssignmentTargetPicker>;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'assigned-buff-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.targetPickers = [];\n\n\t\tthis.playersContainer = document.createElement('fieldset');\n\t\tthis.playersContainer.classList.add('assigned-buff-players-container', 'settings-section');\n\t\tthis.rootElem.appendChild(this.playersContainer);\n\n\t\tthis.update();\n\t\tthis.raidSimUI.changeEmitter.on(eventID => {\n\t\t\tthis.update();\n\t\t});\n\t}\n\n\tprivate update() {\n\t\tthis.playersContainer.innerHTML = `\n\t\t\t<legend>${this.getTitle().toUpperCase()}</legend>\n\t\t`;\n\n\t\tconst sourcePlayers = this.getSourcePlayers();\n\t\tif (sourcePlayers.length == 0) {\n\t\t\tthis.rootElem.style.display = 'none';\n\t\t} else {\n\t\t\tthis.rootElem.style.display = 'initial';\n\t\t}\n\n\t\tthis.targetPickers = sourcePlayers.map((sourcePlayer, sourcePlayerIndex) => {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('assigned-buff-player');\n\t\t\tthis.playersContainer.appendChild(row);\n\n\t\t\tconst sourceElem = RaidTargetPicker.makeOptionElem({\n\t\t\t\ticonUrl: sourcePlayer instanceof Player ? sourcePlayer.getTalentTreeIcon() : sourcePlayer.settings.iconUrl,\n\t\t\t\ttext: sourcePlayer.getLabel(),\n\t\t\t\tcolor: sourcePlayer.getClassColor(),\n\t\t\t\tisDropdown: false,\n\t\t\t});\n\t\t\tsourceElem.classList.add('raid-target-picker-root');\n\t\t\trow.appendChild(sourceElem);\n\n\t\t\tconst arrow = document.createElement('span');\n\t\t\tarrow.classList.add('assigned-buff-arrow', 'fa', 'fa-arrow-right');\n\t\t\trow.appendChild(arrow);\n\n\t\t\tlet raidTargetPicker: RaidTargetPicker<Player<any>> | RaidTargetPicker<BuffBot> | null = null;\n\t\t\tif (sourcePlayer instanceof Player) {\n\t\t\t\traidTargetPicker = new RaidTargetPicker<Player<any>>(row, this.raidSimUI.sim.raid, sourcePlayer, {\n\t\t\t\t\textraCssClasses: [\n\t\t\t\t\t\t'assigned-buff-target-picker',\n\t\t\t\t\t],\n\t\t\t\t\tnoTargetLabel: 'Unassigned',\n\t\t\t\t\tcompChangeEmitter: this.raidSimUI.sim.raid.compChangeEmitter,\n\n\t\t\t\t\tchangedEvent: (player: Player<any>) => player.specOptionsChangeEmitter,\n\t\t\t\t\tgetValue: (player: Player<any>) => this.getPlayerValue(player),\n\t\t\t\t\tsetValue: (eventID: EventID, player: Player<any>, newValue: RaidTarget) => this.setPlayerValue(eventID, player, newValue),\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\traidTargetPicker = new RaidTargetPicker<BuffBot>(row, this.raidSimUI.sim.raid, sourcePlayer, {\n\t\t\t\t\textraCssClasses: [\n\t\t\t\t\t\t'assigned-buff-target-picker',\n\t\t\t\t\t],\n\t\t\t\t\tnoTargetLabel: 'Unassigned',\n\t\t\t\t\tcompChangeEmitter: this.raidSimUI.sim.raid.compChangeEmitter,\n\n\t\t\t\t\tchangedEvent: (buffBot: BuffBot) => buffBot.changeEmitter,\n\t\t\t\t\tgetValue: (buffBot: BuffBot) => this.getBuffBotValue(buffBot),\n\t\t\t\t\tsetValue: (eventID: EventID, buffBot: BuffBot, newValue: RaidTarget) => this.setBuffBotValue(eventID, buffBot, newValue),\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst targetPickerData = {\n\t\t\t\tplayerOrBot: sourcePlayer,\n\t\t\t\ttargetPicker: raidTargetPicker!,\n\t\t\t\ttargetPlayer: this.raidSimUI.sim.raid.getPlayerFromRaidTarget(raidTargetPicker!.getInputValue()),\n\t\t\t};\n\n\t\t\traidTargetPicker!.changeEmitter.on(eventID => {\n\t\t\t\ttargetPickerData.targetPlayer = this.raidSimUI.sim.raid.getPlayerFromRaidTarget(raidTargetPicker!.getInputValue());\n\t\t\t});\n\n\t\t\treturn targetPickerData;\n\t\t});\n\t}\n\n\tabstract getTitle(): string;\n\tabstract getSourcePlayers(): Array<Player<any> | BuffBot>;\n\n\tabstract getPlayerValue(player: Player<any>): RaidTarget;\n\tabstract setPlayerValue(eventID: EventID, player: Player<any>, newValue: RaidTarget): void;\n\n\tabstract getBuffBotValue(buffBot: BuffBot): RaidTarget;\n\tabstract setBuffBotValue(eventID: EventID, buffBot: BuffBot, newValue: RaidTarget): void;\n}\n\nclass InnervatesPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Innervates';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any> | BuffBot> {\n\t\treturn this.raidSimUI.getPlayersAndBuffBots().filter(playerOrBot => playerOrBot?.getClass() == Class.ClassDruid) as Array<Player<any> | BuffBot>;\n\t}\n\n\tgetPlayerValue(player: Player<any>): RaidTarget {\n\t\treturn (player as Player<Spec.SpecBalanceDruid>).getSpecOptions().innervateTarget || emptyRaidTarget();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: RaidTarget) {\n\t\tconst newOptions = (player as Player<Spec.SpecBalanceDruid>).getSpecOptions();\n\t\tnewOptions.innervateTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n\n\tgetBuffBotValue(buffBot: BuffBot): RaidTarget {\n\t\treturn buffBot.getInnervateAssignment();\n\t}\n\n\tsetBuffBotValue(eventID: EventID, buffBot: BuffBot, newValue: RaidTarget) {\n\t\tbuffBot.setInnervateAssignment(eventID, newValue);\n\t}\n}\n\nclass PowerInfusionsPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Power Infusions';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any> | BuffBot> {\n\t\treturn this.raidSimUI.getPlayersAndBuffBots()\n\t\t\t.filter(playerOrBot => playerOrBot?.getClass() == Class.ClassPriest)\n\t\t\t.filter(playerOrBot => {\n\t\t\t\tif (playerOrBot instanceof BuffBot) {\n\t\t\t\t\treturn playerOrBot.settings.buffBotId == 'Divine Spirit Priest';\n\t\t\t\t} else {\n\t\t\t\t\tconst player = playerOrBot as Player<any>;\n\t\t\t\t\tif (!(player as Player<Spec.SpecSmitePriest>).getTalents().powerInfusion) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t// Don't include shadow priests even if they have the talent, because they\n\t\t\t\t\t// don't have a raid target option for this.\n\t\t\t\t\treturn player.spec == Spec.SpecSmitePriest;\n\t\t\t\t}\n\t\t\t}) as Array<Player<any> | BuffBot>;\n\t}\n\n\tgetPlayerValue(player: Player<any>): RaidTarget {\n\t\treturn (player as Player<Spec.SpecSmitePriest>).getSpecOptions().powerInfusionTarget || emptyRaidTarget();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: RaidTarget) {\n\t\tconst newOptions = (player as Player<Spec.SpecSmitePriest>).getSpecOptions();\n\t\tnewOptions.powerInfusionTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n\n\tgetBuffBotValue(buffBot: BuffBot): RaidTarget {\n\t\treturn buffBot.getPowerInfusionAssignment();\n\t}\n\n\tsetBuffBotValue(eventID: EventID, buffBot: BuffBot, newValue: RaidTarget) {\n\t\tbuffBot.setPowerInfusionAssignment(eventID, newValue);\n\t}\n}\n\nclass TricksOfTheTradesPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Tricks of the Trades';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any> | BuffBot> {\n\t\treturn this.raidSimUI.getPlayersAndBuffBots().filter(playerOrBot => playerOrBot?.getClass() == Class.ClassRogue) as Array<Player<any> | BuffBot>;\n\t}\n\n\tgetPlayerValue(player: Player<any>): RaidTarget {\n\t\treturn (player as Player<Spec.SpecRogue>).getSpecOptions().tricksOfTheTradeTarget || emptyRaidTarget();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: RaidTarget) {\n\t\tconst newOptions = (player as Player<Spec.SpecRogue>).getSpecOptions();\n\t\tnewOptions.tricksOfTheTradeTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n\n\tgetBuffBotValue(buffBot: BuffBot): RaidTarget {\n\t\treturn buffBot.getTricksOfTheTradeAssignment();\n\t}\n\n\tsetBuffBotValue(eventID: EventID, buffBot: BuffBot, newValue: RaidTarget) {\n\t\tbuffBot.setTricksOfTheTradeAssignment(eventID, newValue);\n\t}\n}\n\nclass UnholyFrenzyPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Unholy Frenzy';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any> | BuffBot> {\n\t\treturn this.raidSimUI.getPlayersAndBuffBots()\n\t\t\t.filter(playerOrBot => playerOrBot?.getClass() == Class.ClassDeathknight)\n\t\t\t.filter(playerOrBot => {\n\t\t\t\tif (playerOrBot instanceof BuffBot) {\n\t\t\t\t\treturn playerOrBot.settings.buffBotId == 'Unholy Frenzy Dk';\n\t\t\t\t} else {\n\t\t\t\t\tconst player = playerOrBot as Player<Spec.SpecDeathknight>;\n\t\t\t\t\treturn player.getTalents().hysteria;\n\t\t\t\t}\n\t\t\t}) as Array<Player<any> | BuffBot>;\n\t}\n\n\tgetPlayerValue(player: Player<any>): RaidTarget {\n\t\treturn (player as Player<Spec.SpecDeathknight>).getSpecOptions().unholyFrenzyTarget || emptyRaidTarget();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: RaidTarget) {\n\t\tconst newOptions = (player as Player<Spec.SpecDeathknight>).getSpecOptions();\n\t\tnewOptions.unholyFrenzyTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n\n\tgetBuffBotValue(buffBot: BuffBot): RaidTarget {\n\t\treturn buffBot.getUnholyFrenzyAssignment();\n\t}\n\n\tsetBuffBotValue(eventID: EventID, buffBot: BuffBot, newValue: RaidTarget) {\n\t\tbuffBot.setUnholyFrenzyAssignment(eventID, newValue);\n\t}\n}\n","import { Component } from '../core/components/component.js';\nimport { IconEnumPicker } from '../core/components/icon_enum_picker.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { Class } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Blessings } from '../core/proto/paladin.js';\nimport { BlessingsAssignment } from '../core/proto/ui.js';\nimport { BlessingsAssignments } from '../core/proto/ui.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { memeSpecs } from '../core/launched_sims.js';\nimport {\n\tmakeDefaultBlessings,\n\tclassColors,\n\tnaturalSpecOrder,\n\tspecNames,\n\ttitleIcons,\n} from '../core/proto_utils/utils.js';\nimport { getEnumValues } from '../core/utils.js';\n\nimport { RaidSimUI } from './raid_sim_ui.js';\nimport { implementedSpecs } from './presets.js';\n\ndeclare var tippy: any;\n\nconst MAX_PALADINS = 4;\n\nexport class BlessingsPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly rows: Array<HTMLTableRowElement>;\n\tprivate readonly cols: Array<Array<HTMLElement>>;\n\n\tprivate assignments: BlessingsAssignments;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'blessings-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.assignments = BlessingsAssignments.clone(makeDefaultBlessings(4));\n\n\t\tthis.rootElem.innerHTML = `\n\t\t<table class=\"blessings-table\">\n\t\t\t<tbody class=\"blessings-table-body\">\n\t\t\t</tbody>\n\t\t</table>\n\t\t`;\n\n\t\tconst headerRow = this.rootElem.getElementsByClassName('blessings-table-header-row')[0] as HTMLTableRowElement;\n\t\tconst bodyElem = this.rootElem.getElementsByClassName('blessings-table-body')[0] as HTMLTableSectionElement;\n\n\t\tconst specs = naturalSpecOrder\n\t\t\t.filter(spec => implementedSpecs.includes(spec))\n\t\t\t.filter(spec => !memeSpecs.includes(spec));\n\t\tconst paladinIndexes = [...Array(MAX_PALADINS).keys()];\n\n\t\tthis.cols = [];\n\t\tthis.rows = specs.map(spec => {\n\t\t\tconst row = document.createElement('tr');\n\t\t\trow.classList.add('blessings-table-row');\n\t\t\tbodyElem.appendChild(row);\n\n\t\t\tconst headerCell = document.createElement('th');\n\t\t\theaderCell.classList.add('blessings-table-header-cell');\n\t\t\trow.appendChild(headerCell);\n\n\t\t\tconst icon = document.createElement('img');\n\t\t\ticon.src = titleIcons[spec];\n\t\t\theaderCell.appendChild(icon);\n\n\t\t\ttippy(icon, {\n\t\t\t\t'content': specNames[spec],\n\t\t\t\t'allowHTML': true,\n\t\t\t});\n\n\t\t\tpaladinIndexes.forEach(paladinIdx => {\n\t\t\t\tconst cell = document.createElement('td');\n\t\t\t\tcell.classList.add('blessings-table-cell');\n\t\t\t\trow.appendChild(cell);\n\n\t\t\t\tif (!this.cols[paladinIdx]) {\n\t\t\t\t\tthis.cols.push([]);\n\t\t\t\t}\n\t\t\t\tthis.cols[paladinIdx].push(cell);\n\n\t\t\t\tconst blessingPicker = new IconEnumPicker(cell, this, {\n\t\t\t\t\textraCssClasses: [\n\t\t\t\t\t\t'blessing-picker',\n\t\t\t\t\t],\n\t\t\t\t\tnumColumns: 1,\n\t\t\t\t\tvalues: [\n\t\t\t\t\t\t{ color: classColors[Class.ClassPaladin], value: Blessings.BlessingUnknown },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(25898), value: Blessings.BlessingOfKings },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(48934), value: Blessings.BlessingOfMight },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(48938), value: Blessings.BlessingOfWisdom },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(25899), value: Blessings.BlessingOfSanctuary },\n\t\t\t\t\t],\n\t\t\t\t\tequals: (a: Blessings, b: Blessings) => a == b,\n\t\t\t\t\tzeroValue: Blessings.BlessingUnknown,\n\t\t\t\t\tchangedEvent: (picker: BlessingsPicker) => picker.changeEmitter,\n\t\t\t\t\tgetValue: (picker: BlessingsPicker) => picker.assignments.paladins[paladinIdx]?.blessings[spec] || Blessings.BlessingUnknown,\n\t\t\t\t\tsetValue: (eventID: EventID, picker: BlessingsPicker, newValue: number) => {\n\t\t\t\t\t\tconst currentValue = picker.assignments.paladins[paladinIdx].blessings[spec];\n\t\t\t\t\t\tif (currentValue != newValue) {\n\t\t\t\t\t\t\tpicker.assignments.paladins[paladinIdx].blessings[spec] = newValue;\n\t\t\t\t\t\t\tthis.changeEmitter.emit(eventID);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\n\t\t\treturn row;\n\t\t});\n\n\t\tthis.setNumPaladins(raidSimUI.getClassCount(Class.ClassPaladin));\n\t\traidSimUI.compChangeEmitter.on(eventID => {\n\t\t\tthis.setNumPaladins(raidSimUI.getClassCount(Class.ClassPaladin));\n\t\t});\n\t}\n\n\tprivate setNumPaladins(numPaladins: number) {\n\t\tnumPaladins = Math.min(numPaladins, MAX_PALADINS);\n\n\t\tfor (let i = 0; i < numPaladins; i++) {\n\t\t\tthis.cols[i].forEach(elem => elem.classList.add('paladin-active'));\n\t\t}\n\t\tfor (let i = numPaladins; i < MAX_PALADINS; i++) {\n\t\t\tthis.cols[i].forEach(elem => elem.classList.remove('paladin-active'));\n\t\t}\n\t}\n\n\tgetAssignments(): BlessingsAssignments {\n\t\t// Defensive copy.\n\t\treturn BlessingsAssignments.clone(this.assignments);\n\t}\n\n\tsetAssignments(eventID: EventID, newAssignments: BlessingsAssignments) {\n\t\tthis.assignments = BlessingsAssignments.clone(newAssignments);\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n}\n","import { Exporter } from '../core/components/exporters.js';\nimport { Importer } from '../core/components/importers.js';\nimport { MAX_PARTY_SIZE } from '../core/party.js';\nimport { BuffBot, RaidSimSettings } from '../core/proto/ui.js';\nimport { TypedEvent } from '../core/typed_event.js';\nimport { Party as PartyProto, Player as PlayerProto, Raid as RaidProto } from '../core/proto/api.js';\nimport { Encounter as EncounterProto, EquipmentSpec, ItemSpec, MobType, Spec, Target as TargetProto, RaidTarget, Faction } from '../core/proto/common.js';\nimport { nameToClass } from '../core/proto_utils/names.js';\nimport { makeDefaultBlessings, specTypeFunctions, withSpecProto, isTankSpec, playerToSpec } from '../core/proto_utils/utils.js';\nimport { MAX_NUM_PARTIES } from '../core/raid.js';\nimport { Player } from '../core/player.js';\nimport { Target } from '../core/target.js';\n\nimport { playerPresets, PresetSpecSettings } from './presets.js';\nimport { RaidSimUI } from './raid_sim_ui.js';\n\ndeclare var $: any;\ndeclare var tippy: any;\n\nexport function newRaidImporters(simUI: RaidSimUI): HTMLElement {\n\tconst importSettings = document.createElement('div');\n\timportSettings.classList.add('import-settings', 'sim-dropdown-menu');\n\timportSettings.innerHTML = `\n\t\t<span id='importMenuLink' class='dropdown-toggle fas fa-file-import' role='button' data-toggle='dropdown' aria-haspopup='true' arai-expanded='false'></span>\n\t\t<div class='dropdown-menu dropdown-menu-right' aria-labelledby='importMenuLink'>\n\t\t</div>\n\t`;\n\tconst linkElem = importSettings.getElementsByClassName('dropdown-toggle')[0] as HTMLElement;\n\ttippy(linkElem, {\n\t\t'content': 'Import',\n\t\t'allowHTML': true,\n\t});\n\n\tconst menuElem = importSettings.getElementsByClassName('dropdown-menu')[0] as HTMLElement;\n\tconst addMenuItem = (label: string, experimental: boolean, onClick: () => void) => {\n\t\tconst itemElem = document.createElement('span');\n\t\titemElem.classList.add('dropdown-item');\n\t\titemElem.textContent = label;\n\t\titemElem.addEventListener('click', onClick);\n\t\tmenuElem.appendChild(itemElem);\n\t};\n\n\taddMenuItem('Json', false, () => new RaidJsonImporter(menuElem, simUI));\n\taddMenuItem('WCL', true, () => new RaidWCLImporter(menuElem, simUI));\n\n\treturn importSettings;\n}\n\nexport function newRaidExporters(simUI: RaidSimUI): HTMLElement {\n\tconst exportSettings = document.createElement('div');\n\texportSettings.classList.add('export-settings', 'sim-dropdown-menu');\n\texportSettings.innerHTML = `\n\t\t<span id='exportMenuLink' class='dropdown-toggle fas fa-file-export' role='button' data-toggle='dropdown' aria-haspopup='true' arai-expanded='false'></span>\n\t\t<div class='dropdown-menu dropdown-menu-right' aria-labelledby='exportMenuLink'>\n\t\t</div>\n\t`;\n\tconst linkElem = exportSettings.getElementsByClassName('dropdown-toggle')[0] as HTMLElement;\n\ttippy(linkElem, {\n\t\t'content': 'Export',\n\t\t'allowHTML': true,\n\t});\n\n\tconst menuElem = exportSettings.getElementsByClassName('dropdown-menu')[0] as HTMLElement;\n\tconst addMenuItem = (label: string, onClick: () => void) => {\n\t\tconst itemElem = document.createElement('span');\n\t\titemElem.classList.add('dropdown-item');\n\t\titemElem.textContent = label;\n\t\titemElem.addEventListener('click', onClick);\n\t\tmenuElem.appendChild(itemElem);\n\t};\n\n\taddMenuItem('Json', () => new RaidJsonExporter(menuElem, simUI));\n\n\treturn exportSettings;\n}\n\nclass RaidJsonImporter extends Importer {\n\tprivate readonly simUI: RaidSimUI;\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, 'JSON Import', true);\n\t\tthis.simUI = simUI;\n\n\t\tthis.descriptionElem.innerHTML = `\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t`;\n\t}\n\n\tonImport(data: string) {\n\t\tconst settings = RaidSimSettings.fromJsonString(data);\n\t\tthis.simUI.fromProto(TypedEvent.nextEventID(), settings);\n\t\tthis.close();\n\t}\n}\n\nclass RaidJsonExporter extends Exporter {\n\tprivate readonly simUI: RaidSimUI;\n\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, 'JSON Export', true);\n\t\tthis.simUI = simUI;\n\t\tthis.init();\n\t}\n\n\tgetData(): string {\n\t\treturn JSON.stringify(RaidSimSettings.toJson(this.simUI.toProto()), null, 2);\n\t}\n}\n\nclass RaidWCLImporter extends Importer {\n\n\tprivate queryCounter: number = 0;\n\n\tprivate readonly simUI: RaidSimUI;\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, 'WCL Import', false);\n\t\tthis.simUI = simUI;\n\t\tthis.descriptionElem.innerHTML = `\n\t\t\t<p>\n\t\t\t\tImport entire raid from a WCL report.<br>\n\t\t\t\tParties are a best guess based on buffs.<br>\n\t\t\t\tDouble check innervate/PI and paladin buffs in the settings after import.<br>\n\t\t\t\tDoes not support fight=last currently (will default any non-numeric fight ID to be 0)<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else first found fight will be used.<br>\n\t\t\t</p>\n\t\t`;\n\t}\n\n\tprivate getWCLBearerToken(): Promise<string> {\n\n\t\treturn fetch('https://classic.warcraftlogs.com/oauth/token', {\n\t\t\t'method': 'POST',\n\t\t\t'headers': {\n\t\t\t\t'Authorization': 'Basic ' + btoa('963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3'),\n\t\t\t},\n\t\t\tbody: new URLSearchParams({\n\t\t\t\t'grant_type': 'client_credentials',\n\t\t\t}),\n\t\t}).then(response => response.json())\n\t\t\t.then(res => res.access_token)\n\t\t\t.catch(err => { // TODO: handle error\n\t\t\t\tconsole.error(err);\n\t\t\t});\n\t}\n\n\tprivate queryWCL(query: string, token: string): Promise<any> {\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/json',\n\t\t\t'Authorization': `Bearer ${token}`,\n\t\t\t'Accept': 'application/json',\n\t\t};\n\n\t\tconst queryURL = `https://classic.warcraftlogs.com/api/v2/client?query=${query}`;\n\n\t\tthis.queryCounter++;\n\n\t\t// Query WCL\n\t\treturn fetch(encodeURI(queryURL), {\n\t\t\t'method': 'GET',\n\t\t\t'headers': headers,\n\t\t}).then(res => res.json());\n\t}\n\n\tprivate getURLInfo(url: string): { reportID: string; fightID: string } {\n\n\t\tlet urlInfo = { reportID: '', fightID: '0' };\n\n\t\tif (!url.includes('warcraftlogs.com')) {\n\t\t\tconsole.error('Invalid WCL URL', url, 'must be from warcraftlogs.com');\n\t\t\treturn urlInfo;\n\t\t}\n\n\t\tlet fightIDIndex = url.indexOf('fight=');\n\t\tlet reportIDIndex = url.indexOf('/reports/');\n\n\t\tif (reportIDIndex === -1) {\n\t\t\tconsole.error('Could not find report ID in URL', url);\n\t\t\treturn urlInfo;\n\t\t}\n\n\t\treportIDIndex += 9; // 9 = length of '/reports/'\n\t\tconst reportIDLength = 16;\n\n\t\tif (fightIDIndex !== -1) {\n\t\t\tfightIDIndex += 6; // 6 = length of 'fight='\n\n\t\t\tlet fightID = parseInt(url.substring(fightIDIndex), 10);\n\n\t\t\tif (isNaN(fightID)) {\n\t\t\t\tfightID = 0;\n\t\t\t}\n\n\t\t\turlInfo.fightID = fightID.toString();\n\t\t} else {\n\t\t\tconsole.warn('Could not find fight ID in URL', url, 'defaulting to fight 0');\n\t\t}\n\n\t\turlInfo.reportID = url.substring(reportIDIndex, reportIDIndex + reportIDLength) ?? '';\n\n\t\treturn urlInfo\n\t}\n\n\tprivate getRateLimit(token: string): Promise<wclRateLimitData> {\n\t\tconst query = `\n\t  {\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }`;\n\t\treturn this.queryWCL(query, token)\n\t\t\t.then((res) => res['data']['rateLimitData'] as wclRateLimitData);\n\t}\n\n\tasync onImport(importLink: string) {\n\t\tthis.importButton.disabled = true;\n\t\tthis.rootElem.style.cursor = 'wait';\n\t\tthis.doImport(importLink).then(() => {\n\t\t\tthis.importButton.disabled = false\n\t\t\tthis.rootElem.style.removeProperty('cursor');\n\t\t})\n\t}\n\n\tasync doImport(importLink: string) {\n\t\tif (!importLink.length) {\n\t\t\tconsole.error('No import link provided!');\n\t\t\treturn;\n\t\t}\n\n\t\tlet urlInfo = this.getURLInfo(importLink);\n\n\t\tconst reportID = urlInfo.reportID;\n\t\tconst fightID = urlInfo.fightID;\n\n\t\tif (!reportID.length) {\n\t\t\tconsole.error('Could not find report ID in URL', importLink);\n\t\t\treturn;\n\t\t}\n\n\t\t// Clear the raid out to avoid any taint issues.\n\t\tthis.simUI.clearRaid(TypedEvent.nextEventID());\n\n\t\tconst token = await this.getWCLBearerToken();\n\n\t\tconst rateLimitBuffer = 30; // WCL Query point buffer\n\t\tconst rateLimitStart: wclRateLimitData = await this.getRateLimit(token);\n\n\t\t// Slower but more accurate way to generate the raid sim.\n\t\t// Generates players into the groups that they were in during the fight.\n\t\t// If the rate limit is close to max, then it will create the raid parties 'randomly'.\n\t\tlet experimentalGenerateParties: boolean = rateLimitStart.pointsSpentThisHour + rateLimitBuffer < rateLimitStart.limitPerHour;\n\n\t\tconsole.info('Importing WCL report', reportID, 'fight', fightID, 'Generate Parties:', experimentalGenerateParties);\n\n\t\tconst reportDataQuery = `\n\t\t\t\t{\n\t\t\t\t\treportData {\n\t\t\t\t\t\treport(code: \"${reportID}\") {\n\t\t\t\t\t\t\tguild {\n\t\t\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tplayerDetails: table(fightIDs: [${fightID}], endTime: 99999999, dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\t\t\tfights(fightIDs: [${fightID}]) {\n\t\t\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinnervates: table(fightIDs: [${fightID}], dataType:Casts, endTime: 99999999, sourceClass: \"Druid\", abilityID: 29166),\n\t\t\t\t\t\t\tpowerInfusion: table(fightIDs: [${fightID}], dataType:Casts, endTime: 99999999, sourceClass: \"Priest\", abilityID: 10060)\n\t\t\t\t\t\t\ttricksOfTheTrade: table(fightIDs: [${fightID}], dataType:Casts, endTime: 99999999, sourceClass: \"Rogue\", abilityID: 57933)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t`;\n\n\t\tconst reportData = await this.queryWCL(reportDataQuery, token);\n\t\tif (reportData.errors != undefined && reportData.errors != null && reportData.errors.length) {\n\t\t\tconst errorData = reportData.errors.reduce((accumulator: string, error: any) => {\n\t\t\t\treturn accumulator + error.message;\n\t\t\t}, \"\");\n\t\t\talert(\"Failed to import: \" + errorData);\n\t\t\treturn;\n\t\t}\n\t\t// Process the report data.\n\t\tconst wclData = reportData.data.reportData.report; // TODO: Typings?\n\n\t\tconst guildData = wclData.guild;\n\t\tconst playerData: wclPlayer[] = wclData.playerDetails.data.entries;\n\t\tconst innervateData: wclBuffCastsData[] = wclData.innervates.data.entries;\n\t\tconst powerInfusionData: wclBuffCastsData[] = wclData.powerInfusion.data.entries;\n\t\tconst tricksOfTheTradeData: wclBuffCastsData[] = wclData.tricksOfTheTrade.data.entries;\n\n\t\t// Set up the general variables we need for import to be successful.\n\t\tconst fight: { startTime: number, endTime: number, id: number, name: string } = wclData.fights[0];\n\t\tconst startTime: number = fight.startTime;\n\t\tconst endTime: number = fight.endTime;\n\n\t\t// Default to UI setting\n\t\tlet faction = this.simUI.raidPicker?.getCurrentFaction();\n\n\t\t// If defined in log, use that faction.\n\t\tif (guildData != null) {\n\t\t\tfaction = guildData.faction.id as Faction;\n\t\t}\n\n\t\t// Fallback if UI is broken and log has no faction.\n\t\tif (faction == undefined) {\n\t\t\tfaction = Faction.Horde;\n\t\t}\n\n\t\tconst encounter = EncounterProto.create();\n\t\tencounter.duration = (endTime - startTime) / 1000;\n\n\t\tencounter.targets = new Array<TargetProto>();\n\n\t\tlet closestEncounterPreset = this.simUI.sim.getAllPresetEncounters().find((enc) => enc.path.includes(fight.name));\n\n\t\t// Use the preset encounter if it exists.\n\t\tif (closestEncounterPreset && closestEncounterPreset.targets.length) {\n\t\t\tclosestEncounterPreset.targets\n\t\t\t\t.map((mob) => mob.target as TargetProto)\n\t\t\t\t.filter((target) => target !== undefined)\n\t\t\t\t.forEach((target) => encounter.targets.push(target));\n\t\t}\n\n\t\t// Build a manual target list if no preset encounter exists.\n\t\tif (encounter.targets.length === 0) {\n\t\t\tencounter.targets.push(Target.defaultProto());\n\t\t}\n\n\t\tconst settings = RaidSimSettings.create();\n\t\tsettings.encounter = encounter;\n\n\t\tconst raid = RaidProto.create();\n\t\traid.parties = new Array<PartyProto>();\n\t\tsettings.raid = raid;\n\n\t\tconst buffBots = new Array<BuffBot>();\n\n\t\t// Raid index of players that received innervates\n\t\tconst wclIDtoRaidIndex = new Map<number, number>();\n\n\t\tconst numPaladins = playerData.filter((player) => player.type === 'Paladin').length;\n\n\t\t// Generate an empty set of 3 dimensional arrays for each party. [ party ][ player or buffBot ][ player ]\n\t\tlet tempParties: WCLSimPlayer[][] = Array.from({ length: MAX_NUM_PARTIES }).map(() => []);\n\n\t\t// Generate the default 5 raid parties & temp parties.\n\t\ttempParties.forEach(() => raid.parties.push(PartyProto.create()));\n\n\t\t// Sorts an objectArray by a property. Returns a new array.\n\t\t// Can be called recursively.\n\t\tconst sortByProperty = (objArray: any[], prop: string) => {\n\t\t\tif (!Array.isArray(objArray)) throw new Error('FIRST ARGUMENT NOT AN ARRAY');\n\t\t\tconst clone = objArray.slice(0);\n\t\t\tconst direct = arguments.length > 2 ? arguments[2] : 1; //Default to ascending\n\t\t\tconst propPath = (prop.constructor === Array) ? prop : prop.split('.');\n\t\t\tclone.sort(function(a, b) {\n\t\t\t\tfor (let p in propPath) {\n\t\t\t\t\tif (a[propPath[p]] && b[propPath[p]]) {\n\t\t\t\t\t\ta = a[propPath[p]];\n\t\t\t\t\t\tb = b[propPath[p]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// convert numeric strings to integers\n\t\t\t\ta = a.toString().match(/^\\d+$/) ? +a : a;\n\t\t\t\tb = b.toString().match(/^\\d+$/) ? +b : b;\n\t\t\t\treturn ((a < b) ? -1 * direct : ((a > b) ? 1 * direct : 0));\n\t\t\t});\n\t\t\treturn clone;\n\t\t}\n\n\t\tconst mappedPlayers = playerData\n\t\t\t.map((wclPlayer) => new WCLSimPlayer(wclPlayer, this.simUI, faction));\n\n\t\tconst processBuffCastData = (buffCastData: wclBuffCastsData[]): { player: WCLSimPlayer, target: string }[] => {\n\t\t\tconst playerCasts: { player: WCLSimPlayer, target: string }[] = [];\n\t\t\tif (buffCastData.length) {\n\t\t\t\tbuffCastData.forEach((cast) => {\n\t\t\t\t\tconst sourcePlayer = mappedPlayers.find((player) => player.name === cast.name);\n\t\t\t\t\tconst targetPlayer = mappedPlayers.find((player) => player.name === cast.targets[0].name);\n\n\t\t\t\t\t// Buff bots do not get PI/Innervates.\n\t\t\t\t\tif (sourcePlayer && targetPlayer && !targetPlayer.isBuffBot) {\n\t\t\t\t\t\tplayerCasts.push({ player: sourcePlayer, target: targetPlayer.name });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn playerCasts;\n\t\t}\n\n\t\tprocessBuffCastData(innervateData).forEach((cast) => cast.player.innervateTarget = cast.target);\n\t\tprocessBuffCastData(powerInfusionData).forEach((cast) => cast.player.powerInfusionTarget = cast.target);\n\t\tprocessBuffCastData(tricksOfTheTradeData).forEach((cast) => cast.player.tricksOfTheTradeTarget = cast.target);\n\n\t\tconst wclPlayers: WCLSimPlayer[] = sortByProperty(sortByProperty(mappedPlayers, 'type'), 'sortPriority');\n\n\t\tlet raidIndex = 0;\n\n\t\t// Sorts buff bots to the end of the array to prevent overwriting them later on.\n\t\tconst sortBuffBotsLast = (a: WCLSimPlayer, b: WCLSimPlayer) => a.isBuffBot ? 1 : b.isBuffBot ? 1 : 0;\n\n\t\t// Reusable function to add a player to the raid.parties[raidIndex] array.\n\t\tconst assignPlayerToParty = (player: WCLSimPlayer, raidParty: PartyProto, missing = false) => {\n\n\t\t\tif (!player) {\n\t\t\t\tconsole.error('Cannot assign player to party because player is undefined!');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!raidParty) {\n\t\t\t\tconsole.error('Cannot assign player to party because party is undefined!');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (raidParty.players.length === MAX_PARTY_SIZE) {\n\t\t\t\tconsole.error('Cannot assign player to party because party is full!', player, raidParty.players);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (missing) {\n\t\t\t\tconsole.warn(`Could not locate a group for ${player.name}, assigning them to an open group.`);\n\t\t\t}\n\n\t\t\tlet buffBot = player.getBuffBot();\n\t\t\tlet simPlayer = player.getPlayer();\n\n\t\t\tif (!buffBot && !simPlayer) {\n\t\t\t\tconsole.error('Cannot assign player to party because player data is undefined!', player);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twclIDtoRaidIndex.set(player.id, raidIndex);\n\n\t\t\tif (buffBot) {\n\t\t\t\tbuffBot.raidIndex = raidIndex;\n\t\t\t\tbuffBots.push(buffBot);\n\t\t\t\traidParty.players.push(PlayerProto.create());\n\t\t\t} else if (simPlayer) {\n\t\t\t\traidParty.players.push(simPlayer);\n\t\t\t\tif (isTankSpec(playerToSpec(simPlayer))) {\n\t\t\t\t\tlet rt = RaidTarget.create();\n\t\t\t\t\trt.targetIndex = wclIDtoRaidIndex.get(player.id)!;\n\t\t\t\t\tsettings.raid!.tanks.push(rt);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Just in case this did not get set previously.\n\t\t\tplayer.partyAssigned = true;\n\n\t\t\traidIndex++;\n\t\t}\n\n\t\t// if experimental_generate_parties is true, we will generate parties based on the party buffers\n\t\tif (experimentalGenerateParties) {\n\n\t\t\t// We only care about the players who can provide party buffs on logs.\n\t\t\tconst partyBuffPlayers = wclPlayers.filter((player) => player.isPartyBuffer);\n\n\t\t\t// Can't be a forEach because we need to wait for the query to finish on each iteration later on.\n\t\t\tfor (const player of partyBuffPlayers) {\n\n\t\t\t\tconst partyFull = player.partyMembers.length >= MAX_PARTY_SIZE;\n\n\t\t\t\t// Skip players that have already been assigned to a party.\n\t\t\t\t// player.partyAssigned || player.partyFound || player.partyMembers.length > 0\n\t\t\t\tif (partyFull) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst auraIDs: number[] = player.getPartyAuraIds();\n\n\t\t\t\tif (!auraIDs.length) {\n\t\t\t\t\tconsole.warn('No party aura ids found for partyBuff player ' + player.name);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet auraBuffQueries = auraIDs.map((auraID) => `\n\t\t\t\t{\n\t\t\t\t\treportData {\n\t\t\t\t\t\treport(code: \"${reportID}\") {\n\t\t\t\t\ttable(startTime: ${startTime}, endTime: ${endTime}, sourceID: ${player.id}, abilityID: ${auraID}, fightIDs: [${fightID}],dataType:Buffs,viewBy:Target,hostilityType:Friendlies)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}`);\n\n\t\t\t\tlet auraTargets: wclAura[] = [];\n\n\t\t\t\t// Can't be a forEach because we need to await each query.\n\t\t\t\tfor (let i = 0; i < auraBuffQueries.length; i++) {\n\n\t\t\t\t\tif (auraTargets.length >= MAX_PARTY_SIZE || partyFull) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet auraQueryRes = await this.queryWCL(auraBuffQueries[i], token);\n\t\t\t\t\tif (auraQueryRes) {\n\t\t\t\t\t\tlet playerAuras: wclAura[] = auraQueryRes.data?.reportData?.report?.table?.data?.auras ?? [];\n\t\t\t\t\t\tif (playerAuras.length) {\n\n\t\t\t\t\t\t\tplayerAuras = playerAuras.filter((auraTarget) => auraTarget.type !== 'Pet')\n\t\t\t\t\t\t\t\t.sort((a, b) => a.bands[0].startTime - b.bands[0].startTime)\n\t\t\t\t\t\t\t\t.filter((auraTarget, index) => index < 5);\n\n\t\t\t\t\t\t\tconst uniqueAuraTargets = playerAuras.filter((auraTarget) => !auraTargets.some((target) => target.name === auraTarget.name));\n\t\t\t\t\t\t\tauraTargets.push(...uniqueAuraTargets);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (auraTargets.length === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tplayer.partyFound = true;\n\n\t\t\t\t// Only need the member names at this point.\n\t\t\t\tplayer.partyMembers = auraTargets.map((auraTarget) => auraTarget.name);\n\n\t\t\t\tlet partyMembers = wclPlayers\n\t\t\t\t\t.filter((raidMember) => player.partyMembers.includes(raidMember.name))\n\t\t\t\t\t.filter((raidMember) => !raidMember.partyAssigned);\n\n\t\t\t\tconst totalPartyMembers = partyMembers.length;\n\n\t\t\t\t// Find an empty temp party to assign the members to.\n\t\t\t\tlet partyIndex: number = tempParties.findIndex((party) => party.length < MAX_PARTY_SIZE && party.length < totalPartyMembers);\n\n\t\t\t\t// Try and see if any of the parties have your party members in it without you.\n\t\t\t\tif (partyIndex === -1) {\n\t\t\t\t\tconsole.warn('No empty temp party found for player ' + player.name);\n\t\t\t\t\tpartyIndex = tempParties\n\t\t\t\t\t\t.filter((party) => party.length < MAX_PARTY_SIZE)\n\t\t\t\t\t\t.findIndex((party) => party.some((member) => player.partyMembers.includes(member.name)));\n\t\t\t\t\tconsole.info('Found party with members in it: ' + partyIndex);\n\t\t\t\t}\n\n\t\t\t\tlet party: WCLSimPlayer[] = tempParties[partyIndex];\n\n\t\t\t\tpartyMembers.forEach((partyMember) => {\n\n\t\t\t\t\tconst isUndefined = party === undefined;\n\t\t\t\t\tconst isFull = party.length === MAX_PARTY_SIZE;\n\n\t\t\t\t\tif (isUndefined || isFull) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tpartyMember.partyAssigned = true;\n\t\t\t\t\tpartyMember.partyMembers = player.partyMembers;\n\n\t\t\t\t\tparty.push(partyMember);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Process the temp groups into the sim raid groups.\n\t\t\ttempParties.forEach((party, partyIndex) => {\n\n\t\t\t\tlet raidParty = raid.parties[partyIndex];\n\n\t\t\t\tparty\n\t\t\t\t\t.sort(sortBuffBotsLast)\n\t\t\t\t\t.forEach((player) => assignPlayerToParty(player, raidParty));\n\t\t\t});\n\t\t}\n\n\t\t// Process the players who didn't get assigned a group yet.\n\t\twclPlayers\n\t\t\t.filter((player) => !player.partyAssigned)\n\t\t\t.sort(sortBuffBotsLast)\n\t\t\t.map((player) => {\n\t\t\t\tlet raidParty = raid.parties.filter((party) => party.players.length < MAX_PARTY_SIZE)[0];\n\t\t\t\tassignPlayerToParty(player, raidParty, true);\n\t\t\t});\n\n\t\t// Insert the innervate / PI buffs into the options for the raid.\n\t\twclPlayers\n\t\t\t.filter((player) => player.innervateTarget || player.powerInfusionTarget || player.tricksOfTheTradeTarget)\n\t\t\t.forEach((player) => {\n\n\t\t\t\tconst target: wclSimPlayer | undefined = wclPlayers.find((wclPlayer) => wclPlayer.name === player.innervateTarget || player.name === player.powerInfusionTarget || player.name === player.tricksOfTheTradeTarget);\n\n\t\t\t\tif (!target) {\n\t\t\t\t\tconsole.warn('Could not find target assignment player');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst targetID: number = target.id;\n\t\t\t\tconst targetRaidIndex: number | undefined = wclIDtoRaidIndex.get(targetID);\n\n\t\t\t\tif (!targetRaidIndex) {\n\t\t\t\t\tconsole.warn(`Could not find ${target.name} raid index!`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (player.isBuffBot) {\n\t\t\t\t\tconst playerID: number = player.id;\n\t\t\t\t\tconst playerRaidIndex: number | undefined = wclIDtoRaidIndex.get(playerID);\n\t\t\t\t\tconst buffBot = buffBots.find((buffBot) => buffBot.raidIndex === playerRaidIndex);\n\t\t\t\t\tif (buffBot) {\n\t\t\t\t\t\tif (player.innervateTarget) {\n\t\t\t\t\t\t\tbuffBot.innervateAssignment = RaidTarget.create();\n\t\t\t\t\t\t\tbuffBot.innervateAssignment.targetIndex = targetRaidIndex\n\t\t\t\t\t\t} else if (player.powerInfusionTarget) {\n\t\t\t\t\t\t\tbuffBot.powerInfusionAssignment = RaidTarget.create();\n\t\t\t\t\t\t\tbuffBot.powerInfusionAssignment.targetIndex = targetRaidIndex\n\t\t\t\t\t\t} else if (player.tricksOfTheTradeTarget) {\n\t\t\t\t\t\t\tbuffBot.tricksOfTheTradeAssignment = RaidTarget.create();\n\t\t\t\t\t\t\tbuffBot.tricksOfTheTradeAssignment.targetIndex = targetRaidIndex\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Regular players.\n\n\t\t\t\tconst raidParty = raid.parties.filter((party) => party.players.some((raidPlayer) => raidPlayer.name === player.name))[0];\n\n\t\t\t\tif (!raidParty) {\n\t\t\t\t\tconsole.warn('Could not find raiding party for player ' + player.name);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst raidPlayer = raidParty.players.find((raidPlayer) => raidPlayer.name === player.name);\n\n\t\t\t\tif (!raidPlayer) {\n\t\t\t\t\tconsole.warn('Could not find raid player ' + player.name + ' in raid party ' + raidParty);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (player.innervateTarget) {\n\t\t\t\t\tif (raidPlayer.spec.oneofKind == 'balanceDruid') {\n\t\t\t\t\t\traidPlayer.spec.balanceDruid.options!.innervateTarget = RaidTarget.create();\n\t\t\t\t\t\traidPlayer.spec.balanceDruid.options!.innervateTarget.targetIndex = targetRaidIndex;\n\t\t\t\t\t} else if (raidPlayer.spec.oneofKind == 'feralDruid') {\n\t\t\t\t\t\traidPlayer.spec.feralDruid.options!.innervateTarget = RaidTarget.create();\n\t\t\t\t\t\traidPlayer.spec.feralDruid.options!.innervateTarget.targetIndex = targetRaidIndex;\n\t\t\t\t\t} else if (raidPlayer.spec.oneofKind == 'feralTankDruid') {\n\t\t\t\t\t\traidPlayer.spec.feralTankDruid.options!.innervateTarget = RaidTarget.create();\n\t\t\t\t\t\traidPlayer.spec.feralTankDruid.options!.innervateTarget.targetIndex = targetRaidIndex;\n\t\t\t\t\t}\n\t\t\t\t} else if (player.powerInfusionTarget) {\n\t\t\t\t\t// Pretty sure there is no shadow priest that has PI\n\t\t\t\t} else if (player.tricksOfTheTradeTarget) {\n\t\t\t\t\t// TODO: I'm not sure what I'm supposed to do here\n\t\t\t\t}\n\t\t\t});\n\n\t\twclPlayers\n\t\t\t.filter((player) => !player.partyAssigned)\n\t\t\t.forEach((player) => {\n\t\t\t\tconsole.error(`${player.name} is not in a party!`, player);\n\t\t\t});\n\n\t\tsettings.blessings = makeDefaultBlessings(numPaladins);\n\n\t\tthis.simUI.fromProto(TypedEvent.nextEventID(), settings);\n\t\tthis.simUI.setBuffBots(TypedEvent.nextEventID(), buffBots);\n\n\t\tif (!experimentalGenerateParties) {\n\t\t\tconst rateLimitEnd: wclRateLimitData = await this.getRateLimit(token);\n\t\t\tconsole.debug(`Rate Limit resets in ${rateLimitEnd.pointsResetIn} seconds.`);\n\t\t}\n\n\t\tthis.close();\n\t}\n}\n\nclass WCLSimPlayer implements wclSimPlayer {\n\tpublic gear: wclGear[];\n\tpublic icon: string;\n\tpublic id: number;\n\tpublic name: string;\n\tpublic type: string;\n\tpublic talents: wclTalents[];\n\tpublic wclSpec: string;\n\n\tpublic partyAssigned: boolean = false;\n\tpublic partyFound: boolean = false;\n\tpublic partyMembers: string[] = [];\n\n\tpublic isPartyBuffer: boolean = false;\n\tpublic isBuffBot: boolean = false;\n\tpublic sortPriority: number = 99;\n\n\tpublic innervateTarget: string | undefined;\n\tpublic powerInfusionTarget: string | undefined;\n\tpublic tricksOfTheTradeTarget: string | undefined;\n\n\tprivate simUI: RaidSimUI;\n\tprivate spec: Spec;\n\tprivate specType: string;\n\tprivate faction: Faction;\n\n\tconstructor(data: wclPlayer, simUI: RaidSimUI, faction: Faction = Faction.Unknown) {\n\t\tthis.simUI = simUI;\n\n\t\tthis.name = data.name;\n\t\tthis.gear = data.gear;\n\t\tthis.icon = data.icon;\n\t\tthis.id = data.id;\n\t\tthis.type = data.type;\n\t\tthis.talents = data.talents;\n\t\tthis.wclSpec = data.icon.split('-')[1];\n\t\tthis.faction = faction;\n\n\t\t// Prot Paladin's occasionally have a specType of 'Protection' instead of 'Justicar'?\n\t\tif (this.type === 'Paladin' && this.wclSpec === 'Protection') {\n\t\t\tthis.wclSpec = 'Justicar';\n\t\t}\n\n\t\tthis.spec = specNames[this.wclSpec];\n\t\tthis.specType = this.wclSpec + this.type;\n\n\t\tthis.isBuffBot = this.spec === undefined;\n\n\t\tthis.isPartyBuffer = this.getPartyAuraIds().length > 1;\n\n\t\tthis.sortPriority = specSortPriority[this.wclSpec] ?? 99;\n\t}\n\n\tpublic getPlayer(): PlayerProto | undefined {\n\n\t\tif (this.isBuffBot) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet player = PlayerProto.create();\n\n\t\tconst specFuncs = specTypeFunctions[this.spec];\n\n\t\tconst matchingPreset = this.getMatchingPreset();\n\n\t\tif (matchingPreset === undefined) {\n\t\t\tconsole.error('Could not find matching preset for non buff bot', {\n\t\t\t\t'name': this.name,\n\t\t\t\t'spec': this.spec,\n\t\t\t\t'type': this.type,\n\t\t\t\t'talents': this.talents,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tplayer = withSpecProto(this.spec, player, matchingPreset.rotation, specFuncs.talentsCreate(), matchingPreset.specOptions);\n\n\t\tplayer.talentsString = matchingPreset.talents.talentsString;\n\t\tplayer.glyphs = matchingPreset.talents.glyphs;\n\t\tplayer.consumes = matchingPreset.consumes;\n\n\t\tplayer.name = this.name;\n\t\tplayer.class = nameToClass(this.type);\n\t\tplayer.equipment = this.getEquipment();\n\t\tplayer.race = matchingPreset.defaultFactionRaces[this.faction];\n\n\t\tPlayer.applySharedDefaultsToProto(player);\n\n\t\treturn player;\n\t}\n\n\tpublic getBuffBot(): BuffBot | undefined {\n\n\t\tif (!this.isBuffBot) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst botID = buffBotNames[this.specType];\n\n\t\tif (botID == null) {\n\t\t\tconsole.error('Buff Bot Spec not implemented: ', this.specType);\n\t\t\treturn;\n\t\t}\n\n\t\tconst bot = BuffBot.create();\n\t\tbot.id = botID;\n\t\tbot.raidIndex = -1; // Default it for now. // numPlayers\n\n\t\treturn bot;\n\t}\n\n\tpublic getPartyAuraIds() {\n\n\t\tconst allSpecClassAuras: any = {\n\t\t\t'Paladin': [\n\t\t\t\t19746, // Concentration Aura\n\t\t\t\t27149, // Devotion Aura,\n\t\t\t\t27150, // Retribution Aura\n\t\t\t],\n\t\t\t'Warrior': [\n\t\t\t\t2048,  // Battle Shout\n\t\t\t\t469, // Commanding Shout\n\t\t\t],\n\t\t\t'Warlock': [\n\t\t\t\t27268, // Pet Imp: Blood Pact\n\t\t\t\t18696, // Improved Imp: Blood Pact\n\t\t\t],\n\t\t};\n\n\t\t// Reused for the plethora of Feral specs.\n\t\tconst feralDruidSpecAuras = [\n\t\t\t24932, // Improved Leader of the Pack // at least 0,32,0\n\t\t\t// 17007, // Leader of the Pack // at least 0,31,0\n\t\t];\n\n\t\t// TODO: Could additionally filter out buff IDs based on minimum req talent strings?\n\t\tconst specSpecificAuras: any = {\n\t\t\t'RetributionPaladin': [\n\t\t\t\t20092, // Improved Retribution Aura // at least 0,0,16\n\t\t\t\t20218, // Sanctity Aura // at least 0,0,21\n\t\t\t\t31870, // Improved Sanctity Aura // at least 0,0,22\n\t\t\t],\n\t\t\t'GuardianDruid': [...feralDruidSpecAuras],\n\t\t\t'WardenDruid': [...feralDruidSpecAuras],\n\t\t\t'FeralDruid': [...feralDruidSpecAuras],\n\t\t\t'BalanceDruid': [\n\t\t\t\t24907, // Moonkin Aura // at least 31,0,0\n\t\t\t],\n\t\t\t'RestorationDruid': [\n\t\t\t\t34123, // Tree of Life // at least 0,0,41\n\t\t\t],\n\t\t\t'MarksmanHunter': [\n\t\t\t\t27066, // Trueshot Aura // at least 0,32,0\n\t\t\t],\n\t\t\t'EnhancementShaman': [\n\t\t\t\t30811, // Unleashed Rage // at least 0,36,0\n\t\t\t],\n\t\t\t// 'ElementalShaman': [] // Totem buffs do not show up in logs. Leaving for future reference.\n\t\t};\n\n\t\tconst consumableAuras = [\n\t\t\t351355, // Greater Drums of Battle\n\t\t];\n\n\t\tconst classAuras = allSpecClassAuras[this.type] ?? [];\n\t\tconst specAuras = specSpecificAuras[this.specType] ?? [];\n\n\t\tconst reliableAuras = [\n\t\t\t...specAuras, ...classAuras, ...consumableAuras,\n\t\t];\n\n\t\tif (this.type === 'Shaman') {\n\t\t\t// Shamans get moved around a lot, so Heroism isn't a good reference for what group they are in.\n\t\t\treturn [\n\t\t\t\t...reliableAuras,\n\t\t\t\t32182, // Heroism\n\t\t\t];\n\t\t}\n\t\treturn reliableAuras;\n\t}\n\n\tprivate getMatchingPreset(): PresetSpecSettings<Spec> {\n\t\tconst matchingPresets = playerPresets.filter((preset) => preset.spec === this.spec);\n\t\tlet presetIdx = 0;\n\n\t\tif (matchingPresets && matchingPresets.length > 1) {\n\t\t\tlet distance = 100;\n\t\t\t// Search talents and find the preset that the players talents most closely match.\n\t\t\tmatchingPresets.forEach((preset, i) => {\n\t\t\t\tlet presetTalents = [0, 0, 0];\n\t\t\t\tlet talentIdx = 0;\n\t\t\t\t// First sum up the number of talents per tree for preset.\n\t\t\t\tArray.from(preset.talents.talentsString).forEach((v) => {\n\t\t\t\t\tif (v == '-') {\n\t\t\t\t\t\ttalentIdx++;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tpresetTalents[talentIdx] += parseInt(v);\n\t\t\t\t});\n\n\t\t\t\t// Diff the distance to the preset.\n\n\t\t\t\tconst newDistance = presetTalents.reduce((acc, v, i) => acc += Math.abs(this.talents[i]?.guid - presetTalents[i]), 0);\n\n\t\t\t\t// If this is the best distance, assign this preset.\n\t\t\t\tif (newDistance < distance) {\n\t\t\t\t\tpresetIdx = i;\n\t\t\t\t\tdistance = newDistance;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn matchingPresets[presetIdx];\n\t}\n\n\tprivate getEquipment(): EquipmentSpec {\n\t\tlet equipment = EquipmentSpec.create();\n\t\tequipment.items = new Array<ItemSpec>();\n\n\t\tthis.gear.forEach((gear) => {\n\t\t\tconst item = ItemSpec.create();\n\t\t\titem.id = gear.id;\n\t\t\tconst dbEnchant = this.simUI.sim.getEnchantFlexible(gear.permanentEnchant);\n\t\t\titem.enchant = dbEnchant\n\t\t\t\t? dbEnchant.id\n\t\t\t\t: 0;\n\t\t\tif (gear.gems) {\n\t\t\t\titem.gems = new Array<number>();\n\t\t\t\tgear.gems.forEach((gemInfo) => item.gems.push(gemInfo.id));\n\t\t\t}\n\t\t\tequipment!.items.push(item);\n\t\t});\n\t\treturn equipment;\n\t}\n\n}\n\n\n// Maps WCL spec to sorting priority for party makeup checks. Lower the number, the more likely the query will be successful.\nconst specSortPriority: Record<string, number> = {\n\t'Warden': 0,\n\t'Guardian': 1,\n\t'Feral': 2,\n\t'Balance': 3,\n\t'Justicar': 4,\n\t'Retribution': 5,\n\t'Fury': 6,\n\t'Arms': 7,\n\t'Protection': 8,\n\t'Enhancement': 9,\n\t'Destruction': 10,\n\t'Affliction': 11,\n\t'Demonology': 12,\n\t'Marksman': 13,\n};\n\n// Maps WCL spec names to internal Spec enum.\nconst specNames: Record<string, Spec> = {\n\t'Balance': Spec.SpecBalanceDruid,\n\t'Elemental': Spec.SpecElementalShaman,\n\t'Enhancement': Spec.SpecEnhancementShaman,\n\t'Feral': Spec.SpecFeralDruid,\n\t'Warden': Spec.SpecFeralTankDruid,\n\t'Guardian': Spec.SpecFeralTankDruid,\n\t'Survival': Spec.SpecHunter,\n\t'BeastMastery': Spec.SpecHunter,\n\t'Arcane': Spec.SpecMage,\n\t'Fire': Spec.SpecMage,\n\t'Frost': Spec.SpecMage,\n\t'Assassination': Spec.SpecRogue,\n\t'Combat': Spec.SpecRogue,\n\t'Retribution': Spec.SpecRetributionPaladin,\n\t'Justicar': Spec.SpecProtectionPaladin,\n\t'Shadow': Spec.SpecShadowPriest,\n\t'Smite': Spec.SpecSmitePriest,\n\t'Destruction': Spec.SpecWarlock,\n\t'Affliction': Spec.SpecWarlock,\n\t'Demonology': Spec.SpecWarlock,\n\t'Arms': Spec.SpecWarrior,\n\t'Fury': Spec.SpecWarrior,\n\t'Champion': Spec.SpecWarrior,\n\t'Warrior': Spec.SpecWarrior,\n\t'Gladiator': Spec.SpecWarrior,\n\t'Protection': Spec.SpecProtectionWarrior,\n};\n\n// Maps WCL spec+type to internal buff bot IDs.\nconst buffBotNames: Record<string, string> = {\n\t// Healers\n\t'HolyPaladin': 'Paladin',\n\t'HolyPriest': 'Holy Priest',\n\t'DisciplinePriest': 'Divine Spirit Priest',\n\t'RestorationDruid': 'Resto Druid',\n\t'DreamstateDruid': 'Resto Druid',\n\t'RestorationShaman': 'Resto Shaman',\n};\n\ninterface wclBuffCastsData {\n\tname: string;\n\ttargets: {\n\t\tname: string;\n\t\ttype: string;\n\t}[];\n}\n\ninterface wclRateLimitData {\n\tlimitPerHour: number,\n\tpointsSpentThisHour: number,\n\tpointsResetIn: number\n}\n\n// Typed interface for WCL talents\ninterface wclTalents {\n\tname: string;\n\tguid: number;\n\ttype: number;\n\tabilityIcon: string;\n}\n\n// Typed interface for WCL Gems\ninterface wclGems {\n\tid: number;\n\titemLevel: number;\n\ticon: string;\n}\n\n// Typed interface for WCL Gear\ninterface wclGear {\n\tid: number;\n\tslot: number;\n\tquality: number;\n\ticon: string;\n\tname: string;\n\titemLevel: number;\n\tpermanentEnchant: number;\n\tpermanentEnchantName: string;\n\ttemporaryEnchant: number;\n\tgems?: wclGems[];\n}\n\n// Typed interface for WCL Player Data\ninterface wclPlayer {\n\tname: string;\n\tid: number;\n\tguid?: number;\n\ttype: string; // Paladin, Mage, etc.\n\ticon: string; // Paladin-Justicar, Mage-Fire, etc.\n\titemLevel?: number;\n\ttotal?: number;\n\tactiveTime?: number;\n\tactiveTimeReduced?: number;\n\tabilities?: unknown[]; // Don't care about abilities.\n\tdamageAbilities?: unknown[];\n\ttargets?: unknown[];\n\ttalents: wclTalents[];\n\tgear: wclGear[];\n}\n\n// Typed interface for WoWSimPlayer class\ninterface wclSimPlayer extends wclPlayer {\n\twclSpec: string;\n\tpartyAssigned: boolean;\n\tisPartyBuffer: boolean;\n\tpartyMembers: string[];\n\tisBuffBot: boolean;\n}\n\ninterface wclAura {\n\tname: string;\n\tid: number;\n\tguid: number;\n\ttype: string;\n\ticon: string;\n\ttotalUptime: number;\n\ttotalUses: number;\n\tbands: {\n\t\tstartTime: number,\n\t\tendTime: number,\n\t}[];\n}\n","import { CloseButton } from '../core/components/close_button.js';\nimport { Component } from '../core/components/component.js';\nimport { EnumPicker } from '../core/components/enum_picker.js';\nimport { makePhaseSelector } from '../core/components/other_inputs.js';\nimport { Raid } from '../core/raid.js';\nimport { MAX_PARTY_SIZE } from '../core/party.js';\nimport { Party } from '../core/party.js';\nimport { Player } from '../core/player.js';\nimport { Player as PlayerProto } from '../core/proto/api.js';\nimport { Encounter as EncounterProto } from '../core/proto/common.js';\nimport { Raid as RaidProto } from '../core/proto/api.js';\nimport { Party as PartyProto } from '../core/proto/api.js';\nimport { Class } from '../core/proto/common.js';\nimport { Profession } from '../core/proto/common.js';\nimport { Race } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Faction } from '../core/proto/common.js';\nimport { Glyphs } from '../core/proto/common.js';\nimport { BuffBot as BuffBotProto } from '../core/proto/ui.js';\nimport { playerToSpec, specNames } from '../core/proto_utils/utils.js';\nimport { classColors } from '../core/proto_utils/utils.js';\nimport { isTankSpec } from '../core/proto_utils/utils.js';\nimport { specToClass } from '../core/proto_utils/utils.js';\nimport { newRaidTarget } from '../core/proto_utils/utils.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { camelToSnakeCase } from '../core/utils.js';\nimport { formatDeltaTextElem } from '../core/utils.js';\nimport { getEnumValues } from '../core/utils.js';\nimport { hexToRgba } from '../core/utils.js';\n\nimport { BuffBot } from './buff_bot.js';\nimport { RaidSimUI } from './raid_sim_ui.js';\nimport { buffBotPresets, playerPresets, specSimFactories } from './presets.js';\n\nimport { BalanceDruid_Options as BalanceDruidOptions } from '../core/proto/druid.js';\nimport { SmitePriest_Options as SmitePriestOptions } from '../core/proto/priest.js';\nimport { MessageType } from '@protobuf-ts/runtime';\n\ndeclare var tippy: any;\ndeclare var $: any;\n\nconst NEW_PLAYER: number = -1;\n\nenum DragType {\n\tNone,\n\tNew,\n\tMove,\n\tSwap,\n\tCopy,\n}\n\nexport class RaidPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly raid: Raid;\n\treadonly partyPickers: Array<PartyPicker>;\n\treadonly newPlayerPicker: NewPlayerPicker;\n\n\t// Hold data about the player being dragged while the drag is happening.\n\tcurrentDragPlayer: Player<any> | BuffBot | null = null;\n\tcurrentDragPlayerFromIndex: number = NEW_PLAYER;\n\tcurrentDragType: DragType = DragType.New;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parent, 'raid-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.raid = raidSimUI.sim.raid;\n\n\t\tconst raidViewer = document.createElement('div');\n\t\traidViewer.classList.add('current-raid-viewer');\n\t\tthis.rootElem.appendChild(raidViewer);\n\t\traidViewer.innerHTML = `\n\t\t\t<div class=\"parties-container\">\n\t\t\t</div>\n\t\t`;\n\n\t\tconst partiesContainer = this.rootElem.getElementsByClassName('parties-container')[0] as HTMLDivElement;\n\t\tthis.partyPickers = this.raid.getParties().map((party, i) => new PartyPicker(partiesContainer, party, i, this));\n\n\t\tconst newPlayerPickerRoot = document.createElement('div');\n\t\tnewPlayerPickerRoot.classList.add('new-player-picker');\n\t\tthis.rootElem.appendChild(newPlayerPickerRoot);\n\n\t\tthis.newPlayerPicker = new NewPlayerPicker(newPlayerPickerRoot, this);\n\n\t\tthis.rootElem.ondragend = event => {\n\t\t\t// Uncomment to remove player when dropped 'off' the raid.\n\t\t\t//if (this.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\t//\tconst playerPicker = this.getPlayerPicker(this.currentDragPlayerFromIndex);\n\t\t\t//\tplayerPicker.setPlayer(null, null, DragType.None);\n\t\t\t//}\n\n\t\t\tthis.clearDragPlayer();\n\t\t};\n\t}\n\n\tgetCurrentFaction(): Faction {\n\t\treturn this.raid.sim.getFaction();\n\t}\n\n\tgetCurrentPhase(): number {\n\t\treturn this.raid.sim.getPhase();\n\t}\n\n\tgetPlayerPicker(raidIndex: number): PlayerPicker {\n\t\treturn this.partyPickers[Math.floor(raidIndex / MAX_PARTY_SIZE)].playerPickers[raidIndex % MAX_PARTY_SIZE];\n\t}\n\n\tgetPlayerPickers(): Array<PlayerPicker> {\n\t\treturn [...new Array(25).keys()].map(i => this.getPlayerPicker(i));\n\t}\n\n\tgetBuffBots(): Array<BuffBot> {\n\t\treturn this.getPlayerPickers()\n\t\t\t.filter(picker => picker.player instanceof BuffBot)\n\t\t\t.map(picker => picker.player as BuffBot);\n\t}\n\n\tsetBuffBots(eventID: EventID, newBuffBotProtos: Array<BuffBotProto>) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.getBuffBots().forEach(buffBot => this.getPlayerPicker(buffBot.getRaidIndex()).setPlayer(eventID, null, DragType.None));\n\n\t\t\tnewBuffBotProtos.forEach(buffBotProto => {\n\t\t\t\tconst settings = buffBotPresets.find(preset => preset.buffBotId == buffBotProto.id);\n\t\t\t\tif (!settings) {\n\t\t\t\t\tconsole.warn('Invalid buff bot ID: ' + buffBotProto.id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst buffBot = new BuffBot(buffBotProto.id, this.raid.sim);\n\t\t\t\tbuffBot.fromProto(eventID, buffBotProto);\n\t\t\t\tthis.getPlayerPicker(buffBotProto.raidIndex).setPlayer(eventID, buffBot, DragType.None);\n\t\t\t});\n\t\t});\n\t}\n\n\tsetDragPlayer(player: Player<any> | BuffBot, fromIndex: number, type: DragType) {\n\t\tthis.clearDragPlayer();\n\n\t\tthis.currentDragPlayer = player;\n\t\tthis.currentDragPlayerFromIndex = fromIndex;\n\t\tthis.currentDragType = type;\n\n\t\tif (fromIndex != NEW_PLAYER) {\n\t\t\tconst playerPicker = this.getPlayerPicker(fromIndex);\n\t\t\tplayerPicker.rootElem.classList.add('dragFrom');\n\t\t}\n\t}\n\n\tclearDragPlayer() {\n\t\tif (this.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\tconst playerPicker = this.getPlayerPicker(this.currentDragPlayerFromIndex);\n\t\t\tplayerPicker.rootElem.classList.remove('dragFrom');\n\t\t}\n\n\t\tthis.currentDragPlayer = null;\n\t\tthis.currentDragPlayerFromIndex = NEW_PLAYER;\n\t\tthis.currentDragType = DragType.New;\n\t}\n}\n\nexport class PartyPicker extends Component {\n\treadonly party: Party;\n\treadonly index: number;\n\treadonly raidPicker: RaidPicker;\n\treadonly playerPickers: Array<PlayerPicker>;\n\n\tconstructor(parent: HTMLElement, party: Party, index: number, raidPicker: RaidPicker) {\n\t\tsuper(parent, 'party-picker-root');\n\t\tthis.party = party;\n\t\tthis.index = index;\n\t\tthis.raidPicker = raidPicker;\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<div class=\"party-header\">\n\t\t\t\t<span>Group ${index + 1}</span>\n\t\t\t\t<div class=\"party-results\">\n\t\t\t\t\t<span class=\"party-results-dps\"></span>\n\t\t\t\t\t<span class=\"party-results-reference-delta\"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"players-container\">\n\t\t\t</div>\n\t\t`;\n\n\t\tconst playersContainer = this.rootElem.getElementsByClassName('players-container')[0] as HTMLDivElement;\n\t\tthis.playerPickers = [...Array(MAX_PARTY_SIZE).keys()].map(i => new PlayerPicker(playersContainer, this, i));\n\n\t\tconst dpsResultElem = this.rootElem.getElementsByClassName('party-results-dps')[0] as HTMLElement;\n\t\tconst referenceDeltaElem = this.rootElem.getElementsByClassName('party-results-reference-delta')[0] as HTMLElement;\n\n\t\tthis.raidPicker.raidSimUI.referenceChangeEmitter.on(() => {\n\t\t\tconst currentData = this.raidPicker.raidSimUI.getCurrentData();\n\t\t\tconst referenceData = this.raidPicker.raidSimUI.getReferenceData();\n\n\t\t\tconst partyDps = currentData?.simResult.raidMetrics.parties[this.index].dps.avg || 0;\n\t\t\tconst referenceDps = referenceData?.simResult.raidMetrics.parties[this.index].dps.avg || 0;\n\n\t\t\tif (partyDps == 0 && referenceDps == 0) {\n\t\t\t\tdpsResultElem.textContent = '';\n\t\t\t\treferenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdpsResultElem.textContent = partyDps.toFixed(1);\n\n\t\t\tif (!referenceData) {\n\t\t\t\treferenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tformatDeltaTextElem(referenceDeltaElem, referenceDps, partyDps, 1);\n\t\t});\n\t}\n}\n\nexport class PlayerPicker extends Component {\n\t// Index of this player within its party (0-4).\n\treadonly index: number;\n\n\t// Index of this player within the whole raid (0-24).\n\treadonly raidIndex: number;\n\n\tplayer: Player<any> | BuffBot | null;\n\n\treadonly partyPicker: PartyPicker;\n\treadonly raidPicker: RaidPicker;\n\n\tprivate readonly labelElem: HTMLElement;\n\tprivate readonly iconElem: HTMLImageElement;\n\tprivate readonly nameElem: HTMLSpanElement;\n\tprivate readonly resultsElem: HTMLElement;\n\tprivate readonly dpsResultElem: HTMLElement;\n\tprivate readonly referenceDeltaElem: HTMLElement;\n\n\tconstructor(parent: HTMLElement, partyPicker: PartyPicker, index: number) {\n\t\tsuper(parent, 'player-picker-root');\n\t\tthis.index = index;\n\t\tthis.raidIndex = partyPicker.index * MAX_PARTY_SIZE + index;\n\t\tthis.player = null;\n\t\tthis.partyPicker = partyPicker;\n\t\tthis.raidPicker = partyPicker.raidPicker;\n\n\t\tthis.partyPicker.party.compChangeEmitter.on(eventID => {\n\t\t\tconst newPlayer = this.partyPicker.party.getPlayer(this.index);\n\t\t\tif (newPlayer != this.player && !(newPlayer == null && this.player instanceof BuffBot)) {\n\t\t\t\tthis.setPlayer(eventID, newPlayer, DragType.None);\n\t\t\t}\n\t\t});\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<div class=\"player-label\">\n\t\t\t\t<img class=\"player-icon\"></img>\n\t\t\t\t<span class=\"player-name\" contenteditable></span>\n\t\t\t</div>\n\t\t\t<div class=\"player-spacer\">\n\t\t\t</div>\n\t\t\t<div class=\"player-options\">\n\t\t\t\t<span class=\"player-edit fa fa-edit\"></span>\n\t\t\t\t<span class=\"player-copy fa fa-copy\" draggable=\"true\"></span>\n\t\t\t\t<span class=\"player-delete fa fa-times\"></span>\n\t\t\t</div>\n\t\t\t<div class=\"player-results\">\n\t\t\t\t<span class=\"player-results-dps\"></span>\n\t\t\t\t<span class=\"player-results-reference-delta\"></span>\n\t\t\t</div>\n\t\t`;\n\n\t\tthis.labelElem = this.rootElem.getElementsByClassName('player-label')[0] as HTMLElement;\n\t\tthis.iconElem = this.rootElem.getElementsByClassName('player-icon')[0] as HTMLImageElement;\n\t\tthis.nameElem = this.rootElem.getElementsByClassName('player-name')[0] as HTMLSpanElement;\n\t\tthis.resultsElem = this.rootElem.getElementsByClassName('player-results')[0] as HTMLElement;\n\t\tthis.dpsResultElem = this.rootElem.getElementsByClassName('player-results-dps')[0] as HTMLElement;\n\t\tthis.referenceDeltaElem = this.rootElem.getElementsByClassName('player-results-reference-delta')[0] as HTMLElement;\n\n\t\tthis.nameElem.addEventListener('input', event => {\n\t\t\tif (this.player instanceof Player) {\n\t\t\t\tthis.player.setName(TypedEvent.nextEventID(), this.nameElem.textContent || '');\n\t\t\t}\n\t\t});\n\n\t\tconst maxLength = 15;\n\t\tthis.nameElem.addEventListener('keydown', event => {\n\t\t\t// 9 is tab, 13 is enter\n\t\t\tif (event.keyCode == 9 || event.keyCode == 13) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tconst realPlayerPickers = this.raidPicker.getPlayerPickers().filter(pp => pp.player instanceof Player);\n\t\t\t\tconst indexOfThis = realPlayerPickers.indexOf(this);\n\t\t\t\tif (indexOfThis != -1 && realPlayerPickers.length > indexOfThis + 1) {\n\t\t\t\t\trealPlayerPickers[indexOfThis + 1].nameElem.focus();\n\t\t\t\t} else {\n\t\t\t\t\tthis.nameElem.blur();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// escape\n\t\t\tif (event.keyCode == 27) {\n\t\t\t\tthis.nameElem.blur();\n\t\t\t}\n\n\t\t\t// 8 is backspace, 46 is delete, \n\t\t\tif ((event.keyCode != 8 && event.keyCode != 46) && (this.nameElem.textContent?.length || 0) >= maxLength) {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t});\n\n\t\tconst emptyName = 'Unnamed';\n\t\tthis.nameElem.addEventListener('focusin', event => {\n\t\t\tconst selection = window.getSelection();\n\t\t\tif (selection) {\n\t\t\t\tconst range = document.createRange();\n\t\t\t\trange.selectNodeContents(this.nameElem);\n\t\t\t\tselection.removeAllRanges();\n\t\t\t\tselection.addRange(range);\n\t\t\t}\n\t\t});\n\t\tthis.nameElem.addEventListener('focusout', event => {\n\t\t\tif (!this.nameElem.textContent) {\n\t\t\t\tthis.nameElem.textContent = emptyName;\n\t\t\t\tif (this.player instanceof Player) {\n\t\t\t\t\tthis.player.setName(TypedEvent.nextEventID(), emptyName);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst dragStart = (event: DragEvent, type: DragType) => {\n\t\t\tif (this.player == null) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevent.dataTransfer!.dropEffect = 'move';\n\t\t\tevent.dataTransfer!.effectAllowed = 'all';\n\n\t\t\tconst iconSrc = this.iconElem.src;\n\t\t\tconst dragImage = new Image();\n\t\t\tdragImage.src = iconSrc;\n\t\t\tevent.dataTransfer!.setDragImage(dragImage, 30, 30);\n\t\t\tif (this.player instanceof Player) {\n\t\t\t\tvar playerDataProto = this.player.toProto(true);\n\t\t\t\tevent.dataTransfer!.setData(\"text/plain\", btoa(String.fromCharCode(...PlayerProto.toBinary(playerDataProto))));\n\t\t\t}\n\t\t\tthis.raidPicker.setDragPlayer(this.player, this.raidIndex, type);\n\t\t};\n\n\t\tthis.labelElem.ondragstart = event => {\n\t\t\tdragStart(event, DragType.Swap);\n\t\t};\n\t\tthis.resultsElem.ondragstart = event => {\n\t\t\tdragStart(event, DragType.Swap);\n\t\t};\n\n\t\tconst copyElem = this.rootElem.getElementsByClassName('player-copy')[0] as HTMLSpanElement;\n\t\ttippy(copyElem, {\n\t\t\t'content': 'Drag to Copy',\n\t\t\t'allowHTML': true,\n\t\t});\n\t\tcopyElem.ondragstart = event => {\n\t\t\tdragStart(event, DragType.Copy);\n\t\t};\n\n\t\tconst deleteElem = this.rootElem.getElementsByClassName('player-delete')[0] as HTMLSpanElement;\n\t\ttippy(deleteElem, {\n\t\t\t'content': 'Click to Delete',\n\t\t\t'allowHTML': true,\n\t\t});\n\t\tdeleteElem.addEventListener('click', event => {\n\t\t\tthis.setPlayer(TypedEvent.nextEventID(), null, DragType.None);\n\t\t});\n\n\t\tlet dragEnterCounter = 0;\n\t\tthis.rootElem.ondragenter = event => {\n\t\t\tevent.preventDefault();\n\t\t\tdragEnterCounter++;\n\t\t\tthis.rootElem.classList.add('dragto');\n\t\t};\n\t\tthis.rootElem.ondragleave = event => {\n\t\t\tevent.preventDefault();\n\t\t\tdragEnterCounter--;\n\t\t\tif (dragEnterCounter <= 0) {\n\t\t\t\tthis.rootElem.classList.remove('dragto');\n\t\t\t}\n\t\t};\n\t\tthis.rootElem.ondragover = event => {\n\t\t\tevent.preventDefault();\n\t\t};\n\t\tthis.rootElem.ondrop = event => {\n\t\t\tvar dropData = event.dataTransfer!.getData(\"text/plain\");\n\n\t\t\tevent.preventDefault();\n\t\t\tdragEnterCounter = 0;\n\t\t\tthis.rootElem.classList.remove('dragto');\n\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tif (this.raidPicker.currentDragPlayer == null && dropData.length == 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this.raidPicker.currentDragPlayerFromIndex == this.raidIndex) {\n\t\t\t\t\tthis.raidPicker.clearDragPlayer();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst dragType = this.raidPicker.currentDragType;\n\n\t\t\t\tif (this.raidPicker.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\t\t\tconst fromPlayerPicker = this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);\n\t\t\t\t\tif (dragType == DragType.Swap) {\n\t\t\t\t\t\tfromPlayerPicker.setPlayer(eventID, this.player, dragType);\n\t\t\t\t\t\tvar myicon = this.iconElem.src\n\t\t\t\t\t\tthis.iconElem.src = fromPlayerPicker.iconElem.src;\n\t\t\t\t\t\tfromPlayerPicker.iconElem.src = myicon;\n\t\t\t\t\t} else if (dragType == DragType.Move) {\n\t\t\t\t\t\tthis.iconElem.src = fromPlayerPicker.iconElem.src;\n\t\t\t\t\t\tfromPlayerPicker.setPlayer(eventID, null, dragType);\n\t\t\t\t\t}\n\t\t\t\t} else if (this.raidPicker.currentDragPlayer == null) {\n\t\t\t\t\t// This would be a copy from another window.\n\t\t\t\t\tconst binary = atob(dropData);\n\t\t\t\t\tconst bytes = new Uint8Array(binary.length);\n\t\t\t\t\tfor (let i = 0; i < bytes.length; i++) {\n\t\t\t\t\t\tbytes[i] = binary.charCodeAt(i);\n\t\t\t\t\t}\n\t\t\t\t\tconst playerProto = PlayerProto.fromBinary(bytes);\n\n\t\t\t\t\tvar localPlayer = new Player(playerToSpec(playerProto), this.raidPicker.raidSimUI.sim);\n\t\t\t\t\tlocalPlayer.fromProto(eventID, playerProto);\n\t\t\t\t\tthis.raidPicker.currentDragPlayer = localPlayer;\n\t\t\t\t}\n\n\t\t\t\tif (dragType == DragType.Copy) {\n\t\t\t\t\tthis.setPlayer(eventID, this.raidPicker.currentDragPlayer!.clone(eventID), dragType);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setPlayer(eventID, this.raidPicker.currentDragPlayer, dragType);\n\t\t\t\t}\n\n\t\t\t\tif (this.iconElem.src == \"\") {\n\t\t\t\t\tthis.iconElem.src = playerPresets.filter(preset => {\n\t\t\t\t\t\treturn preset.spec == localPlayer.spec;\n\t\t\t\t\t})[0].iconUrl;\n\t\t\t\t}\n\n\t\t\t\tthis.raidPicker.clearDragPlayer();\n\t\t\t});\n\t\t};\n\n\t\tconst editElem = this.rootElem.getElementsByClassName('player-edit')[0] as HTMLSpanElement;\n\t\ttippy(editElem, {\n\t\t\t'content': 'Edit',\n\t\t\t'allowHTML': true,\n\t\t});\n\t\teditElem.addEventListener('click', event => {\n\t\t\tif (this.player instanceof Player) {\n\t\t\t\tnew PlayerEditorModal(this.player);\n\t\t\t}\n\t\t});\n\n\t\tthis.raidPicker.raidSimUI.referenceChangeEmitter.on(() => {\n\t\t\tconst currentData = this.raidPicker.raidSimUI.getCurrentData();\n\t\t\tconst referenceData = this.raidPicker.raidSimUI.getReferenceData();\n\n\t\t\tconst playerDps = currentData?.simResult.getDamageMetrics({ player: this.raidIndex }).avg || 0;\n\t\t\tconst referenceDps = referenceData?.simResult.getDamageMetrics({ player: this.raidIndex }).avg || 0;\n\n\t\t\tif (playerDps == 0 && referenceDps == 0) {\n\t\t\t\tthis.dpsResultElem.textContent = '';\n\t\t\t\tthis.referenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.dpsResultElem.textContent = playerDps.toFixed(1);\n\n\t\t\tif (!referenceData) {\n\t\t\t\tthis.referenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tformatDeltaTextElem(this.referenceDeltaElem, referenceDps, playerDps, 1);\n\t\t});\n\n\t\tthis.update();\n\t}\n\n\tsetPlayer(eventID: EventID, newPlayer: Player<any> | BuffBot | null, dragType: DragType) {\n\t\tif (newPlayer == this.player) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.dpsResultElem.textContent = '';\n\t\tthis.referenceDeltaElem.textContent = '';\n\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.player = newPlayer;\n\t\t\tif (newPlayer instanceof BuffBot) {\n\t\t\t\tthis.partyPicker.party.setPlayer(eventID, this.index, null);\n\t\t\t\tnewPlayer.setRaidIndex(eventID, this.raidIndex);\n\t\t\t} else if (newPlayer instanceof Player) {\n\t\t\t\tthis.partyPicker.party.setPlayer(eventID, this.index, newPlayer);\n\n\t\t\t\tif (dragType == DragType.New) {\n\t\t\t\t\tif (isTankSpec(newPlayer.spec)) {\n\t\t\t\t\t\tconst tanks = this.raidPicker.raid.getTanks();\n\t\t\t\t\t\tconst emptyIdx = tanks.findIndex(tank => this.raidPicker.raid.getPlayerFromRaidTarget(tank) == null);\n\t\t\t\t\t\tif (emptyIdx == -1) {\n\t\t\t\t\t\t\tif (tanks.length < 3) {\n\t\t\t\t\t\t\t\tthis.raidPicker.raid.setTanks(eventID, tanks.concat([newPlayer.makeRaidTarget()]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttanks[emptyIdx] = newPlayer.makeRaidTarget();\n\t\t\t\t\t\t\tthis.raidPicker.raid.setTanks(eventID, tanks);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// On creation, boomies should default to innervating themselves.\n\t\t\t\t\tif (newPlayer.spec == Spec.SpecBalanceDruid) {\n\t\t\t\t\t\tsetBalanceDruidSelfInnervate(eventID, newPlayer);\n\t\t\t\t\t} else if (newPlayer.spec == Spec.SpecSmitePriest) {\n\t\t\t\t\t\tsetSmitePriestSelfPI(eventID, newPlayer);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.partyPicker.party.setPlayer(eventID, this.index, newPlayer);\n\t\t\t\tthis.partyPicker.party.compChangeEmitter.emit(eventID);\n\t\t\t}\n\t\t});\n\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tif (this.player == null) {\n\t\t\tthis.rootElem.classList.add('empty');\n\t\t\tthis.rootElem.classList.remove('buff-bot');\n\t\t\tthis.rootElem.style.backgroundColor = 'black';\n\t\t\tthis.labelElem.setAttribute('draggable', 'false');\n\t\t\tthis.resultsElem.setAttribute('draggable', 'false');\n\t\t\tthis.nameElem.textContent = '';\n\t\t\tthis.nameElem.removeAttribute('contenteditable');\n\t\t} else if (this.player instanceof BuffBot) {\n\t\t\tthis.rootElem.classList.remove('empty');\n\t\t\tthis.rootElem.classList.add('buff-bot');\n\t\t\tthis.rootElem.style.backgroundColor = classColors[specToClass[this.player.spec]];\n\t\t\tthis.labelElem.setAttribute('draggable', 'true');\n\t\t\tthis.resultsElem.setAttribute('draggable', 'true');\n\t\t\tthis.nameElem.textContent = this.player.name;\n\t\t\tthis.nameElem.removeAttribute('contenteditable');\n\t\t\tthis.iconElem.src = this.player.settings.iconUrl;\n\t\t} else {\n\t\t\tthis.rootElem.classList.remove('empty');\n\t\t\tthis.rootElem.classList.remove('buff-bot');\n\t\t\tthis.rootElem.style.backgroundColor = this.player.getClassColor();\n\t\t\tthis.labelElem.setAttribute('draggable', 'true');\n\t\t\tthis.resultsElem.setAttribute('draggable', 'true');\n\t\t\tthis.nameElem.textContent = this.player.getName();\n\t\t\tthis.nameElem.setAttribute('contenteditable', '');\n\t\t\tthis.iconElem.src = this.player.getTalentTreeIcon();\n\t\t}\n\t}\n}\n\nclass PlayerEditorModal extends Component {\n\tconstructor(player: Player<any>) {\n\t\tsuper(document.body, 'player-editor-modal');\n\n\t\tthis.rootElem.id = 'playerEditorModal';\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<div class=\"player-editor within-raid-sim\">\n\t\t\t</div>\n\t\t`;\n\n\t\tnew CloseButton(this.rootElem, () => {\n\t\t\t$('#playerEditorModal').bPopup().close();\n\t\t\tthis.rootElem.remove();\n\t\t});\n\n\t\tconst editorRoot = this.rootElem.getElementsByClassName('player-editor')[0] as HTMLElement;\n\t\tconst individualSim = specSimFactories[player.spec]!(editorRoot, player);\n\n\t\t$('#playerEditorModal').bPopup({\n\t\t\tcloseClass: 'player-editor-close',\n\t\t\tonClose: () => {\n\t\t\t\tthis.rootElem.remove();\n\t\t\t},\n\t\t});\n\t}\n}\n\nclass NewPlayerPicker extends Component {\n\treadonly raidPicker: RaidPicker;\n\n\tconstructor(parent: HTMLElement, raidPicker: RaidPicker) {\n\t\tsuper(parent, 'new-player-picker-root');\n\t\tthis.raidPicker = raidPicker;\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<div class=\"new-player-picker-controls\">\n\t\t\t\t<div class=\"faction-selector\"></div>\n\t\t\t\t<div class=\"phase-selector\"></div>\n\t\t\t</div>\n\t\t\t<div class=\"presets-container\"></div>\n\t\t\t<div class=\"buff-bots-container\">\n\t\t\t\t<div class=\"buff-bots-title\">\n\t\t\t\t\t<span class=\"buff-bots-title-text\">Buff Bots</span>\n\t\t\t\t\t<span class=\"buff-bots-tooltip fa fa-info-circle\"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\n\t\tconst factionSelector = new EnumPicker<NewPlayerPicker>(this.rootElem.getElementsByClassName('faction-selector')[0] as HTMLElement, this, {\n\t\t\tlabel: 'Faction',\n\t\t\tlabelTooltip: 'Default faction for newly-created players.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Alliance', value: Faction.Alliance },\n\t\t\t\t{ name: 'Horde', value: Faction.Horde },\n\t\t\t],\n\t\t\tchangedEvent: (picker: NewPlayerPicker) => this.raidPicker.raid.sim.factionChangeEmitter,\n\t\t\tgetValue: (picker: NewPlayerPicker) => this.raidPicker.raid.sim.getFaction(),\n\t\t\tsetValue: (eventID: EventID, picker: NewPlayerPicker, newValue: Faction) => {\n\t\t\t\tthis.raidPicker.raid.sim.setFaction(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst phaseSelector = new EnumPicker<NewPlayerPicker>(this.rootElem.getElementsByClassName('phase-selector')[0] as HTMLElement, this, {\n\t\t\tlabel: 'Phase',\n\t\t\tlabelTooltip: 'Newly-created players will start with approximate BIS gear from this phase.',\n\t\t\tvalues: [\n\t\t\t\t{ name: '1', value: 1 },\n\t\t\t\t// Presets aren't filled for most roles so disable these options for now.\n\t\t\t\t//{ name: '2', value: 2 },\n\t\t\t\t//{ name: '3', value: 3 },\n\t\t\t\t//{ name: '4', value: 4 },\n\t\t\t\t//{ name: '5', value: 5 },\n\t\t\t],\n\t\t\tchangedEvent: (picker: NewPlayerPicker) => this.raidPicker.raid.sim.phaseChangeEmitter,\n\t\t\tgetValue: (picker: NewPlayerPicker) => this.raidPicker.raid.sim.getPhase(),\n\t\t\tsetValue: (eventID: EventID, picker: NewPlayerPicker, newValue: number) => {\n\t\t\t\tthis.raidPicker.raid.sim.setPhase(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst presetsContainer = this.rootElem.getElementsByClassName('presets-container')[0] as HTMLElement;\n\t\tgetEnumValues(Class).forEach(wowClass => {\n\t\t\tif (wowClass == Class.ClassUnknown) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchingPresets = playerPresets.filter(preset => specToClass[preset.spec] == wowClass);\n\t\t\tif (matchingPresets.length == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst classPresetsContainer = document.createElement('div');\n\t\t\tclassPresetsContainer.classList.add('class-presets-container');\n\t\t\tpresetsContainer.appendChild(classPresetsContainer);\n\t\t\tclassPresetsContainer.style.backgroundColor = hexToRgba(classColors[wowClass as Class], 0.5);\n\n\t\t\tmatchingPresets.forEach(matchingPreset => {\n\t\t\t\tconst presetElem = document.createElement('div');\n\t\t\t\tpresetElem.classList.add('preset-picker');\n\t\t\t\tclassPresetsContainer.appendChild(presetElem);\n\n\t\t\t\tconst presetIconElem = document.createElement('img');\n\t\t\t\tpresetIconElem.classList.add('preset-picker-icon');\n\t\t\t\tpresetElem.appendChild(presetIconElem);\n\t\t\t\tpresetIconElem.src = matchingPreset.iconUrl;\n\t\t\t\ttippy(presetIconElem, {\n\t\t\t\t\t'content': matchingPreset.tooltip,\n\t\t\t\t\t'allowHTML': true,\n\t\t\t\t});\n\n\t\t\t\tpresetElem.setAttribute('draggable', 'true');\n\t\t\t\tpresetElem.ondragstart = event => {\n\t\t\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\t\tconst dragImage = new Image();\n\t\t\t\t\t\tdragImage.src = matchingPreset.iconUrl;\n\t\t\t\t\t\tevent.dataTransfer!.setDragImage(dragImage, 30, 30);\n\t\t\t\t\t\tevent.dataTransfer!.setData(\"text/plain\", \"\");\n\t\t\t\t\t\tevent.dataTransfer!.dropEffect = 'copy';\n\n\n\t\t\t\t\t\tconst newPlayer = new Player(matchingPreset.spec, this.raidPicker.raid.sim);\n\t\t\t\t\t\tnewPlayer.applySharedDefaults(eventID);\n\t\t\t\t\t\tnewPlayer.setRace(eventID, matchingPreset.defaultFactionRaces[this.raidPicker.getCurrentFaction()]);\n\t\t\t\t\t\tnewPlayer.setRotation(eventID, matchingPreset.rotation);\n\t\t\t\t\t\tnewPlayer.setTalentsString(eventID, matchingPreset.talents.talentsString);\n\t\t\t\t\t\tnewPlayer.setGlyphs(eventID, matchingPreset.talents.glyphs || Glyphs.create());\n\t\t\t\t\t\tnewPlayer.setSpecOptions(eventID, matchingPreset.specOptions);\n\t\t\t\t\t\tnewPlayer.setConsumes(eventID, matchingPreset.consumes);\n\t\t\t\t\t\tnewPlayer.setName(eventID, matchingPreset.defaultName);\n\t\t\t\t\t\tnewPlayer.setProfession1(eventID, matchingPreset.otherDefaults?.profession1 || Profession.Engineering);\n\t\t\t\t\t\tnewPlayer.setProfession2(eventID, matchingPreset.otherDefaults?.profession2 || Profession.Jewelcrafting);\n\t\t\t\t\t\tnewPlayer.setDistanceFromTarget(eventID, matchingPreset.otherDefaults?.distanceFromTarget || 0);\n\n\t\t\t\t\t\t// Need to wait because the gear might not be loaded yet.\n\t\t\t\t\t\tthis.raidPicker.raid.sim.waitForInit().then(() => {\n\t\t\t\t\t\t\tnewPlayer.setGear(\n\t\t\t\t\t\t\t\teventID,\n\t\t\t\t\t\t\t\tthis.raidPicker.raid.sim.lookupEquipmentSpec(\n\t\t\t\t\t\t\t\t\tmatchingPreset.defaultGear[this.raidPicker.getCurrentFaction()][this.raidPicker.getCurrentPhase()]));\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.raidPicker.setDragPlayer(newPlayer, NEW_PLAYER, DragType.New);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\n\t\tconst buffbotsTooltip = this.rootElem.getElementsByClassName('buff-bots-tooltip')[0] as HTMLElement;\n\t\ttippy(buffbotsTooltip, {\n\t\t\t'content': 'Buff bots do not do DPS or any actions at all, except to buff their raid/party members. They are used as placeholders for classes we haven\\'t implemented yet, or never will (e.g. healers) so that a proper raid environment can still be simulated.',\n\t\t\t'allowHTML': true,\n\t\t});\n\n\t\tconst buffbotsContainer = this.rootElem.getElementsByClassName('buff-bots-container')[0] as HTMLElement;\n\t\tgetEnumValues(Class).forEach(wowClass => {\n\t\t\tif (wowClass == Class.ClassUnknown) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchingBuffBots = buffBotPresets\n\t\t\t\t.filter(buffBot => specToClass[buffBot.spec] == wowClass)\n\t\t\t\t.filter(buffBot => !buffBot.deprecated);\n\t\t\tif (matchingBuffBots.length == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst classPresetsContainer = document.createElement('div');\n\t\t\tclassPresetsContainer.classList.add('class-presets-container');\n\t\t\tbuffbotsContainer.appendChild(classPresetsContainer);\n\t\t\tclassPresetsContainer.style.backgroundColor = hexToRgba(classColors[wowClass as Class], 0.5);\n\n\t\t\tmatchingBuffBots.forEach(matchingBuffBot => {\n\t\t\t\tconst presetElem = document.createElement('div');\n\t\t\t\tpresetElem.classList.add('preset-picker');\n\t\t\t\tpresetElem.classList.add('preset-picker-buff-bot');\n\t\t\t\tclassPresetsContainer.appendChild(presetElem);\n\n\t\t\t\tconst presetIconElem = document.createElement('img');\n\t\t\t\tpresetIconElem.classList.add('preset-picker-icon');\n\t\t\t\tpresetElem.appendChild(presetIconElem);\n\t\t\t\tpresetIconElem.src = matchingBuffBot.iconUrl;\n\t\t\t\ttippy(presetIconElem, {\n\t\t\t\t\t'content': matchingBuffBot.tooltip,\n\t\t\t\t\t'allowHTML': true,\n\t\t\t\t});\n\n\t\t\t\tpresetElem.setAttribute('draggable', 'true');\n\t\t\t\tpresetElem.ondragstart = event => {\n\t\t\t\t\tconst dragImage = new Image();\n\t\t\t\t\tdragImage.src = matchingBuffBot.iconUrl;\n\t\t\t\t\tevent.dataTransfer!.setDragImage(dragImage, 30, 30);\n\t\t\t\t\tevent.dataTransfer!.setData(\"text/plain\", \"\");\n\t\t\t\t\tevent.dataTransfer!.dropEffect = 'copy';\n\n\t\t\t\t\tthis.raidPicker.setDragPlayer(new BuffBot(matchingBuffBot.buffBotId, this.raidPicker.raidSimUI.sim), NEW_PLAYER, DragType.New);\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n}\n\nfunction setBalanceDruidSelfInnervate(eventID: EventID, player: Player<any>) {\n\tconst newOptions = player.getSpecOptions() as BalanceDruidOptions;\n\tnewOptions.innervateTarget = newRaidTarget(player.getRaidIndex());\n\tplayer.setSpecOptions(eventID, newOptions);\n}\nfunction setSmitePriestSelfPI(eventID: EventID, player: Player<any>) {\n\tconst newOptions = player.getSpecOptions() as SmitePriestOptions;\n\tnewOptions.powerInfusionTarget = newRaidTarget(player.getRaidIndex());\n\tplayer.setSpecOptions(eventID, newOptions);\n}\n","import { Component } from '../core/components/component.js';\nimport { Input, InputConfig } from '../core/components/input.js';\nimport { RaidTargetPicker } from '../core/components/raid_target_picker.js';\nimport { Player } from '../core/player.js';\nimport { Raid } from '../core/raid.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { Class } from '../core/proto/common.js';\nimport { RaidTarget } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { emptyRaidTarget } from '../core/proto_utils/utils.js';\n\nimport { RaidSimUI } from './raid_sim_ui.js';\n\ndeclare var tippy: any;\n\nconst MAX_TANKS = 4;\n\nexport class TanksPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'tanks-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<fieldset class=\"tanks-picker-container settings-section\">\n\t\t\t\t<legend>TANKS</legend>\n\t\t\t</fieldset>\n\t\t`;\n\n\t\tconst tanksContainer = this.rootElem.getElementsByClassName('tanks-picker-container')[0] as HTMLElement;\n\t\tconst raid = this.raidSimUI.sim.raid;\n\n\t\tfor (let i = 0; i < MAX_TANKS; i++) {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('tank-picker-row');\n\t\t\ttanksContainer.appendChild(row);\n\n\t\t\tconst sourceElem = document.createElement('span');\n\t\t\tsourceElem.textContent = i == 0 ? 'MAIN TANK' : `TANK ${i + 1}`;\n\t\t\tsourceElem.classList.add('tank-picker-label');\n\t\t\trow.appendChild(sourceElem);\n\n\t\t\tconst arrow = document.createElement('span');\n\t\t\tarrow.classList.add('fa', 'fa-arrow-right');\n\t\t\trow.appendChild(arrow);\n\n\t\t\tconst tankIndex = i;\n\t\t\tconst raidTargetPicker = new RaidTargetPicker<Raid>(row, raid, raid, {\n\t\t\t\textraCssClasses: [\n\t\t\t\t\t'tank-picker',\n\t\t\t\t],\n\t\t\t\tnoTargetLabel: 'Unassigned',\n\t\t\t\tcompChangeEmitter: raid.compChangeEmitter,\n\n\t\t\t\tchangedEvent: (raid: Raid) => raid.tanksChangeEmitter,\n\t\t\t\tgetValue: (raid: Raid) => raid.getTanks()[tankIndex] || emptyRaidTarget(),\n\t\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: RaidTarget) => {\n\t\t\t\t\tconst tanks = raid.getTanks();\n\t\t\t\t\tfor (let i = 0; i < tankIndex; i++) {\n\t\t\t\t\t\tif (!tanks[i]) {\n\t\t\t\t\t\t\ttanks.push(emptyRaidTarget());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttanks[tankIndex] = newValue;\n\t\t\t\t\traid.setTanks(eventID, tanks);\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n}\n","import { BooleanPicker } from \"../core/components/boolean_picker.js\";\nimport { DetailedResults } from \"../core/components/detailed_results.js\";\nimport { EncounterPicker } from \"../core/components/encounter_picker.js\";\nimport { LogRunner } from \"../core/components/log_runner.js\";\nimport { addRaidSimAction, RaidSimResultsManager, ReferenceData } from \"../core/components/raid_sim_action.js\";\nimport { SavedDataManager } from \"../core/components/saved_data_manager.js\";\nimport { SettingsMenu } from \"../core/components/settings_menu.js\";\n\nimport * as Tooltips from \"../core/constants/tooltips.js\";\nimport { Encounter } from \"../core/encounter.js\";\nimport { Player } from \"../core/player.js\";\nimport { Raid as RaidProto } from \"../core/proto/api.js\";\nimport { Class, Encounter as EncounterProto, Faction, Stat, TristateEffect } from \"../core/proto/common.js\";\nimport { Blessings } from \"../core/proto/paladin.js\";\nimport { BlessingsAssignments, BuffBot as BuffBotProto, RaidSimSettings, SavedEncounter, SavedRaid } from \"../core/proto/ui.js\";\nimport { playerToSpec } from \"../core/proto_utils/utils.js\";\nimport { Raid } from \"../core/raid.js\";\nimport { Sim } from \"../core/sim.js\";\nimport { SimUI } from \"../core/sim_ui.js\";\nimport { LaunchStatus, raidSimLaunched } from '../core/launched_sims.js';\nimport { EventID, TypedEvent } from \"../core/typed_event.js\";\n\nimport { AssignmentsPicker } from \"./assignments_picker.js\";\nimport { BlessingsPicker } from \"./blessings_picker.js\";\nimport { BuffBot } from \"./buff_bot.js\";\nimport { newRaidExporters, newRaidImporters } from \"./import_export.js\";\nimport { implementedSpecs } from \"./presets.js\";\nimport { RaidPicker } from \"./raid_picker.js\";\nimport { TanksPicker } from \"./tanks_picker.js\";\n\ndeclare var Muuri: any;\ndeclare var tippy: any;\ndeclare var pako: any;\n\nexport interface RaidSimConfig {\n\tknownIssues?: Array<string>,\n}\n\nconst extraKnownIssues: Array<string> = [\n\t//'We\\'re still missing implementations for many specs. If you\\'d like to help us out, check out our <a href=\"https://github.com/wowsims/wotlk\">Github project</a> or <a href=\"https://discord.gg/jJMPr9JWwx\">join our discord</a>!',\n];\n\nexport class RaidSimUI extends SimUI {\n\tprivate readonly config: RaidSimConfig;\n\tprivate raidSimResultsManager: RaidSimResultsManager | null = null;\n\tpublic raidPicker: RaidPicker | null = null;\n\tprivate blessingsPicker: BlessingsPicker | null = null;\n\n\t// Emits when the raid comp changes. Includes changes to buff bots.\n\treadonly compChangeEmitter = new TypedEvent<void>();\n\treadonly changeEmitter = new TypedEvent<void>();\n\n\treadonly referenceChangeEmitter = new TypedEvent<void>();\n\n\tprivate settingsMuuri: any;\n\n\tconstructor(parentElem: HTMLElement, config: RaidSimConfig) {\n\t\tsuper(parentElem, new Sim(), {\n\t\t\tspec: null,\n\t\t\tlaunchStatus: raidSimLaunched ? LaunchStatus.Launched : LaunchStatus.Unlaunched,\n\t\t\tknownIssues: (config.knownIssues || []).concat(extraKnownIssues),\n\t\t});\n\t\tthis.rootElem.classList.add('raid-sim-ui');\n\n\t\tthis.config = config;\n\t\tthis.settingsMuuri = null;\n\n\t\tthis.sim.raid.compChangeEmitter.on(eventID => this.compChangeEmitter.emit(eventID));\n\t\tthis.sim.setModifyRaidProto(raidProto => this.modifyRaidProto(raidProto));\n\n\t\t[\n\t\t\tthis.compChangeEmitter,\n\t\t\tthis.sim.changeEmitter,\n\t\t].forEach(emitter => emitter.on(eventID => this.changeEmitter.emit(eventID)));\n\n\t\tthis.sim.waitForInit().then(() => this.loadSettings());\n\n\t\tthis.addSidebarComponents();\n\t\tthis.addTopbarComponents();\n\t\tthis.addRaidTab();\n\t\tthis.addSettingsTab();\n\t\tthis.addDetailedResultsTab();\n\t\tthis.addLogTab();\n\n\t\tthis.changeEmitter.on(() => this.recomputeSettingsLayout());\n\t}\n\n\tprivate loadSettings() {\n\t\tconst initEventID = TypedEvent.nextEventID();\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tlet loadedSettings = false;\n\n\t\t\tconst savedSettings = window.localStorage.getItem(this.getSettingsStorageKey());\n\t\t\tif (savedSettings != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconst settings = RaidSimSettings.fromJsonString(savedSettings);\n\t\t\t\t\tthis.fromProto(initEventID, settings);\n\t\t\t\t\tloadedSettings = true;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('Failed to parse saved settings: ' + e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!loadedSettings) {\n\t\t\t\tthis.applyDefaults(initEventID);\n\t\t\t}\n\n\t\t\t// This needs to go last so it doesn't re-store things as they are initialized.\n\t\t\tthis.changeEmitter.on(eventID => {\n\t\t\t\tconst jsonStr = RaidSimSettings.toJsonString(this.toProto());\n\t\t\t\twindow.localStorage.setItem(this.getSettingsStorageKey(), jsonStr);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate addSidebarComponents() {\n\t\tthis.raidSimResultsManager = addRaidSimAction(this);\n\t\tthis.raidSimResultsManager.changeEmitter.on(eventID => this.referenceChangeEmitter.emit(eventID));\n\t}\n\n\tprivate addTopbarComponents() {\n\t\tthis.addToolbarItem(newRaidImporters(this));\n\t\tthis.addToolbarItem(newRaidExporters(this));\n\n\t\tconst settingsMenu = document.createElement('span');\n\t\tsettingsMenu.classList.add('fas', 'fa-cog');\n\t\ttippy(settingsMenu, {\n\t\t\t'content': 'Settings',\n\t\t\t'allowHTML': true,\n\t\t});\n\t\tsettingsMenu.addEventListener('click', event => {\n\t\t\tnew SettingsMenu(this.rootElem, this);\n\t\t});\n\t\tthis.addToolbarItem(settingsMenu);\n\t}\n\n\tprivate addRaidTab() {\n\t\tthis.addTab('RAID', 'raid-tab', `\n\t\t\t<div class=\"raid-picker\">\n\t\t\t</div>\n\t\t\t<div class=\"saved-raids-div\">\n\t\t\t\t<div class=\"saved-raids-manager\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`);\n\n\t\tthis.raidPicker = new RaidPicker(this.rootElem.getElementsByClassName('raid-picker')[0] as HTMLElement, this);\n\n\t\tconst savedRaidManager = new SavedDataManager<RaidSimUI, SavedRaid>(this.rootElem.getElementsByClassName('saved-raids-manager')[0] as HTMLElement, this, {\n\t\t\tlabel: 'Raid',\n\t\t\tstorageKey: this.getSavedRaidStorageKey(),\n\t\t\tgetData: (raidSimUI: RaidSimUI) => SavedRaid.create({\n\t\t\t\traid: this.sim.raid.toProto(),\n\t\t\t\tbuffBots: this.getBuffBots().map(b => b.toProto()),\n\t\t\t\tblessings: this.blessingsPicker!.getAssignments(),\n\t\t\t\tfaction: this.sim.getFaction(),\n\t\t\t\tphase: this.sim.getPhase(),\n\t\t\t}),\n\t\t\tsetData: (eventID: EventID, raidSimUI: RaidSimUI, newRaid: SavedRaid) => {\n\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\tthis.sim.raid.fromProto(eventID, newRaid.raid || RaidProto.create());\n\t\t\t\t\tthis.raidPicker!.setBuffBots(eventID, newRaid.buffBots);\n\t\t\t\t\tthis.blessingsPicker!.setAssignments(eventID, newRaid.blessings || BlessingsAssignments.create());\n\t\t\t\t\tif (newRaid.faction) this.sim.setFaction(eventID, newRaid.faction);\n\t\t\t\t\tif (newRaid.phase) this.sim.setPhase(eventID, newRaid.phase);\n\t\t\t\t});\n\t\t\t},\n\t\t\tchangeEmitters: [this.changeEmitter, this.sim.changeEmitter],\n\t\t\tequals: (a: SavedRaid, b: SavedRaid) => {\n\t\t\t\treturn SavedRaid.equals(a, b);\n\t\t\t},\n\t\t\ttoJson: (a: SavedRaid) => SavedRaid.toJson(a),\n\t\t\tfromJson: (obj: any) => SavedRaid.fromJson(obj),\n\t\t});\n\t\tthis.sim.waitForInit().then(() => {\n\t\t\tsavedRaidManager.loadUserData();\n\t\t});\n\t}\n\n\tprivate addSettingsTab() {\n\t\tthis.addTab('SETTINGS', 'raid-settings-tab', `\n\t\t\t<div class=\"raid-settings-sections\">\n\t\t\t\t<div class=\"settings-section-container raid-settings-section-container\">\n\t\t\t\t\t<fieldset class=\"settings-section raid-encounter-section\">\n\t\t\t\t\t\t<legend>Encounter</legend>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"settings-section-container blessings-section-container\">\n\t\t\t\t\t<fieldset class=\"settings-section blessings-section\">\n\t\t\t\t\t\t<legend>Blessings</legend>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"settings-section-container assignments-section-container\">\n\t\t\t\t</div>\n\t\t\t\t<div class=\"settings-section-container tanks-section-container\">\n\t\t\t\t</div>\n\t\t\t\t<div class=\"settings-section-container raid-settings-section-container\">\n\t\t\t\t\t<fieldset class=\"settings-section other-options-section\">\n\t\t\t\t\t\t<legend>Other Options</legend>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"settings-bottom-bar\">\n\t\t\t\t<div class=\"saved-encounter-manager\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`);\n\n\t\tconst encounterSectionElem = this.rootElem.getElementsByClassName('raid-encounter-section')[0] as HTMLElement;\n\t\tnew EncounterPicker(encounterSectionElem, this.sim.encounter, {\n\t\t\tshowExecuteProportion: true,\n\t\t}, this);\n\t\tconst savedEncounterManager = new SavedDataManager<Encounter, SavedEncounter>(this.rootElem.getElementsByClassName('saved-encounter-manager')[0] as HTMLElement, this.sim.encounter, {\n\t\t\tlabel: 'Encounter',\n\t\t\tstorageKey: this.getSavedEncounterStorageKey(),\n\t\t\tgetData: (encounter: Encounter) => SavedEncounter.create({ encounter: encounter.toProto() }),\n\t\t\tsetData: (eventID: EventID, encounter: Encounter, newEncounter: SavedEncounter) => encounter.fromProto(eventID, newEncounter.encounter!),\n\t\t\tchangeEmitters: [this.sim.encounter.changeEmitter],\n\t\t\tequals: (a: SavedEncounter, b: SavedEncounter) => SavedEncounter.equals(a, b),\n\t\t\ttoJson: (a: SavedEncounter) => SavedEncounter.toJson(a),\n\t\t\tfromJson: (obj: any) => SavedEncounter.fromJson(obj),\n\t\t});\n\t\tthis.sim.waitForInit().then(() => {\n\t\t\tsavedEncounterManager.loadUserData();\n\t\t});\n\n\t\tconst blessingsSection = this.rootElem.getElementsByClassName('blessings-section')[0] as HTMLElement;\n\t\tthis.blessingsPicker = new BlessingsPicker(blessingsSection, this);\n\t\tthis.blessingsPicker.changeEmitter.on(eventID => this.changeEmitter.emit(eventID));\n\t\ttippy(blessingsSection, {\n\t\t\tcontent: Tooltips.BLESSINGS_SECTION,\n\t\t\tallowHTML: true,\n\t\t\tplacement: 'left',\n\t\t});\n\n\t\tconst assignmentsPicker = new AssignmentsPicker(this.rootElem.getElementsByClassName('assignments-section-container')[0] as HTMLElement, this);\n\t\tconst tanksPicker = new TanksPicker(this.rootElem.getElementsByClassName('tanks-section-container')[0] as HTMLElement, this);\n\n\t\tconst otherOptionsSectionElem = this.rootElem.getElementsByClassName('other-options-section')[0] as HTMLElement;\n\t\t//new BooleanPicker(otherOptionsSectionElem, this.sim.raid, {\n\t\t//\tlabel: 'Stagger Stormstrikes',\n\t\t//\tlabelTooltip: 'When there are multiple Enhancement Shaman in the raid, causes them to coordinate their Stormstrike casts for optimal SS charge usage.',\n\t\t//\tchangedEvent: (raid: Raid) => raid.staggerStormstrikesChangeEmitter,\n\t\t//\tgetValue: (raid: Raid) => raid.getStaggerStormstrikes(),\n\t\t//\tsetValue: (eventID: EventID, raid: Raid, newValue: boolean) => {\n\t\t//\t\traid.setStaggerStormstrikes(eventID, newValue);\n\t\t//\t},\n\t\t//});\n\n\t\t// Init Muuri layout only when settings tab is clicked, because it needs the elements\n\t\t// to be shown so it can calculate sizes.\n\t\t(this.rootElem.getElementsByClassName('raid-settings-tab-tab')[0] as HTMLElement)!.addEventListener('click', event => {\n\t\t\tif (this.settingsMuuri == null) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.settingsMuuri = new Muuri('.raid-settings-sections');\n\t\t\t\t}, 200); // Magic amount of time before Muuri init seems to work\n\t\t\t}\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.recomputeSettingsLayout();\n\t\t\t}, 200);\n\t\t});\n\t}\n\n\tprivate addDetailedResultsTab() {\n\t\tthis.addTab('DETAILED RESULTS', 'detailed-results-tab', `\n\t\t\t<div class=\"detailed-results\">\n\t\t\t</div>\n\t\t`);\n\n\t\tconst detailedResults = new DetailedResults(this.rootElem.getElementsByClassName('detailed-results')[0] as HTMLElement, this, this.raidSimResultsManager!);\n\t}\n\n\tprivate addLogTab() {\n\t\tthis.addTab('LOG', 'log-tab', `\n\t\t\t<div class=\"log-runner\">\n\t\t\t</div>\n\t\t`);\n\n\t\tconst logRunner = new LogRunner(this.rootElem.getElementsByClassName('log-runner')[0] as HTMLElement, this);\n\t}\n\n\tprivate recomputeSettingsLayout() {\n\t\tif (this.settingsMuuri) {\n\t\t\t//this.settingsMuuri.refreshItems();\n\t\t}\n\t\twindow.dispatchEvent(new Event('resize'));\n\t}\n\n\tprivate modifyRaidProto(raidProto: RaidProto) {\n\t\t// Invoke all the buff bot callbacks.\n\t\tthis.getBuffBots().forEach(buffBot => {\n\t\t\tconst partyProto = raidProto.parties[buffBot.getPartyIndex()];\n\t\t\tif (!partyProto) {\n\t\t\t\tthrow new Error('No party proto for party index: ' + buffBot.getPartyIndex());\n\t\t\t}\n\t\t\tbuffBot.settings.modifyRaidProto(buffBot, raidProto, partyProto);\n\t\t});\n\n\t\t// Apply blessings.\n\t\tconst numPaladins = this.getClassCount(Class.ClassPaladin);\n\t\tconst blessingsAssignments = this.blessingsPicker!.getAssignments();\n\t\timplementedSpecs.forEach(spec => {\n\t\t\tconst playerProtos = raidProto.parties\n\t\t\t\t.map(party => party.players.filter(player => player.class != Class.ClassUnknown && playerToSpec(player) == spec))\n\t\t\t\t.flat();\n\n\t\t\tblessingsAssignments.paladins.forEach((paladin, i) => {\n\t\t\t\tif (i >= numPaladins) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (paladin.blessings[spec] == Blessings.BlessingOfKings) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfKings = true);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfMight) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfMight = TristateEffect.TristateEffectImproved);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfWisdom) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfWisdom = TristateEffect.TristateEffectImproved);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfSanctuary) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfSanctuary = true);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tgetCurrentData(): ReferenceData | null {\n\t\tif (this.raidSimResultsManager) {\n\t\t\treturn this.raidSimResultsManager.getCurrentData();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetReferenceData(): ReferenceData | null {\n\t\tif (this.raidSimResultsManager) {\n\t\t\treturn this.raidSimResultsManager.getReferenceData();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetClassCount(playerClass: Class): number {\n\t\treturn this.sim.raid.getClassCount(playerClass)\n\t\t\t+ this.getBuffBots()\n\t\t\t\t.filter(buffBot => buffBot.getClass() == playerClass).length;\n\t}\n\n\tgetBuffBots(): Array<BuffBot> {\n\t\treturn this.raidPicker!.getBuffBots();\n\t}\n\n\tsetBuffBots(eventID: EventID, buffBotProtos: BuffBotProto[]): void {\n\t\tthis.raidPicker!.setBuffBots(eventID, buffBotProtos);\n\t}\n\n\tclearBuffBots(eventID: EventID): void {\n\t\tthis.raidPicker!.setBuffBots(eventID, []);\n\t}\n\n\tgetPlayersAndBuffBots(): Array<Player<any> | BuffBot | null> {\n\t\tconst players = this.sim.raid.getPlayers();\n\t\tconst buffBots = this.getBuffBots();\n\n\t\tconst playersAndBuffBots: Array<Player<any> | BuffBot | null> = players.slice();\n\t\tbuffBots.forEach(buffBot => {\n\t\t\tplayersAndBuffBots[buffBot.getRaidIndex()] = buffBot;\n\t\t});\n\n\t\treturn playersAndBuffBots;\n\t}\n\n\tapplyDefaults(eventID: EventID) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.sim.raid.fromProto(eventID, RaidProto.create());\n\t\t\tthis.sim.encounter.applyDefaults(eventID);\n\t\t\tthis.sim.applyDefaults(eventID, true, true);\n\t\t\tthis.sim.setShowDamageMetrics(eventID, true);\n\t\t});\n\t}\n\n\ttoProto(): RaidSimSettings {\n\t\treturn RaidSimSettings.create({\n\t\t\tsettings: this.sim.toProto(),\n\t\t\traid: this.sim.raid.toProto(true),\n\t\t\tbuffBots: this.getBuffBots().map(b => b.toProto()),\n\t\t\tblessings: this.blessingsPicker!.getAssignments(),\n\t\t\tencounter: this.sim.encounter.toProto(),\n\t\t});\n\t}\n\n\ttoLink(): string {\n\t\tconst proto = this.toProto();\n\t\t// When sharing links, people generally don't intend to share settings.\n\t\tproto.settings = undefined;\n\n\t\tconst protoBytes = RaidSimSettings.toBinary(proto);\n\t\tconst deflated = pako.deflate(protoBytes, { to: 'string' });\n\t\tconst encoded = btoa(String.fromCharCode(...deflated));\n\n\t\tconst linkUrl = new URL(window.location.href);\n\t\tlinkUrl.hash = encoded;\n\t\treturn linkUrl.toString();\n\t}\n\n\tfromProto(eventID: EventID, settings: RaidSimSettings) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tif (settings.settings) {\n\t\t\t\tthis.sim.fromProto(eventID, settings.settings);\n\t\t\t}\n\t\t\tthis.sim.raid.fromProto(eventID, settings.raid || RaidProto.create());\n\t\t\tthis.sim.encounter.fromProto(eventID, settings.encounter || EncounterProto.create());\n\t\t\tthis.raidPicker!.setBuffBots(eventID, settings.buffBots);\n\t\t\tthis.blessingsPicker!.setAssignments(eventID, settings.blessings || BlessingsAssignments.create());\n\t\t});\n\t}\n\n\tclearRaid(eventID: EventID) {\n\t\tthis.sim.raid.clear(eventID);\n\t\tthis.clearBuffBots(eventID);\n\t}\n\n\t// Returns the actual key to use for local storage, based on the given key part and the site context.\n\tgetStorageKey(keyPart: string): string {\n\t\treturn '__wotlk_raid__' + keyPart;\n\t}\n\n\tgetSavedRaidStorageKey(): string {\n\t\treturn this.getStorageKey('__savedRaid__');\n\t}\n}\n","import { RaidSimUI } from './raid_sim_ui.js';\n\nconst ui = new RaidSimUI(document.body, {});\n"],"names":["RaidTargetPicker","Input","constructor","parent","raid","modObj","config","super","this","rootElem","classList","add","curPlayer","getPlayerFromRaidTarget","getValue","curRaidTarget","getInputValue","noTargetOption","iconUrl","text","noTargetLabel","color","value","isDropdown","innerHTML","buttonElem","getElementsByClassName","dropdownElem","addEventListener","event","preventDefault","currentOptions","updateOptions","TypedEvent","nextEventID","compChangeEmitter","on","eventID","init","makeTargetOptions","playerOptions","getPlayers","filter","player","map","getTalentTreeIcon","getLabel","getClassColor","concat","forEach","option","appendChild","makeOption","prevRaidTarget","RaidTarget","equals","setInputValue","inputChanged","data","makeOptionElem","getInputElem","makeRaidTarget","emptyRaidTarget","newValue","clone","optionData","find","static","optionContainer","document","createElement","style","backgroundColor","icon","src","label","textContent","specSimFactories","Spec","SpecDeathknight","parentElem","DeathknightSimUI","SpecBalanceDruid","BalanceDruidSimUI","SpecFeralDruid","FeralDruidSimUI","SpecFeralTankDruid","FeralTankDruidSimUI","SpecElementalShaman","ElementalShamanSimUI","SpecEnhancementShaman","EnhancementShamanSimUI","SpecHunter","HunterSimUI","SpecMage","MageSimUI","SpecRogue","RogueSimUI","SpecRetributionPaladin","RetributionPaladinSimUI","SpecProtectionPaladin","ProtectionPaladinSimUI","SpecShadowPriest","ShadowPriestSimUI","SpecSmitePriest","SmitePriestSimUI","SpecWarrior","WarriorSimUI","SpecProtectionWarrior","ProtectionWarriorSimUI","SpecWarlock","WarlockSimUI","playerPresets","spec","rotation","DeathknightPresets.DefaultFrostRotation","talents","DeathknightPresets.FrostTalents","specOptions","DeathknightPresets.DefaultFrostOptions","consumes","DeathknightPresets.DefaultConsumes","defaultName","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceHuman","Horde","RaceTroll","defaultGear","DeathknightPresets.P1_FROST_BIS_PRESET","gear","otherDefaults","DeathknightPresets.OtherDefaults","tooltip","talentTreeIcons","Class","ClassDeathknight","DeathknightPresets.DefaultUnholyRotation","DeathknightPresets.UnholyDualWieldTalents","DeathknightPresets.DefaultUnholyOptions","DeathknightPresets.P1_UNHOLY_DW_BIS_PRESET","DeathknightPresets.DefaultBloodRotation","DeathknightPresets.BloodTalents","DeathknightPresets.DefaultBloodOptions","DeathknightPresets.P1_BLOOD_BIS_PRESET","BalanceDruidPresets.DefaultRotation","BalanceDruidPresets.StandardTalents","BalanceDruidPresets.DefaultOptions","BalanceDruidPresets.DefaultConsumes","RaceNightElf","RaceTauren","BalanceDruidPresets.P1_PRESET","specNames","specIconsLarge","FeralDruidPresets.DefaultRotation","FeralDruidPresets.StandardTalents","FeralDruidPresets.DefaultOptions","FeralDruidPresets.DefaultConsumes","FeralDruidPresets.P1_PRESET","FeralTankDruidPresets.DefaultRotation","FeralTankDruidPresets.StandardTalents","FeralTankDruidPresets.DefaultOptions","FeralTankDruidPresets.DefaultConsumes","FeralTankDruidPresets.P1_PRESET","HunterPresets.DefaultRotation","HunterPresets.BeastMasteryTalents","HunterPresets.BMDefaultOptions","HunterPresets.DefaultConsumes","RaceOrc","HunterPresets.MM_P1_PRESET","ClassHunter","HunterPresets.MarksmanTalents","HunterPresets.DefaultOptions","HunterPresets.SurvivalTalents","HunterPresets.SV_P1_PRESET","MagePresets.DefaultArcaneRotation","MagePresets.ArcaneTalents","MagePresets.DefaultArcaneOptions","MagePresets.DefaultArcaneConsumes","RaceGnome","MagePresets.P1_ARCANE_PRESET","ClassMage","MagePresets.DefaultFireRotation","MagePresets.FireTalents","MagePresets.DefaultFireOptions","MagePresets.DefaultFireConsumes","MagePresets.P1_FIRE_PRESET","MagePresets.DefaultFrostRotation","MagePresets.FrostTalents","MagePresets.DefaultFrostOptions","MagePresets.DefaultFrostConsumes","MagePresets.P1_FROST_PRESET","RoguePresets.DefaultRotation","RoguePresets.CombatTalents","RoguePresets.DefaultOptions","RoguePresets.DefaultConsumes","RoguePresets.P1_PRESET_COMBAT","ElementalShamanPresets.DefaultRotation","ElementalShamanPresets.StandardTalents","ElementalShamanPresets.DefaultOptions","ElementalShamanPresets.DefaultConsumes","RaceDraenei","ElementalShamanPresets.P1_PRESET","EnhancementShamanPresets.DefaultRotation","EnhancementShamanPresets.StandardTalents","EnhancementShamanPresets.DefaultOptions","EnhancementShamanPresets.DefaultConsumes","EnhancementShamanPresets.P1_PRESET","ShadowPriestPresets.DefaultRotation","ShadowPriestPresets.StandardTalents","ShadowPriestPresets.DefaultOptions","ShadowPriestPresets.DefaultConsumes","RaceDwarf","RaceUndead","ShadowPriestPresets.P1_PRESET","SmitePriestPresets.DefaultRotation","SmitePriestPresets.StandardTalents","SmitePriestPresets.DefaultOptions","SmitePriestPresets.DefaultConsumes","SmitePriestPresets.P1_PRESET","WarriorPresets.ArmsRotation","WarriorPresets.ArmsTalents","WarriorPresets.DefaultOptions","WarriorPresets.DefaultConsumes","WarriorPresets.P1_ARMS_PRESET","ClassWarrior","WarriorPresets.DefaultRotation","WarriorPresets.FuryTalents","WarriorPresets.P1_FURY_PRESET","ProtectionWarriorPresets.DefaultRotation","ProtectionWarriorPresets.StandardTalents","ProtectionWarriorPresets.DefaultOptions","ProtectionWarriorPresets.DefaultConsumes","ProtectionWarriorPresets.P1_BALANCED_PRESET","RetributionPaladinPresets.DefaultRotation","RetributionPaladinPresets.AuraMasteryTalents","RetributionPaladinPresets.DefaultOptions","RetributionPaladinPresets.DefaultConsumes","RaceBloodElf","RetributionPaladinPresets.P1_PRESET","RetributionPaladinPresets.P2_PRESET","RetributionPaladinPresets.P3_PRESET","RetributionPaladinPresets.P4_PRESET","RetributionPaladinPresets.P5_PRESET","ClassPaladin","ProtectionPaladinPresets.DefaultRotation","ProtectionPaladinPresets.GenericAoeTalents","ProtectionPaladinPresets.DefaultOptions","ProtectionPaladinPresets.DefaultConsumes","ProtectionPaladinPresets.P1_PRESET","WarlockPresets.DestructionRotation","WarlockPresets.DestructionTalents","WarlockPresets.DestructionOptions","WarlockPresets.DefaultConsumes","WarlockPresets.P1_Preset_Demo_Destro","WarlockPresets.P1_PreBiS_14","WarlockPresets.OtherDefaults","ClassWarlock","WarlockPresets.AfflictionRotation","WarlockPresets.AfflictionTalents","WarlockPresets.AfflictionOptions","WarlockPresets.P1_Preset_Affliction","WarlockPresets.P1_PreBiS_11","WarlockPresets.DemonologyRotation","WarlockPresets.DemonologyTalents","WarlockPresets.DemonologyOptions","implementedSpecs","Set","preset","buffBotPresets","buffBotId","deprecated","name","modifyRaidProto","buffBot","raidProto","partyProto","buffs","giftOfTheWild","Math","max","TristateEffect","TristateEffectRegular","thorns","debuffs","faerieFire","leaderOfThePack","innervateIndex","getInnervateAssignment","targetIndex","NO_TARGET","partyIndex","floor","playerIndex","playerProto","parties","players","innervates","TristateEffectImproved","arcaneBrilliance","judgementOfWisdom","ClassPriest","shadowProtection","powerWordFortitude","divineSpirit","powerInfusionIndex","getPowerInfusionAssignment","powerInfusions","tricksOfTheTradeIndex","getTricksOfTheTradeAssignment","tricksOfTheTrades","ClassShaman","bloodlust","manaSpringTotem","manaTideTotems","woaSpecs","wfSpecs","woaVotes","wfVotes","specs","class","ClassUnknown","playerToSpec","playerSpec","includes","length","wrathOfAirTotem","windfuryTotem","battleShout","sunderArmor","bloodFrenzy","unholyFrenzyIndex","getUnholyFrenzyAssignment","unholyFrenzy","BuffBot","id","sim","raidIndex","innervateAssignment","powerInfusionAssignment","tricksOfTheTradeAssignment","unholyFrenzyAssignment","raidIndexChangeEmitter","innervateAssignmentChangeEmitter","powerInfusionAssignmentChangeEmitter","tricksOfTheTradeAssignmentChangeEmitter","unholyFrenzyAssignmentChangeEmitter","changeEmitter","settings","Error","updateSettings","emitter","emit","getParty","getPartyIndex","getRaidIndex","getClass","specToClass","classColors","setRaidIndex","newRaidIndex","freezeAllAndDo","setInnervateAssignment","newInnervateAssignment","setPowerInfusionAssignment","newPowerInfusionAssignment","setTricksOfTheTradeAssignment","newTricksOfTheTradeAssignment","setUnholyFrenzyAssignment","newUnholyFrenzyAssignment","toProto","BuffBotProto","create","fromProto","proto","newBuffBot","AssignmentsPicker","Component","raidSimUI","innervatesPicker","InnervatesPicker","powerInfusionsPicker","PowerInfusionsPicker","tricksOfTheTradesPicker","TricksOfTheTradesPicker","unholyFrenzyPicker","UnholyFrenzyPicker","AssignedBuffPicker","targetPickers","playersContainer","update","getTitle","toUpperCase","sourcePlayers","getSourcePlayers","display","sourcePlayer","sourcePlayerIndex","row","sourceElem","Player","arrow","raidTargetPicker","extraCssClasses","changedEvent","specOptionsChangeEmitter","getPlayerValue","setValue","setPlayerValue","getBuffBotValue","setBuffBotValue","targetPickerData","playerOrBot","targetPicker","targetPlayer","getPlayersAndBuffBots","ClassDruid","getSpecOptions","innervateTarget","newOptions","setSpecOptions","getTalents","powerInfusion","powerInfusionTarget","ClassRogue","tricksOfTheTradeTarget","hysteria","unholyFrenzyTarget","BlessingsPicker","assignments","BlessingsAssignments","makeDefaultBlessings","bodyElem","naturalSpecOrder","memeSpecs","paladinIndexes","Array","keys","cols","rows","headerCell","titleIcons","tippy","content","allowHTML","paladinIdx","cell","push","IconEnumPicker","numColumns","values","Blessings","BlessingUnknown","actionId","ActionId","fromSpellId","BlessingOfKings","BlessingOfMight","BlessingOfWisdom","BlessingOfSanctuary","a","b","zeroValue","picker","paladins","blessings","setNumPaladins","getClassCount","numPaladins","min","i","elem","remove","getAssignments","setAssignments","newAssignments","RaidJsonImporter","Importer","simUI","descriptionElem","onImport","RaidSimSettings","fromJsonString","close","RaidJsonExporter","Exporter","getData","JSON","stringify","toJson","RaidWCLImporter","queryCounter","getWCLBearerToken","fetch","method","headers","Authorization","btoa","body","URLSearchParams","grant_type","then","response","json","res","access_token","catch","err","console","error","queryWCL","query","token","Accept","queryURL","encodeURI","getURLInfo","url","urlInfo","reportID","fightID","fightIDIndex","indexOf","reportIDIndex","parseInt","substring","isNaN","toString","warn","getRateLimit","async","importLink","importButton","disabled","cursor","doImport","removeProperty","clearRaid","rateLimitStart","experimentalGenerateParties","pointsSpentThisHour","limitPerHour","info","reportDataQuery","reportData","errors","errorData","reduce","accumulator","message","alert","wclData","report","guildData","guild","playerData","playerDetails","entries","innervateData","powerInfusionData","tricksOfTheTradeData","tricksOfTheTrade","fight","fights","startTime","endTime","faction","raidPicker","getCurrentFaction","encounter","EncounterProto","duration","targets","closestEncounterPreset","getAllPresetEncounters","enc","path","mob","target","Target","defaultProto","RaidProto","buffBots","wclIDtoRaidIndex","Map","type","tempParties","from","MAX_NUM_PARTIES","PartyProto","sortByProperty","objArray","prop","isArray","slice","direct","arguments","propPath","split","sort","p","match","mappedPlayers","wclPlayer","WCLSimPlayer","processBuffCastData","buffCastData","playerCasts","cast","isBuffBot","wclPlayers","sortBuffBotsLast","assignPlayerToParty","raidParty","missing","MAX_PARTY_SIZE","getBuffBot","simPlayer","getPlayer","set","PlayerProto","isTankSpec","rt","get","tanks","partyAssigned","partyBuffPlayers","isPartyBuffer","partyFull","partyMembers","auraIDs","getPartyAuraIds","auraBuffQueries","auraID","auraTargets","auraQueryRes","playerAuras","table","auras","auraTarget","bands","index","uniqueAuraTargets","some","partyFound","raidMember","totalPartyMembers","findIndex","party","member","partyMember","isUndefined","isFull","targetID","targetRaidIndex","playerID","playerRaidIndex","raidPlayer","oneofKind","balanceDruid","options","feralDruid","feralTankDruid","setBuffBots","rateLimitEnd","debug","pointsResetIn","sortPriority","wclSpec","specType","specSortPriority","specFuncs","specTypeFunctions","matchingPreset","getMatchingPreset","withSpecProto","talentsCreate","talentsString","glyphs","nameToClass","equipment","getEquipment","race","applySharedDefaultsToProto","botID","buffBotNames","bot","feralDruidSpecAuras","specSpecificAuras","RetributionPaladin","GuardianDruid","WardenDruid","FeralDruid","BalanceDruid","RestorationDruid","MarksmanHunter","EnhancementShaman","classAuras","Paladin","Warrior","Warlock","reliableAuras","matchingPresets","presetIdx","distance","presetTalents","talentIdx","v","newDistance","acc","abs","guid","EquipmentSpec","items","item","ItemSpec","dbEnchant","getEnchantFlexible","permanentEnchant","enchant","gems","gemInfo","Warden","Guardian","Feral","Balance","Justicar","Retribution","Fury","Arms","Protection","Enhancement","Destruction","Affliction","Demonology","Marksman","Elemental","Survival","BeastMastery","Arcane","Fire","Frost","Assassination","Combat","Shadow","Smite","Champion","Gladiator","HolyPaladin","HolyPriest","DisciplinePriest","DreamstateDruid","RestorationShaman","RaidPicker","currentDragPlayer","currentDragPlayerFromIndex","currentDragType","raidViewer","partiesContainer","partyPickers","getParties","PartyPicker","newPlayerPickerRoot","newPlayerPicker","NewPlayerPicker","ondragend","clearDragPlayer","getFaction","getCurrentPhase","getPhase","getPlayerPicker","playerPickers","getPlayerPickers","getBuffBots","newBuffBotProtos","setPlayer","buffBotProto","setDragPlayer","fromIndex","PlayerPicker","dpsResultElem","referenceDeltaElem","referenceChangeEmitter","currentData","getCurrentData","referenceData","getReferenceData","partyDps","simResult","raidMetrics","dps","avg","referenceDps","toFixed","formatDeltaTextElem","partyPicker","newPlayer","labelElem","iconElem","nameElem","resultsElem","setName","keyCode","realPlayerPickers","pp","indexOfThis","focus","blur","emptyName","selection","window","getSelection","range","createRange","selectNodeContents","removeAllRanges","addRange","dragStart","dataTransfer","dropEffect","effectAllowed","iconSrc","dragImage","Image","setDragImage","playerDataProto","setData","String","fromCharCode","toBinary","ondragstart","copyElem","deleteElem","dragEnterCounter","ondragenter","ondragleave","ondragover","ondrop","dropData","dragType","fromPlayerPicker","myicon","binary","atob","bytes","Uint8Array","charCodeAt","fromBinary","localPlayer","editElem","PlayerEditorModal","playerDps","getDamageMetrics","getTanks","emptyIdx","tank","setTanks","newRaidTarget","setBalanceDruidSelfInnervate","setSmitePriestSelfPI","setAttribute","removeAttribute","getName","CloseButton","$","bPopup","editorRoot","closeClass","onClose","EnumPicker","labelTooltip","factionChangeEmitter","setFaction","phaseChangeEmitter","setPhase","presetsContainer","getEnumValues","wowClass","classPresetsContainer","hexToRgba","presetElem","presetIconElem","applySharedDefaults","setRace","setRotation","setTalentsString","setGlyphs","Glyphs","setConsumes","setProfession1","profession1","Profession","Engineering","setProfession2","profession2","Jewelcrafting","setDistanceFromTarget","distanceFromTarget","waitForInit","setGear","lookupEquipmentSpec","buffbotsTooltip","buffbotsContainer","matchingBuffBots","matchingBuffBot","TanksPicker","tanksContainer","tankIndex","tanksChangeEmitter","raid2","extraKnownIssues","SimUI","Sim","launchStatus","LaunchStatus","Unlaunched","knownIssues","raidSimResultsManager","blessingsPicker","settingsMuuri","setModifyRaidProto","loadSettings","addSidebarComponents","addTopbarComponents","addRaidTab","addSettingsTab","addDetailedResultsTab","addLogTab","recomputeSettingsLayout","initEventID","loadedSettings","savedSettings","localStorage","getItem","getSettingsStorageKey","e","applyDefaults","jsonStr","toJsonString","setItem","addRaidSimAction","addToolbarItem","importSettings","linkElem","menuElem","addMenuItem","experimental","onClick","itemElem","newRaidImporters","exportSettings","newRaidExporters","settingsMenu","SettingsMenu","addTab","savedRaidManager","SavedDataManager","storageKey","getSavedRaidStorageKey","SavedRaid","phase","newRaid","changeEmitters","fromJson","obj","loadUserData","encounterSectionElem","EncounterPicker","showExecuteProportion","savedEncounterManager","getSavedEncounterStorageKey","SavedEncounter","newEncounter","blessingsSection","Tooltips.BLESSINGS_SECTION","placement","setTimeout","Muuri","DetailedResults","LogRunner","dispatchEvent","Event","blessingsAssignments","playerProtos","flat","paladin","blessingOfKings","blessingOfMight","blessingOfWisdom","blessingOfSanctuary","playerClass","buffBotProtos","clearBuffBots","playersAndBuffBots","setShowDamageMetrics","toLink","protoBytes","deflated","pako","deflate","to","encoded","linkUrl","URL","location","href","hash","clear","getStorageKey","keyPart"],"mappings":"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"}