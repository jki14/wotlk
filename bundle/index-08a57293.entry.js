import"./modulepreload-polyfill-e60e1b44.chunk.js";import{s as e,U as t,V as s,W as a,X as n,Y as r,Z as i,_ as o,S as l,$ as c,a0 as d,a1 as m,a2 as p,a3 as h,a4 as u,a5 as g}from"./individual_sim_ui-458732be.chunk.js";import{J as f,T as y,g as E,ah as w,S as P,F as k,aY as b,cW as S,W as T,aF as I,cX as v,a3 as C,N as D,cY as A,aH as R,aG as B,cZ as U,K as x,P as F,c_ as O,c$ as L,aD as H,d0 as M,a6 as N,aA as W,d1 as z,E as G,h as V,d2 as _,f as j,d3 as J,d4 as K,d5 as q,aW as Y,a_ as X,a$ as Z,ae as Q,ap as ee,d6 as te,aU as se,d7 as ae,b1 as ne,r as re,d8 as ie,be as oe,d9 as le,bk as ce}from"./raid_sim_action-9e0deda9.chunk.js";import{D as de,a as me,F as pe,b as he,c as ue,P as ge,O as fe,d as ye,U as Ee,e as we,f as Pe,g as ke,B as be,h as Se,i as Te}from"./sim-386779f8.chunk.js";import{B as Ie,D as ve,S as Ce,a as De,b as Ae,P as Re}from"./sim-335c1aff.chunk.js";import{F as Be,D as Ue,S as xe,a as Fe,b as Oe,P as Le}from"./sim-314760f1.chunk.js";import{F as He,D as Me,S as Ne,a as We,b as ze,P as Ge}from"./sim-2f54b254.chunk.js";import{E as Ve,D as _e,S as je,a as Je,b as $e,P as Ke}from"./sim-cc04fb9f.chunk.js";import{E as qe,D as Ye,S as Xe,a as Ze,b as Qe,P as et}from"./sim-2c4d0674.chunk.js";import{H as tt,D as st,B as at,a as nt,b as rt,M as it,c as ot,d as lt,S as ct,e as dt}from"./sim-3e814333.chunk.js";import{M as mt,D as pt,A as ht,a as ut,b as gt,P as ft,c as yt,F as Et,d as wt,e as Pt,f as kt,g as bt,h as St,i as Tt,j as It,k as vt}from"./sim-af7b7407.chunk.js";import{R as Ct,D as Dt,C as At,a as Rt,b as Bt,P as Ut}from"./sim-5e731760.chunk.js";import{R as xt,D as Ft,A as Ot,a as Lt,b as Ht,P as Mt,c as Nt,d as Wt,e as zt,f as Gt}from"./sim-5aa00f52.chunk.js";import{P as Vt,D as _t,G as jt,a as Jt,b as $t,c as Kt}from"./sim-2873398b.chunk.js";import{S as qt,D as Yt,a as Xt,b as Zt,c as Qt,P as es}from"./sim-11f01f46.chunk.js";import{S as ts,D as ss,a as as,b as ns,c as rs,P as is}from"./sim-cb80da94.chunk.js";import{W as os,A as ls,a as cs,D as ds,b as ms,P as ps,c as hs,F as us,d as gs}from"./sim-aed2738f.chunk.js";import{P as fs,D as ys,S as Es,a as ws,b as Ps,c as ks}from"./sim-235c409e.chunk.js";import{W as bs,D as Ss,a as Ts,b as Is,c as vs,P as Cs,d as Ds,O as As,A as Rs,e as Bs,f as Us,g as xs,h as Fs,i as Os,j as Ls,k as Hs}from"./sim-8fcdefc7.chunk.js";import"./totem_inputs-b67adc4c.chunk.js";class Ms extends f{constructor(e,t,s,a){super(e,"raid-target-picker-root",s,a),this.rootElem.classList.add("dropdown-root"),this.config=a,this.raid=t,this.curPlayer=this.raid.getPlayerFromRaidTarget(a.getValue(s)),this.curRaidTarget=this.getInputValue(),this.noTargetOption={iconUrl:"",text:a.noTargetLabel,color:"black",value:null,isDropdown:!0},this.rootElem.innerHTML='\n\t\t\t<div class="dropdown-button raid-target-picker-button"></div>\n\t\t\t<div class="dropdown-panel raid-target-picker-dropdown"></div>\n    ',this.buttonElem=this.rootElem.getElementsByClassName("raid-target-picker-button")[0],this.dropdownElem=this.rootElem.getElementsByClassName("raid-target-picker-dropdown")[0],this.buttonElem.addEventListener("click",(e=>{e.preventDefault()})),this.currentOptions=[],this.updateOptions(y.nextEventID()),a.compChangeEmitter.on((e=>{this.updateOptions(e)})),this.init()}makeTargetOptions(){const e=this.raid.getPlayers().filter((e=>null!=e)).map((e=>({iconUrl:e.getTalentTreeIcon(),text:e.getLabel(),color:e.getClassColor(),isDropdown:!0,value:e})));return[this.noTargetOption].concat(e)}updateOptions(e){this.currentOptions=this.makeTargetOptions(),this.dropdownElem.innerHTML="",this.currentOptions.forEach((e=>this.dropdownElem.appendChild(this.makeOption(e))));const t=this.curRaidTarget;this.curRaidTarget=this.getInputValue(),E.equals(t,this.curRaidTarget)?this.setInputValue(this.curRaidTarget):this.inputChanged(e)}makeOption(e){const t=Ms.makeOptionElem(e);return t.addEventListener("click",(t=>{t.preventDefault(),this.curPlayer=e.value,this.curRaidTarget=this.getInputValue(),this.inputChanged(y.nextEventID())})),t}getInputElem(){return this.buttonElem}getInputValue(){return this.curPlayer?this.curPlayer.makeRaidTarget():w()}setInputValue(e){this.curRaidTarget=E.clone(e),this.curPlayer=this.raid.getPlayerFromRaidTarget(this.curRaidTarget);const t=this.currentOptions.find((e=>e.value==this.curPlayer));t&&(this.buttonElem.innerHTML="",this.buttonElem.appendChild(Ms.makeOptionElem(t)))}static makeOptionElem(e){const t=document.createElement("div");t.classList.add("dropdown-option-container");const s=document.createElement("div");if(s.classList.add("raid-target-picker-option"),t.appendChild(s),e.isDropdown&&s.classList.add("dropdown-option"),e.color&&(s.style.backgroundColor=e.color),e.iconUrl){const t=document.createElement("img");t.src=e.iconUrl,t.classList.add("raid-target-picker-icon"),s.appendChild(t)}if(e.text){const t=document.createElement("span");t.textContent=e.text,t.classList.add("raid-target-picker-label"),s.appendChild(t)}return t}}const Ns={[P.SpecDeathknight]:(e,t)=>new de(e,t),[P.SpecBalanceDruid]:(e,t)=>new Ie(e,t),[P.SpecFeralDruid]:(e,t)=>new Be(e,t),[P.SpecFeralTankDruid]:(e,t)=>new He(e,t),[P.SpecElementalShaman]:(e,t)=>new Ve(e,t),[P.SpecEnhancementShaman]:(e,t)=>new qe(e,t),[P.SpecHunter]:(e,t)=>new tt(e,t),[P.SpecMage]:(e,t)=>new mt(e,t),[P.SpecRogue]:(e,t)=>new Ct(e,t),[P.SpecRetributionPaladin]:(e,t)=>new xt(e,t),[P.SpecProtectionPaladin]:(e,t)=>new Vt(e,t),[P.SpecShadowPriest]:(e,t)=>new qt(e,t),[P.SpecSmitePriest]:(e,t)=>new ts(e,t),[P.SpecWarrior]:(e,t)=>new os(e,t),[P.SpecProtectionWarrior]:(e,t)=>new fs(e,t),[P.SpecWarlock]:(e,t)=>new bs(e,t)},Ws=[{spec:P.SpecDeathknight,rotation:me,talents:pe.data,specOptions:he,consumes:ue,defaultName:"Frost DK",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceHuman,[k.Horde]:b.RaceTroll},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:ge.gear},[k.Horde]:{1:ge.gear}},otherDefaults:fe,tooltip:"Frost Death Knight",iconUrl:S[T.ClassDeathknight][1]},{spec:P.SpecDeathknight,rotation:ye,talents:Ee.data,specOptions:we,consumes:ue,defaultName:"DW Unholy DK",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceHuman,[k.Horde]:b.RaceTroll},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:Pe.gear},[k.Horde]:{1:Pe.gear}},otherDefaults:fe,tooltip:"Dual Wield Unholy DK",iconUrl:S[T.ClassDeathknight][2]},{spec:P.SpecDeathknight,rotation:ke,talents:be.data,specOptions:Se,consumes:ue,defaultName:"Blood Dps DK",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceHuman,[k.Horde]:b.RaceTroll},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:Te.gear},[k.Horde]:{1:Te.gear}},otherDefaults:fe,tooltip:"Blood Dps DK",iconUrl:S[T.ClassDeathknight][0]},{spec:P.SpecBalanceDruid,rotation:ve,talents:Ce.data,specOptions:De,consumes:Ae,defaultName:"Balance Druid",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceNightElf,[k.Horde]:b.RaceTauren},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:Re.gear},[k.Horde]:{1:Re.gear}},tooltip:I[P.SpecBalanceDruid],iconUrl:v[P.SpecBalanceDruid]},{spec:P.SpecFeralDruid,rotation:Ue,talents:xe.data,specOptions:Fe,consumes:Oe,defaultName:"Cat Druid",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceNightElf,[k.Horde]:b.RaceTauren},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:Le.gear},[k.Horde]:{1:Le.gear}},tooltip:I[P.SpecFeralDruid],iconUrl:v[P.SpecFeralDruid]},{spec:P.SpecFeralTankDruid,rotation:Me,talents:Ne.data,specOptions:We,consumes:ze,defaultName:"Bear Druid",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceNightElf,[k.Horde]:b.RaceTauren},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:Ge.gear},[k.Horde]:{1:Ge.gear}},tooltip:I[P.SpecFeralTankDruid],iconUrl:v[P.SpecFeralTankDruid]},{spec:P.SpecHunter,rotation:st,talents:at.data,specOptions:nt,consumes:rt,defaultName:"BM Hunter",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceNightElf,[k.Horde]:b.RaceOrc},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:it.gear},[k.Horde]:{1:it.gear}},tooltip:"BM Hunter",iconUrl:S[T.ClassHunter][0]},{spec:P.SpecHunter,rotation:st,talents:ot.data,specOptions:lt,consumes:rt,defaultName:"MM Hunter",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceNightElf,[k.Horde]:b.RaceOrc},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:it.gear},[k.Horde]:{1:it.gear}},tooltip:"MM Hunter",iconUrl:S[T.ClassHunter][1]},{spec:P.SpecHunter,rotation:st,talents:ct.data,specOptions:lt,consumes:rt,defaultName:"SV Hunter",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceNightElf,[k.Horde]:b.RaceOrc},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:dt.gear},[k.Horde]:{1:dt.gear}},tooltip:"SV Hunter",iconUrl:S[T.ClassHunter][2]},{spec:P.SpecMage,rotation:pt,talents:ht.data,specOptions:ut,consumes:gt,defaultName:"Arcane Mage",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceGnome,[k.Horde]:b.RaceTroll},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:ft.gear},[k.Horde]:{1:ft.gear}},tooltip:"Arcane Mage",iconUrl:S[T.ClassMage][0]},{spec:P.SpecMage,rotation:yt,talents:Et.data,specOptions:wt,consumes:Pt,defaultName:"Fire Mage",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceGnome,[k.Horde]:b.RaceTroll},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:kt.gear},[k.Horde]:{1:kt.gear}},tooltip:"Fire Mage",iconUrl:S[T.ClassMage][1]},{spec:P.SpecMage,rotation:bt,talents:St.data,specOptions:Tt,consumes:It,defaultName:"Frost Mage",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceGnome,[k.Horde]:b.RaceTroll},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:vt.gear},[k.Horde]:{1:vt.gear}},tooltip:"Frost Mage",iconUrl:S[T.ClassMage][2]},{spec:P.SpecRogue,rotation:Dt,talents:At.data,specOptions:Rt,consumes:Bt,defaultName:"Combat Rogue",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceHuman,[k.Horde]:b.RaceOrc},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:Ut.gear},[k.Horde]:{1:Ut.gear}},tooltip:"Combat Rogue",iconUrl:v[P.SpecRogue]},{spec:P.SpecElementalShaman,rotation:_e,talents:je.data,specOptions:Je,consumes:$e,defaultName:"Ele Shaman",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceDraenei,[k.Horde]:b.RaceOrc},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:Ke.gear},[k.Horde]:{1:Ke.gear}},tooltip:I[P.SpecElementalShaman],iconUrl:v[P.SpecElementalShaman]},{spec:P.SpecEnhancementShaman,rotation:Ye,talents:Xe.data,specOptions:Ze,consumes:Qe,defaultName:"Enh Shaman",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceDraenei,[k.Horde]:b.RaceOrc},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:et.gear},[k.Horde]:{1:et.gear}},tooltip:I[P.SpecEnhancementShaman],iconUrl:v[P.SpecEnhancementShaman]},{spec:P.SpecShadowPriest,rotation:Yt,talents:Xt.data,specOptions:Zt,consumes:Qt,defaultName:"Shadow Priest",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceDwarf,[k.Horde]:b.RaceUndead},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:es.gear},[k.Horde]:{1:es.gear}},tooltip:I[P.SpecShadowPriest],iconUrl:v[P.SpecShadowPriest]},{spec:P.SpecSmitePriest,rotation:ss,talents:as.data,specOptions:ns,consumes:rs,defaultName:"Smite Priest",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceDwarf,[k.Horde]:b.RaceUndead},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:is.gear},[k.Horde]:{1:is.gear}},tooltip:I[P.SpecSmitePriest],iconUrl:v[P.SpecSmitePriest]},{spec:P.SpecWarrior,rotation:ls,talents:cs.data,specOptions:ds,consumes:ms,defaultName:"Arms Warrior",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceHuman,[k.Horde]:b.RaceOrc},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:ps.gear},[k.Horde]:{1:ps.gear}},tooltip:"Arms Warrior",iconUrl:S[T.ClassWarrior][0]},{spec:P.SpecWarrior,rotation:hs,talents:us.data,specOptions:ds,consumes:ms,defaultName:"Fury Warrior",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceHuman,[k.Horde]:b.RaceOrc},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:gs.gear},[k.Horde]:{1:gs.gear}},tooltip:"Fury Warrior",iconUrl:S[T.ClassWarrior][1]},{spec:P.SpecProtectionWarrior,rotation:ys,talents:Es.data,specOptions:ws,consumes:Ps,defaultName:"Prot Warrior",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceHuman,[k.Horde]:b.RaceOrc},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:ks.gear},[k.Horde]:{1:ks.gear}},tooltip:"Protection Warrior",iconUrl:S[T.ClassWarrior][2]},{spec:P.SpecRetributionPaladin,rotation:Ft,talents:Ot.data,specOptions:Lt,consumes:Ht,defaultName:"Ret Paladin",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceHuman,[k.Horde]:b.RaceBloodElf},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:Mt.gear,2:Nt.gear,3:Wt.gear,4:zt.gear,5:Gt.gear},[k.Horde]:{1:Mt.gear,2:Nt.gear,3:Wt.gear,4:zt.gear,5:Gt.gear}},tooltip:"Ret Paladin",iconUrl:S[T.ClassPaladin][2]},{spec:P.SpecProtectionPaladin,rotation:_t,talents:jt.data,specOptions:Jt,consumes:$t,defaultName:"Prot Paladin",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceHuman,[k.Horde]:b.RaceBloodElf},defaultGear:{[k.Unknown]:{},[k.Alliance]:{1:Kt.gear},[k.Horde]:{1:Kt.gear}},tooltip:"Protection Paladin",iconUrl:S[T.ClassPaladin][1]},{spec:P.SpecWarlock,rotation:Ss,talents:Ts.data,specOptions:Is,consumes:vs,defaultName:"Destro Warlock",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceHuman,[k.Horde]:b.RaceOrc},defaultGear:{[k.Unknown]:{1:Cs.gear,2:Ds.gear},[k.Alliance]:{1:Cs.gear,2:Ds.gear},[k.Horde]:{1:Cs.gear,2:Ds.gear}},otherDefaults:As,tooltip:"Destruction Warlock: Adds Improved Soul Leech and Blood Pact",iconUrl:S[T.ClassWarlock][2]},{spec:P.SpecWarlock,rotation:Rs,talents:Bs.data,specOptions:Us,consumes:vs,defaultName:"Affli Warlock",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceHuman,[k.Horde]:b.RaceOrc},defaultGear:{[k.Unknown]:{1:xs.gear,2:Fs.gear},[k.Alliance]:{1:xs.gear,2:Fs.gear},[k.Horde]:{1:xs.gear,2:Fs.gear}},otherDefaults:As,tooltip:"Affliction Warlock: Adds Improved Fel Intelligence",iconUrl:S[T.ClassWarlock][0]},{spec:P.SpecWarlock,rotation:Os,talents:Ls.data,specOptions:Hs,consumes:vs,defaultName:"Demo Warlock",defaultFactionRaces:{[k.Unknown]:b.RaceUnknown,[k.Alliance]:b.RaceHuman,[k.Horde]:b.RaceOrc},defaultGear:{[k.Unknown]:{1:Cs.gear,2:Ds.gear},[k.Alliance]:{1:Cs.gear,2:Ds.gear},[k.Horde]:{1:Cs.gear,2:Ds.gear}},otherDefaults:As,tooltip:"Demonology Warlock: Adds Demonic Pact",iconUrl:S[T.ClassWarlock][1]}],zs=[...new Set(Ws.map((e=>e.spec)))],Gs=[{buffBotId:"Bear",deprecated:!0,spec:P.SpecBalanceDruid,name:"Bear",tooltip:"Bear: Adds Gift of the Wild, an Innervate, Faerie Fire, and Leader of the Pack.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/ability_racial_bearform.jpg",modifyRaidProto:(e,t,s)=>{t.buffs.giftOfTheWild=Math.max(t.buffs.giftOfTheWild,C.TristateEffectRegular),t.buffs.thorns=Math.max(t.buffs.thorns,C.TristateEffectRegular),t.debuffs.faerieFire=Math.max(t.debuffs.faerieFire,C.TristateEffectRegular),t.buffs.leaderOfThePack=Math.max(t.buffs.leaderOfThePack,C.TristateEffectRegular);const a=e.getInnervateAssignment().targetIndex;if(a!=D){const e=Math.floor(a/5),s=a%5,n=t.parties[e].players[s];n.buffs&&n.buffs.innervates++}}},{buffBotId:"Resto Druid",spec:P.SpecBalanceDruid,name:"Resto Druid",tooltip:"Resto Druid: Adds Improved Gift of the Wild, and an Innervate.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/spell_nature_healingtouch.jpg",modifyRaidProto:(e,t,s)=>{t.buffs.giftOfTheWild=C.TristateEffectImproved,t.buffs.thorns=Math.max(t.buffs.thorns,C.TristateEffectRegular);const a=e.getInnervateAssignment().targetIndex;if(a!=D){const e=Math.floor(a/5),s=a%5,n=t.parties[e].players[s];n.buffs&&n.buffs.innervates++}}},{buffBotId:"Dreamstate",spec:P.SpecBalanceDruid,name:"Dreamstate",tooltip:"Dreamstate: Adds Improved Gift of the Wild, an Innervate, and Improved Faerie Fire.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/spell_nature_faeriefire.jpg",modifyRaidProto:(e,t,s)=>{t.buffs.giftOfTheWild=C.TristateEffectImproved,t.buffs.thorns=C.TristateEffectImproved,t.debuffs.faerieFire=C.TristateEffectImproved;const a=e.getInnervateAssignment().targetIndex;if(a!=D){const e=Math.floor(a/5),s=a%5,n=t.parties[e].players[s];n.buffs&&n.buffs.innervates++}}},{buffBotId:"Mage",deprecated:!0,spec:P.SpecMage,name:"Mage",tooltip:"Mage: Adds Arcane Brilliance.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/spell_holy_arcaneintellect.jpg",modifyRaidProto:(e,t,s)=>{t.buffs.arcaneBrilliance=!0}},{buffBotId:"Paladin",spec:P.SpecRetributionPaladin,name:"Holy Paladin",tooltip:"Holy Paladin: Adds a set of blessings.",iconUrl:S[T.ClassPaladin][0],modifyRaidProto:(e,t,s)=>{}},{buffBotId:"JoW Paladin",spec:P.SpecRetributionPaladin,name:"JoW Paladin",tooltip:"JoW Paladin: Adds a set of blessings and Judgement of Wisdom.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/spell_holy_righteousnessaura.jpg",modifyRaidProto:(e,t,s)=>{t.debuffs.judgementOfWisdom=!0}},{buffBotId:"Holy Priest",spec:P.SpecShadowPriest,name:"Holy Priest",tooltip:"Holy Priest: Adds Improved PW Fortitude and Shadow Protection.",iconUrl:S[T.ClassPriest][1],modifyRaidProto:(e,t,s)=>{t.buffs.shadowProtection=!0,t.buffs.powerWordFortitude=C.TristateEffectImproved}},{buffBotId:"Divine Spirit Priest",spec:P.SpecShadowPriest,name:"Disc Priest",tooltip:"Disc Priest: Adds Improved PW Fort, Shadow Protection, Improved Divine Spirit and a Power Infusion.",iconUrl:"https://wow.zamimg.com/images/wow/icons/medium/spell_holy_powerinfusion.jpg",modifyRaidProto:(e,t,s)=>{t.buffs.shadowProtection=!0,t.buffs.powerWordFortitude=C.TristateEffectImproved,t.buffs.divineSpirit=!0;const a=e.getPowerInfusionAssignment().targetIndex;if(a!=D){const e=Math.floor(a/5),s=a%5,n=t.parties[e].players[s];n.buffs&&n.buffs.powerInfusions++}}},{buffBotId:"Rogue",spec:P.SpecShadowPriest,name:"Rogue",tooltip:"Rogue: Adds TotT.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/ability_rogue_tricksofthetrade.jpg",modifyRaidProto:(e,t,s)=>{const a=e.getTricksOfTheTradeAssignment().targetIndex;if(a!=D){const e=Math.floor(a/5),s=a%5,n=t.parties[e].players[s];n.buffs&&n.buffs.tricksOfTheTrades++}}},{buffBotId:"Resto Shaman",spec:P.SpecElementalShaman,name:"Resto Shaman",tooltip:"Resto Shaman: Adds Bloodlust, Mana Spring Totem, Mana Tide Totem, Strength of Earth Totem. Chooses air totem based on party composition.",iconUrl:S[T.ClassShaman][2],modifyRaidProto:(e,t,s)=>{t.buffs.bloodlust=!0,t.buffs.manaSpringTotem=C.TristateEffectImproved,s.buffs.manaTideTotems++;const a=[P.SpecBalanceDruid,P.SpecMage,P.SpecShadowPriest,P.SpecSmitePriest,P.SpecEnhancementShaman,P.SpecElementalShaman,P.SpecWarlock],n=[P.SpecRetributionPaladin,P.SpecRogue,P.SpecWarrior,P.SpecProtectionWarrior,P.SpecFeralDruid,P.SpecFeralTankDruid],[r,i]=[a,n].map((e=>s.players.filter((e=>e.class!=T.ClassUnknown)).map((e=>A(e))).filter((t=>e.includes(t))).length));r>=i?t.buffs.wrathOfAirTotem=!0:t.buffs.windfuryTotem=C.TristateEffectRegular}},{buffBotId:"Arms Warrior",deprecated:!0,spec:P.SpecWarrior,name:"Arms Warrior",tooltip:"Arms Warrior: Adds Sunder Armor, Blood Frenzy, and Improved Battle Shout.",iconUrl:"https://wow.zamimg.com/images/wow/icons/medium/ability_warrior_savageblow.jpg",modifyRaidProto:(e,t,s)=>{t.buffs.battleShout=C.TristateEffectImproved;const a=t.debuffs;a.sunderArmor=!0,a.bloodFrenzy=!0}},{buffBotId:"Fury Warrior",deprecated:!0,spec:P.SpecWarrior,name:"Fury Warrior",tooltip:"Fury Warrior: Adds Sunder Armor and Improved Battle Shout.",iconUrl:"https://wow.zamimg.com/images/wow/icons/medium/ability_warrior_innerrage.jpg",modifyRaidProto:(e,t,s)=>{t.buffs.battleShout=C.TristateEffectImproved;t.debuffs.sunderArmor=!0}},{buffBotId:"Prot Warrior",deprecated:!0,spec:P.SpecWarrior,name:"Prot Warrior",tooltip:"Prot Warrior: Adds Sunder Armor.",iconUrl:"https://wow.zamimg.com/images/wow/icons/medium/inv_shield_06.jpg",modifyRaidProto:(e,t,s)=>{t.debuffs.sunderArmor=!0}},{buffBotId:"Unholy Frenzy Dk",spec:P.SpecDeathknight,name:"Blood DK",tooltip:"Deathknight: Adds Unholy Frenzy.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_bladedarmor.jpg",modifyRaidProto:(e,t,s)=>{const a=e.getUnholyFrenzyAssignment().targetIndex;if(a!=D){const e=Math.floor(a/5),s=a%5,n=t.parties[e].players[s];n.buffs&&n.buffs.unholyFrenzy++}}}];class Vs{constructor(e,t){this.spec=0,this.name="",this.raidIndex=-1,this.innervateAssignment=w(),this.powerInfusionAssignment=w(),this.tricksOfTheTradeAssignment=w(),this.unholyFrenzyAssignment=w(),this.raidIndexChangeEmitter=new y,this.innervateAssignmentChangeEmitter=new y,this.powerInfusionAssignmentChangeEmitter=new y,this.tricksOfTheTradeAssignmentChangeEmitter=new y,this.unholyFrenzyAssignmentChangeEmitter=new y,this.changeEmitter=new y;const s=Gs.find((t=>t.buffBotId==e));if(!s)throw new Error("No buff bot config with id '"+e+"'!");this.sim=t,this.settings=s,this.updateSettings(),[this.raidIndexChangeEmitter,this.innervateAssignmentChangeEmitter,this.powerInfusionAssignmentChangeEmitter,this.tricksOfTheTradeAssignmentChangeEmitter,this.unholyFrenzyAssignmentChangeEmitter].forEach((e=>e.on((e=>this.changeEmitter.emit(e))))),this.changeEmitter.on((e=>t.raid.getParty(this.getPartyIndex()).changeEmitter.emit(e)))}updateSettings(){this.spec=this.settings.spec,this.name=this.settings.name}getLabel(){return`${this.name} (#${this.getRaidIndex()+1})`}getClass(){return R[this.settings.spec]}getClassColor(){return B[this.getClass()]}getRaidIndex(){return this.raidIndex}setRaidIndex(e,t){t!=this.raidIndex&&(this.raidIndex=t,y.freezeAllAndDo((()=>{this.raidIndexChangeEmitter.emit(e),this.sim.raid.compChangeEmitter.emit(e)})))}getPartyIndex(){return Math.floor(this.getRaidIndex()/5)}getInnervateAssignment(){return E.clone(this.innervateAssignment)}setInnervateAssignment(e,t){E.equals(t,this.innervateAssignment)||(this.innervateAssignment=E.clone(t),this.innervateAssignmentChangeEmitter.emit(e))}getPowerInfusionAssignment(){return E.clone(this.powerInfusionAssignment)}setPowerInfusionAssignment(e,t){E.equals(t,this.powerInfusionAssignment)||(this.powerInfusionAssignment=E.clone(t),this.powerInfusionAssignmentChangeEmitter.emit(e))}getTricksOfTheTradeAssignment(){return E.clone(this.tricksOfTheTradeAssignment)}setTricksOfTheTradeAssignment(e,t){E.equals(t,this.tricksOfTheTradeAssignment)||(this.tricksOfTheTradeAssignment=E.clone(t),this.tricksOfTheTradeAssignmentChangeEmitter.emit(e))}getUnholyFrenzyAssignment(){return E.clone(this.unholyFrenzyAssignment)}setUnholyFrenzyAssignment(e,t){E.equals(t,this.unholyFrenzyAssignment)||(this.unholyFrenzyAssignment=E.clone(t),this.unholyFrenzyAssignmentChangeEmitter.emit(e))}toProto(){return U.create({id:this.settings.buffBotId,raidIndex:this.getRaidIndex(),innervateAssignment:this.getInnervateAssignment(),powerInfusionAssignment:this.getPowerInfusionAssignment(),tricksOfTheTradeAssignment:this.getTricksOfTheTradeAssignment(),unholyFrenzyAssignment:this.getUnholyFrenzyAssignment()})}fromProto(e,t){const s=Gs.find((e=>e.buffBotId==t.id));if(!s)throw new Error("No buff bot config with id '"+t.id+"'!");this.settings=s,this.updateSettings(),y.freezeAllAndDo((()=>{this.setRaidIndex(e,t.raidIndex),this.setInnervateAssignment(e,t.innervateAssignment||w()),this.setPowerInfusionAssignment(e,t.powerInfusionAssignment||w()),this.setTricksOfTheTradeAssignment(e,t.tricksOfTheTradeAssignment||w()),this.setUnholyFrenzyAssignment(e,t.unholyFrenzyAssignment||w())}))}clone(e){const t=new Vs(this.settings.buffBotId,this.sim);return t.fromProto(e,this.toProto()),t}}class _s extends x{constructor(e,t){super(e,"assignments-picker-root"),this.changeEmitter=new y,this.raidSimUI=t,this.innervatesPicker=new Js(this.rootElem,t),this.powerInfusionsPicker=new $s(this.rootElem,t),this.tricksOfTheTradesPicker=new Ks(this.rootElem,t),this.unholyFrenzyPicker=new qs(this.rootElem,t)}}class js extends x{constructor(e,t){super(e,"assigned-buff-picker-root"),this.changeEmitter=new y,this.raidSimUI=t,this.targetPickers=[],this.playersContainer=document.createElement("fieldset"),this.playersContainer.classList.add("assigned-buff-players-container","settings-section"),this.rootElem.appendChild(this.playersContainer),this.update(),this.raidSimUI.changeEmitter.on((e=>{this.update()}))}update(){this.playersContainer.innerHTML=`\n\t\t\t<legend>${this.getTitle().toUpperCase()}</legend>\n\t\t`;const e=this.getSourcePlayers();0==e.length?this.rootElem.style.display="none":this.rootElem.style.display="initial",this.targetPickers=e.map(((e,t)=>{const s=document.createElement("div");s.classList.add("assigned-buff-player"),this.playersContainer.appendChild(s);const a=Ms.makeOptionElem({iconUrl:e instanceof F?e.getTalentTreeIcon():e.settings.iconUrl,text:e.getLabel(),color:e.getClassColor(),isDropdown:!1});a.classList.add("raid-target-picker-root"),s.appendChild(a);const n=document.createElement("span");n.classList.add("assigned-buff-arrow","fa","fa-arrow-right"),s.appendChild(n);let r=null;r=new Ms(s,this.raidSimUI.sim.raid,e,e instanceof F?{extraCssClasses:["assigned-buff-target-picker"],noTargetLabel:"Unassigned",compChangeEmitter:this.raidSimUI.sim.raid.compChangeEmitter,changedEvent:e=>e.specOptionsChangeEmitter,getValue:e=>this.getPlayerValue(e),setValue:(e,t,s)=>this.setPlayerValue(e,t,s)}:{extraCssClasses:["assigned-buff-target-picker"],noTargetLabel:"Unassigned",compChangeEmitter:this.raidSimUI.sim.raid.compChangeEmitter,changedEvent:e=>e.changeEmitter,getValue:e=>this.getBuffBotValue(e),setValue:(e,t,s)=>this.setBuffBotValue(e,t,s)});const i={playerOrBot:e,targetPicker:r,targetPlayer:this.raidSimUI.sim.raid.getPlayerFromRaidTarget(r.getInputValue())};return r.changeEmitter.on((e=>{i.targetPlayer=this.raidSimUI.sim.raid.getPlayerFromRaidTarget(r.getInputValue())})),i}))}}class Js extends js{getTitle(){return"Innervates"}getSourcePlayers(){return this.raidSimUI.getPlayersAndBuffBots().filter((e=>e?.getClass()==T.ClassDruid))}getPlayerValue(e){return e.getSpecOptions().innervateTarget||w()}setPlayerValue(e,t,s){const a=t.getSpecOptions();a.innervateTarget=s,t.setSpecOptions(e,a)}getBuffBotValue(e){return e.getInnervateAssignment()}setBuffBotValue(e,t,s){t.setInnervateAssignment(e,s)}}class $s extends js{getTitle(){return"Power Infusions"}getSourcePlayers(){return this.raidSimUI.getPlayersAndBuffBots().filter((e=>e?.getClass()==T.ClassPriest)).filter((e=>{if(e instanceof Vs)return"Divine Spirit Priest"==e.settings.buffBotId;{const t=e;return!!t.getTalents().powerInfusion&&t.spec==P.SpecSmitePriest}}))}getPlayerValue(e){return e.getSpecOptions().powerInfusionTarget||w()}setPlayerValue(e,t,s){const a=t.getSpecOptions();a.powerInfusionTarget=s,t.setSpecOptions(e,a)}getBuffBotValue(e){return e.getPowerInfusionAssignment()}setBuffBotValue(e,t,s){t.setPowerInfusionAssignment(e,s)}}class Ks extends js{getTitle(){return"Tricks of the Trades"}getSourcePlayers(){return this.raidSimUI.getPlayersAndBuffBots().filter((e=>e?.getClass()==T.ClassRogue))}getPlayerValue(e){return e.getSpecOptions().tricksOfTheTradeTarget||w()}setPlayerValue(e,t,s){const a=t.getSpecOptions();a.tricksOfTheTradeTarget=s,t.setSpecOptions(e,a)}getBuffBotValue(e){return e.getTricksOfTheTradeAssignment()}setBuffBotValue(e,t,s){t.setTricksOfTheTradeAssignment(e,s)}}class qs extends js{getTitle(){return"Unholy Frenzy"}getSourcePlayers(){return this.raidSimUI.getPlayersAndBuffBots().filter((e=>e?.getClass()==T.ClassDeathknight)).filter((e=>{if(e instanceof Vs)return"Unholy Frenzy Dk"==e.settings.buffBotId;return e.getTalents().hysteria}))}getPlayerValue(e){return e.getSpecOptions().unholyFrenzyTarget||w()}setPlayerValue(e,t,s){const a=t.getSpecOptions();a.unholyFrenzyTarget=s,t.setSpecOptions(e,a)}getBuffBotValue(e){return e.getUnholyFrenzyAssignment()}setBuffBotValue(e,t,s){t.setUnholyFrenzyAssignment(e,s)}}class Ys extends x{constructor(s,a){super(s,"blessings-picker-root"),this.changeEmitter=new y,this.raidSimUI=a,this.assignments=O.clone(L(4)),this.rootElem.innerHTML='\n\t\t<table class="blessings-table">\n\t\t\t<tbody class="blessings-table-body">\n\t\t\t</tbody>\n\t\t</table>\n\t\t',this.rootElem.getElementsByClassName("blessings-table-header-row")[0];const n=this.rootElem.getElementsByClassName("blessings-table-body")[0],r=W.filter((e=>zs.includes(e))).filter((e=>!t.includes(e))),i=[...Array(4).keys()];this.cols=[],this.rows=r.map((t=>{const s=document.createElement("tr");s.classList.add("blessings-table-row"),n.appendChild(s);const a=document.createElement("th");a.classList.add("blessings-table-header-cell"),s.appendChild(a);const r=document.createElement("img");return r.src=H[t],a.appendChild(r),tippy(r,{content:I[t],allowHTML:!0}),i.forEach((a=>{const n=document.createElement("td");n.classList.add("blessings-table-cell"),s.appendChild(n),this.cols[a]||this.cols.push([]),this.cols[a].push(n),new e(n,this,{extraCssClasses:["blessing-picker"],numColumns:1,values:[{color:B[T.ClassPaladin],value:M.BlessingUnknown},{actionId:N.fromSpellId(25898),value:M.BlessingOfKings},{actionId:N.fromSpellId(48934),value:M.BlessingOfMight},{actionId:N.fromSpellId(48938),value:M.BlessingOfWisdom},{actionId:N.fromSpellId(25899),value:M.BlessingOfSanctuary}],equals:(e,t)=>e==t,zeroValue:M.BlessingUnknown,changedEvent:e=>e.changeEmitter,getValue:e=>e.assignments.paladins[a]?.blessings[t]||M.BlessingUnknown,setValue:(e,s,n)=>{s.assignments.paladins[a].blessings[t]!=n&&(s.assignments.paladins[a].blessings[t]=n,this.changeEmitter.emit(e))}})})),s})),this.setNumPaladins(a.getClassCount(T.ClassPaladin)),a.compChangeEmitter.on((e=>{this.setNumPaladins(a.getClassCount(T.ClassPaladin))}))}setNumPaladins(e){e=Math.min(e,4);for(let t=0;t<e;t++)this.cols[t].forEach((e=>e.classList.add("paladin-active")));for(let t=e;t<4;t++)this.cols[t].forEach((e=>e.classList.remove("paladin-active")))}getAssignments(){return O.clone(this.assignments)}setAssignments(e,t){this.assignments=O.clone(t),this.changeEmitter.emit(e)}}class Xs extends s{constructor(e,t){super(e,"JSON Import",!0),this.simUI=t,this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t"}onImport(e){const t=z.fromJsonString(e);this.simUI.fromProto(y.nextEventID(),t),this.close()}}class Zs extends a{constructor(e,t){super(e,"JSON Export",!0),this.simUI=t,this.init()}getData(){return JSON.stringify(z.toJson(this.simUI.toProto()),null,2)}}class Qs extends s{constructor(e,t){super(e,"WCL Import",!1),this.queryCounter=0,this.simUI=t,this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImport entire raid from a WCL report.<br>\n\t\t\t\tParties are a best guess based on buffs.<br>\n\t\t\t\tDouble check innervate/PI and paladin buffs in the settings after import.<br>\n\t\t\t\tDoes not support fight=last currently (will default any non-numeric fight ID to be 0)<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else first found fight will be used.<br>\n\t\t\t</p>\n\t\t"}getWCLBearerToken(){return fetch("https://classic.warcraftlogs.com/oauth/token",{method:"POST",headers:{Authorization:"Basic "+btoa("963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3")},body:new URLSearchParams({grant_type:"client_credentials"})}).then((e=>e.json())).then((e=>e.access_token)).catch((e=>{console.error(e)}))}queryWCL(e,t){const s={"Content-Type":"application/json",Authorization:`Bearer ${t}`,Accept:"application/json"},a=`https://classic.warcraftlogs.com/api/v2/client?query=${e}`;return this.queryCounter++,fetch(encodeURI(a),{method:"GET",headers:s}).then((e=>e.json()))}getURLInfo(e){let t={reportID:"",fightID:"0"};if(!e.includes("warcraftlogs.com"))return console.error("Invalid WCL URL",e,"must be from warcraftlogs.com"),t;let s=e.indexOf("fight="),a=e.indexOf("/reports/");if(-1===a)return console.error("Could not find report ID in URL",e),t;a+=9;if(-1!==s){s+=6;let a=parseInt(e.substring(s),10);isNaN(a)&&(a=0),t.fightID=a.toString()}else console.warn("Could not find fight ID in URL",e,"defaulting to fight 0");return t.reportID=e.substring(a,a+16)??"",t}getRateLimit(e){return this.queryWCL("\n\t  {\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }",e).then((e=>e.data.rateLimitData))}async onImport(e){this.importButton.disabled=!0,this.rootElem.style.cursor="wait",this.doImport(e).then((()=>{this.importButton.disabled=!1,this.rootElem.style.removeProperty("cursor")}))}async doImport(e){if(!e.length)return void console.error("No import link provided!");let t=this.getURLInfo(e);const s=t.reportID,a=t.fightID;if(!s.length)return void console.error("Could not find report ID in URL",e);this.simUI.clearRaid(y.nextEventID());const i=await this.getWCLBearerToken(),o=await this.getRateLimit(i);let l=o.pointsSpentThisHour+30<o.limitPerHour;console.info("Importing WCL report",s,"fight",a,"Generate Parties:",l);const c=`\n\t\t\t\t{\n\t\t\t\t\treportData {\n\t\t\t\t\t\treport(code: "${s}") {\n\t\t\t\t\t\t\tguild {\n\t\t\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tplayerDetails: table(fightIDs: [${a}], endTime: 99999999, dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\t\t\tfights(fightIDs: [${a}]) {\n\t\t\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinnervates: table(fightIDs: [${a}], dataType:Casts, endTime: 99999999, sourceClass: "Druid", abilityID: 29166),\n\t\t\t\t\t\t\tpowerInfusion: table(fightIDs: [${a}], dataType:Casts, endTime: 99999999, sourceClass: "Priest", abilityID: 10060)\n\t\t\t\t\t\t\ttricksOfTheTrade: table(fightIDs: [${a}], dataType:Casts, endTime: 99999999, sourceClass: "Rogue", abilityID: 57933)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t`,d=await this.queryWCL(c,i);if(null!=d.errors&&null!=d.errors&&d.errors.length){const e=d.errors.reduce(((e,t)=>e+t.message),"");return void alert("Failed to import: "+e)}const m=d.data.reportData.report,p=m.guild,h=m.playerDetails.data.entries,u=m.innervates.data.entries,g=m.powerInfusion.data.entries,f=m.tricksOfTheTrade.data.entries,w=m.fights[0],P=w.startTime,b=w.endTime;let S=this.simUI.raidPicker?.getCurrentFaction();null!=p&&(S=p.faction.id),null==S&&(S=k.Horde);const T=G.create();T.duration=(b-P)/1e3,T.targets=new Array;let I=this.simUI.sim.getAllPresetEncounters().find((e=>e.path.includes(w.name)));I&&I.targets.length&&I.targets.map((e=>e.target)).filter((e=>void 0!==e)).forEach((e=>T.targets.push(e))),0===T.targets.length&&T.targets.push(n.defaultProto());const v=z.create();v.encounter=T;const C=V.create();C.parties=new Array,v.raid=C;const D=new Array,R=new Map,B=h.filter((e=>"Paladin"===e.type)).length;let U=Array.from({length:r}).map((()=>[]));U.forEach((()=>C.parties.push(_.create())));const x=(e,t)=>{if(!Array.isArray(e))throw new Error("FIRST ARGUMENT NOT AN ARRAY");const s=e.slice(0),a=arguments.length>2?arguments[2]:1,n=t.constructor===Array?t:t.split(".");return s.sort((function(e,t){for(let s in n)e[n[s]]&&t[n[s]]&&(e=e[n[s]],t=t[n[s]]);return(e=e.toString().match(/^\d+$/)?+e:e)<(t=t.toString().match(/^\d+$/)?+t:t)?-1*a:e>t?1*a:0})),s},F=h.map((e=>new ea(e,this.simUI,S))),O=e=>{const t=[];return e.length&&e.forEach((e=>{const s=F.find((t=>t.name===e.name)),a=F.find((t=>t.name===e.targets[0].name));s&&a&&!a.isBuffBot&&t.push({player:s,target:a.name})})),t};O(u).forEach((e=>e.player.innervateTarget=e.target)),O(g).forEach((e=>e.player.powerInfusionTarget=e.target)),O(f).forEach((e=>e.player.tricksOfTheTradeTarget=e.target));const H=x(x(F,"type"),"sortPriority");let M=0;const N=(e,t)=>e.isBuffBot||t.isBuffBot?1:0,W=(e,t,s=!1)=>{if(!e)return void console.error("Cannot assign player to party because player is undefined!");if(!t)return void console.error("Cannot assign player to party because party is undefined!");if(t.players.length===j)return void console.error("Cannot assign player to party because party is full!",e,t.players);s&&console.warn(`Could not locate a group for ${e.name}, assigning them to an open group.`);let a=e.getBuffBot(),n=e.getPlayer();if(a||n){if(R.set(e.id,M),a)a.raidIndex=M,D.push(a),t.players.push(J.create());else if(n&&(t.players.push(n),Q(A(n)))){let t=E.create();t.targetIndex=R.get(e.id),v.raid.tanks.push(t)}e.partyAssigned=!0,M++}else console.error("Cannot assign player to party because player data is undefined!",e)};if(l){const e=H.filter((e=>e.isPartyBuffer));for(const t of e){const e=t.partyMembers.length>=j;if(e)continue;const n=t.getPartyAuraIds();if(!n.length){console.warn("No party aura ids found for partyBuff player "+t.name);continue}let r=n.map((e=>`\n\t\t\t\t{\n\t\t\t\t\treportData {\n\t\t\t\t\t\treport(code: "${s}") {\n\t\t\t\t\ttable(startTime: ${P}, endTime: ${b}, sourceID: ${t.id}, abilityID: ${e}, fightIDs: [${a}],dataType:Buffs,viewBy:Target,hostilityType:Friendlies)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}`)),o=[];for(let t=0;t<r.length&&!(o.length>=j||e);t++){let e=await this.queryWCL(r[t],i);if(e){let t=e.data?.reportData?.report?.table?.data?.auras??[];if(t.length){t=t.filter((e=>"Pet"!==e.type)).sort(((e,t)=>e.bands[0].startTime-t.bands[0].startTime)).filter(((e,t)=>t<5));const e=t.filter((e=>!o.some((t=>t.name===e.name))));o.push(...e)}}}if(0===o.length)continue;t.partyFound=!0,t.partyMembers=o.map((e=>e.name));let l=H.filter((e=>t.partyMembers.includes(e.name))).filter((e=>!e.partyAssigned));const c=l.length;let d=U.findIndex((e=>e.length<j&&e.length<c));-1===d&&(console.warn("No empty temp party found for player "+t.name),d=U.filter((e=>e.length<j)).findIndex((e=>e.some((e=>t.partyMembers.includes(e.name))))),console.info("Found party with members in it: "+d));let m=U[d];l.forEach((e=>{const s=void 0===m,a=m.length===j;s||a||(e.partyAssigned=!0,e.partyMembers=t.partyMembers,m.push(e))}))}U.forEach(((e,t)=>{let s=C.parties[t];e.sort(N).forEach((e=>W(e,s)))}))}if(H.filter((e=>!e.partyAssigned)).sort(N).map((e=>{let t=C.parties.filter((e=>e.players.length<j))[0];W(e,t,!0)})),H.filter((e=>e.innervateTarget||e.powerInfusionTarget||e.tricksOfTheTradeTarget)).forEach((e=>{const t=H.find((t=>t.name===e.innervateTarget||e.name===e.powerInfusionTarget||e.name===e.tricksOfTheTradeTarget));if(!t)return void console.warn("Could not find target assignment player");const s=t.id,a=R.get(s);if(!a)return void console.warn(`Could not find ${t.name} raid index!`);if(e.isBuffBot){const t=e.id,s=R.get(t),n=D.find((e=>e.raidIndex===s));return void(n&&(e.innervateTarget?(n.innervateAssignment=E.create(),n.innervateAssignment.targetIndex=a):e.powerInfusionTarget?(n.powerInfusionAssignment=E.create(),n.powerInfusionAssignment.targetIndex=a):e.tricksOfTheTradeTarget&&(n.tricksOfTheTradeAssignment=E.create(),n.tricksOfTheTradeAssignment.targetIndex=a)))}const n=C.parties.filter((t=>t.players.some((t=>t.name===e.name))))[0];if(!n)return void console.warn("Could not find raiding party for player "+e.name);const r=n.players.find((t=>t.name===e.name));r?e.innervateTarget?"balanceDruid"==r.spec.oneofKind?(r.spec.balanceDruid.options.innervateTarget=E.create(),r.spec.balanceDruid.options.innervateTarget.targetIndex=a):"feralDruid"==r.spec.oneofKind?(r.spec.feralDruid.options.innervateTarget=E.create(),r.spec.feralDruid.options.innervateTarget.targetIndex=a):"feralTankDruid"==r.spec.oneofKind&&(r.spec.feralTankDruid.options.innervateTarget=E.create(),r.spec.feralTankDruid.options.innervateTarget.targetIndex=a):e.powerInfusionTarget||e.tricksOfTheTradeTarget:console.warn("Could not find raid player "+e.name+" in raid party "+n)})),H.filter((e=>!e.partyAssigned)).forEach((e=>{console.error(`${e.name} is not in a party!`,e)})),v.blessings=L(B),this.simUI.fromProto(y.nextEventID(),v),this.simUI.setBuffBots(y.nextEventID(),D),!l){const e=await this.getRateLimit(i);console.debug(`Rate Limit resets in ${e.pointsResetIn} seconds.`)}this.close()}}class ea{constructor(e,t,s=k.Unknown){this.partyAssigned=!1,this.partyFound=!1,this.partyMembers=[],this.isPartyBuffer=!1,this.isBuffBot=!1,this.sortPriority=99,this.simUI=t,this.name=e.name,this.gear=e.gear,this.icon=e.icon,this.id=e.id,this.type=e.type,this.talents=e.talents,this.wclSpec=e.icon.split("-")[1],this.faction=s,"Paladin"===this.type&&"Protection"===this.wclSpec&&(this.wclSpec="Justicar"),this.spec=sa[this.wclSpec],this.specType=this.wclSpec+this.type,this.isBuffBot=void 0===this.spec,this.isPartyBuffer=this.getPartyAuraIds().length>1,this.sortPriority=ta[this.wclSpec]??99}getPlayer(){if(this.isBuffBot)return;let e=J.create();const t=K[this.spec],s=this.getMatchingPreset();if(void 0!==s)return e=q(this.spec,e,s.rotation,t.talentsCreate(),s.specOptions),e.talentsString=s.talents.talentsString,e.glyphs=s.talents.glyphs,e.consumes=s.consumes,e.name=this.name,e.class=Y(this.type),e.equipment=this.getEquipment(),e.race=s.defaultFactionRaces[this.faction],F.applySharedDefaultsToProto(e),e;console.error("Could not find matching preset for non buff bot",{name:this.name,spec:this.spec,type:this.type,talents:this.talents})}getBuffBot(){if(!this.isBuffBot)return;const e=aa[this.specType];if(null==e)return void console.error("Buff Bot Spec not implemented: ",this.specType);const t=U.create();return t.id=e,t.raidIndex=-1,t}getPartyAuraIds(){const e=[24932],t={RetributionPaladin:[20092,20218,31870],GuardianDruid:[...e],WardenDruid:[...e],FeralDruid:[...e],BalanceDruid:[24907],RestorationDruid:[34123],MarksmanHunter:[27066],EnhancementShaman:[30811]},s={Paladin:[19746,27149,27150],Warrior:[2048,469],Warlock:[27268,18696]}[this.type]??[],a=[...t[this.specType]??[],...s,351355];return"Shaman"===this.type?[...a,32182]:a}getMatchingPreset(){const e=Ws.filter((e=>e.spec===this.spec));let t=0;if(e&&e.length>1){let s=100;e.forEach(((e,a)=>{let n=[0,0,0],r=0;Array.from(e.talents.talentsString).forEach((e=>{"-"!=e?n[r]+=parseInt(e):r++}));const i=n.reduce(((e,t,s)=>e+Math.abs(this.talents[s]?.guid-n[s])),0);i<s&&(t=a,s=i)}))}return e[t]}getEquipment(){let e=X.create();return e.items=new Array,this.gear.forEach((t=>{const s=Z.create();s.id=t.id;const a=this.simUI.sim.getEnchantFlexible(t.permanentEnchant);s.enchant=a?a.id:0,t.gems&&(s.gems=new Array,t.gems.forEach((e=>s.gems.push(e.id)))),e.items.push(s)})),e}}const ta={Warden:0,Guardian:1,Feral:2,Balance:3,Justicar:4,Retribution:5,Fury:6,Arms:7,Protection:8,Enhancement:9,Destruction:10,Affliction:11,Demonology:12,Marksman:13},sa={Balance:P.SpecBalanceDruid,Elemental:P.SpecElementalShaman,Enhancement:P.SpecEnhancementShaman,Feral:P.SpecFeralDruid,Warden:P.SpecFeralTankDruid,Guardian:P.SpecFeralTankDruid,Survival:P.SpecHunter,BeastMastery:P.SpecHunter,Arcane:P.SpecMage,Fire:P.SpecMage,Frost:P.SpecMage,Assassination:P.SpecRogue,Combat:P.SpecRogue,Retribution:P.SpecRetributionPaladin,Justicar:P.SpecProtectionPaladin,Shadow:P.SpecShadowPriest,Smite:P.SpecSmitePriest,Destruction:P.SpecWarlock,Affliction:P.SpecWarlock,Demonology:P.SpecWarlock,Arms:P.SpecWarrior,Fury:P.SpecWarrior,Champion:P.SpecWarrior,Warrior:P.SpecWarrior,Gladiator:P.SpecWarrior,Protection:P.SpecProtectionWarrior},aa={HolyPaladin:"Paladin",HolyPriest:"Holy Priest",DisciplinePriest:"Divine Spirit Priest",RestorationDruid:"Resto Druid",DreamstateDruid:"Resto Druid",RestorationShaman:"Resto Shaman"};class na extends x{constructor(e,t){super(e,"raid-picker-root"),this.currentDragPlayer=null,this.currentDragPlayerFromIndex=-1,this.currentDragType=1,this.raidSimUI=t,this.raid=t.sim.raid;const s=document.createElement("div");s.classList.add("current-raid-viewer"),this.rootElem.appendChild(s),s.innerHTML='\n\t\t\t<div class="parties-container">\n\t\t\t</div>\n\t\t';const a=this.rootElem.getElementsByClassName("parties-container")[0];this.partyPickers=this.raid.getParties().map(((e,t)=>new ra(a,e,t,this)));const n=document.createElement("div");n.classList.add("new-player-picker"),this.rootElem.appendChild(n),this.newPlayerPicker=new la(n,this),this.rootElem.ondragend=e=>{this.clearDragPlayer()}}getCurrentFaction(){return this.raid.sim.getFaction()}getCurrentPhase(){return this.raid.sim.getPhase()}getPlayerPicker(e){return this.partyPickers[Math.floor(e/j)].playerPickers[e%j]}getPlayerPickers(){return[...new Array(25).keys()].map((e=>this.getPlayerPicker(e)))}getBuffBots(){return this.getPlayerPickers().filter((e=>e.player instanceof Vs)).map((e=>e.player))}setBuffBots(e,t){y.freezeAllAndDo((()=>{this.getBuffBots().forEach((t=>this.getPlayerPicker(t.getRaidIndex()).setPlayer(e,null,0))),t.forEach((t=>{if(!Gs.find((e=>e.buffBotId==t.id)))return void console.warn("Invalid buff bot ID: "+t.id);const s=new Vs(t.id,this.raid.sim);s.fromProto(e,t),this.getPlayerPicker(t.raidIndex).setPlayer(e,s,0)}))}))}setDragPlayer(e,t,s){if(this.clearDragPlayer(),this.currentDragPlayer=e,this.currentDragPlayerFromIndex=t,this.currentDragType=s,-1!=t){this.getPlayerPicker(t).rootElem.classList.add("dragFrom")}}clearDragPlayer(){if(-1!=this.currentDragPlayerFromIndex){this.getPlayerPicker(this.currentDragPlayerFromIndex).rootElem.classList.remove("dragFrom")}this.currentDragPlayer=null,this.currentDragPlayerFromIndex=-1,this.currentDragType=1}}class ra extends x{constructor(e,t,s,a){super(e,"party-picker-root"),this.party=t,this.index=s,this.raidPicker=a,this.rootElem.innerHTML=`\n\t\t\t<div class="party-header">\n\t\t\t\t<span>Group ${s+1}</span>\n\t\t\t\t<div class="party-results">\n\t\t\t\t\t<span class="party-results-dps"></span>\n\t\t\t\t\t<span class="party-results-reference-delta"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="players-container">\n\t\t\t</div>\n\t\t`;const n=this.rootElem.getElementsByClassName("players-container")[0];this.playerPickers=[...Array(j).keys()].map((e=>new ia(n,this,e)));const r=this.rootElem.getElementsByClassName("party-results-dps")[0],i=this.rootElem.getElementsByClassName("party-results-reference-delta")[0];this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const e=this.raidPicker.raidSimUI.getCurrentData(),t=this.raidPicker.raidSimUI.getReferenceData(),s=e?.simResult.raidMetrics.parties[this.index].dps.avg||0,a=t?.simResult.raidMetrics.parties[this.index].dps.avg||0;if(0==s&&0==a)return r.textContent="",void(i.textContent="");r.textContent=s.toFixed(1),t?ee(i,a,s,1):i.textContent=""}))}}class ia extends x{constructor(e,t,s){super(e,"player-picker-root"),this.index=s,this.raidIndex=t.index*j+s,this.player=null,this.partyPicker=t,this.raidPicker=t.raidPicker,this.partyPicker.party.compChangeEmitter.on((e=>{const t=this.partyPicker.party.getPlayer(this.index);t==this.player||null==t&&this.player instanceof Vs||this.setPlayer(e,t,0)})),this.rootElem.innerHTML='\n\t\t\t<div class="player-label">\n\t\t\t\t<img class="player-icon"></img>\n\t\t\t\t<span class="player-name" contenteditable></span>\n\t\t\t</div>\n\t\t\t<div class="player-spacer">\n\t\t\t</div>\n\t\t\t<div class="player-options">\n\t\t\t\t<span class="player-edit fa fa-edit"></span>\n\t\t\t\t<span class="player-copy fa fa-copy" draggable="true"></span>\n\t\t\t\t<span class="player-delete fa fa-times"></span>\n\t\t\t</div>\n\t\t\t<div class="player-results">\n\t\t\t\t<span class="player-results-dps"></span>\n\t\t\t\t<span class="player-results-reference-delta"></span>\n\t\t\t</div>\n\t\t',this.labelElem=this.rootElem.getElementsByClassName("player-label")[0],this.iconElem=this.rootElem.getElementsByClassName("player-icon")[0],this.nameElem=this.rootElem.getElementsByClassName("player-name")[0],this.resultsElem=this.rootElem.getElementsByClassName("player-results")[0],this.dpsResultElem=this.rootElem.getElementsByClassName("player-results-dps")[0],this.referenceDeltaElem=this.rootElem.getElementsByClassName("player-results-reference-delta")[0],this.nameElem.addEventListener("input",(e=>{this.player instanceof F&&this.player.setName(y.nextEventID(),this.nameElem.textContent||"")}));this.nameElem.addEventListener("keydown",(e=>{if(9==e.keyCode||13==e.keyCode){e.preventDefault();const t=this.raidPicker.getPlayerPickers().filter((e=>e.player instanceof F)),s=t.indexOf(this);-1!=s&&t.length>s+1?t[s+1].nameElem.focus():this.nameElem.blur()}27==e.keyCode&&this.nameElem.blur(),8!=e.keyCode&&46!=e.keyCode&&(this.nameElem.textContent?.length||0)>=15&&e.preventDefault()}));const a="Unnamed";this.nameElem.addEventListener("focusin",(e=>{const t=window.getSelection();if(t){const e=document.createRange();e.selectNodeContents(this.nameElem),t.removeAllRanges(),t.addRange(e)}})),this.nameElem.addEventListener("focusout",(e=>{this.nameElem.textContent||(this.nameElem.textContent=a,this.player instanceof F&&this.player.setName(y.nextEventID(),a))}));const n=(e,t)=>{if(null==this.player)return void e.preventDefault();e.dataTransfer.dropEffect="move",e.dataTransfer.effectAllowed="all";const s=this.iconElem.src,a=new Image;if(a.src=s,e.dataTransfer.setDragImage(a,30,30),this.player instanceof F){var n=this.player.toProto(!0);e.dataTransfer.setData("text/plain",btoa(String.fromCharCode(...J.toBinary(n))))}this.raidPicker.setDragPlayer(this.player,this.raidIndex,t)};this.labelElem.ondragstart=e=>{n(e,3)},this.resultsElem.ondragstart=e=>{n(e,3)};const r=this.rootElem.getElementsByClassName("player-copy")[0];tippy(r,{content:"Drag to Copy",allowHTML:!0}),r.ondragstart=e=>{n(e,4)};const i=this.rootElem.getElementsByClassName("player-delete")[0];tippy(i,{content:"Click to Delete",allowHTML:!0}),i.addEventListener("click",(e=>{this.setPlayer(y.nextEventID(),null,0)}));let o=0;this.rootElem.ondragenter=e=>{e.preventDefault(),o++,this.rootElem.classList.add("dragto")},this.rootElem.ondragleave=e=>{e.preventDefault(),o--,o<=0&&this.rootElem.classList.remove("dragto")},this.rootElem.ondragover=e=>{e.preventDefault()},this.rootElem.ondrop=e=>{var t=e.dataTransfer.getData("text/plain");e.preventDefault(),o=0,this.rootElem.classList.remove("dragto");const s=y.nextEventID();y.freezeAllAndDo((()=>{if(null==this.raidPicker.currentDragPlayer&&0==t.length)return;if(this.raidPicker.currentDragPlayerFromIndex==this.raidIndex)return void this.raidPicker.clearDragPlayer();const e=this.raidPicker.currentDragType;if(-1!=this.raidPicker.currentDragPlayerFromIndex){const t=this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);if(3==e){t.setPlayer(s,this.player,e);var a=this.iconElem.src;this.iconElem.src=t.iconElem.src,t.iconElem.src=a}else 2==e&&(this.iconElem.src=t.iconElem.src,t.setPlayer(s,null,e))}else if(null==this.raidPicker.currentDragPlayer){const e=atob(t),a=new Uint8Array(e.length);for(let t=0;t<a.length;t++)a[t]=e.charCodeAt(t);const r=J.fromBinary(a);var n=new F(A(r),this.raidPicker.raidSimUI.sim);n.fromProto(s,r),this.raidPicker.currentDragPlayer=n}4==e?this.setPlayer(s,this.raidPicker.currentDragPlayer.clone(s),e):this.setPlayer(s,this.raidPicker.currentDragPlayer,e),""==this.iconElem.src&&(this.iconElem.src=Ws.filter((e=>e.spec==n.spec))[0].iconUrl),this.raidPicker.clearDragPlayer()}))};const l=this.rootElem.getElementsByClassName("player-edit")[0];tippy(l,{content:"Edit",allowHTML:!0}),l.addEventListener("click",(e=>{this.player instanceof F&&new oa(this.player)})),this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const e=this.raidPicker.raidSimUI.getCurrentData(),t=this.raidPicker.raidSimUI.getReferenceData(),s=e?.simResult.getDamageMetrics({player:this.raidIndex}).avg||0,a=t?.simResult.getDamageMetrics({player:this.raidIndex}).avg||0;if(0==s&&0==a)return this.dpsResultElem.textContent="",void(this.referenceDeltaElem.textContent="");this.dpsResultElem.textContent=s.toFixed(1),t?ee(this.referenceDeltaElem,a,s,1):this.referenceDeltaElem.textContent=""})),this.update()}setPlayer(e,t,s){t!=this.player&&(this.dpsResultElem.textContent="",this.referenceDeltaElem.textContent="",y.freezeAllAndDo((()=>{if(this.player=t,t instanceof Vs)this.partyPicker.party.setPlayer(e,this.index,null),t.setRaidIndex(e,this.raidIndex);else if(t instanceof F){if(this.partyPicker.party.setPlayer(e,this.index,t),1==s){if(Q(t.spec)){const s=this.raidPicker.raid.getTanks(),a=s.findIndex((e=>null==this.raidPicker.raid.getPlayerFromRaidTarget(e)));-1==a?s.length<3&&this.raidPicker.raid.setTanks(e,s.concat([t.makeRaidTarget()])):(s[a]=t.makeRaidTarget(),this.raidPicker.raid.setTanks(e,s))}t.spec==P.SpecBalanceDruid?function(e,t){const s=t.getSpecOptions();s.innervateTarget=ie(t.getRaidIndex()),t.setSpecOptions(e,s)}(e,t):t.spec==P.SpecSmitePriest&&function(e,t){const s=t.getSpecOptions();s.powerInfusionTarget=ie(t.getRaidIndex()),t.setSpecOptions(e,s)}(e,t)}}else this.partyPicker.party.setPlayer(e,this.index,t),this.partyPicker.party.compChangeEmitter.emit(e)})),this.update())}update(){null==this.player?(this.rootElem.classList.add("empty"),this.rootElem.classList.remove("buff-bot"),this.rootElem.style.backgroundColor="black",this.labelElem.setAttribute("draggable","false"),this.resultsElem.setAttribute("draggable","false"),this.nameElem.textContent="",this.nameElem.removeAttribute("contenteditable")):this.player instanceof Vs?(this.rootElem.classList.remove("empty"),this.rootElem.classList.add("buff-bot"),this.rootElem.style.backgroundColor=B[R[this.player.spec]],this.labelElem.setAttribute("draggable","true"),this.resultsElem.setAttribute("draggable","true"),this.nameElem.textContent=this.player.name,this.nameElem.removeAttribute("contenteditable"),this.iconElem.src=this.player.settings.iconUrl):(this.rootElem.classList.remove("empty"),this.rootElem.classList.remove("buff-bot"),this.rootElem.style.backgroundColor=this.player.getClassColor(),this.labelElem.setAttribute("draggable","true"),this.resultsElem.setAttribute("draggable","true"),this.nameElem.textContent=this.player.getName(),this.nameElem.setAttribute("contenteditable",""),this.iconElem.src=this.player.getTalentTreeIcon())}}class oa extends x{constructor(e){super(document.body,"player-editor-modal"),this.rootElem.id="playerEditorModal",this.rootElem.innerHTML='\n\t\t\t<div class="player-editor within-raid-sim">\n\t\t\t</div>\n\t\t',new te(this.rootElem,(()=>{$("#playerEditorModal").bPopup().close(),this.rootElem.remove()}));const t=this.rootElem.getElementsByClassName("player-editor")[0];Ns[e.spec](t,e),$("#playerEditorModal").bPopup({closeClass:"player-editor-close",onClose:()=>{this.rootElem.remove()}})}}class la extends x{constructor(e,t){super(e,"new-player-picker-root"),this.raidPicker=t,this.rootElem.innerHTML='\n\t\t\t<div class="new-player-picker-controls">\n\t\t\t\t<div class="faction-selector"></div>\n\t\t\t\t<div class="phase-selector"></div>\n\t\t\t</div>\n\t\t\t<div class="presets-container"></div>\n\t\t\t<div class="buff-bots-container">\n\t\t\t\t<div class="buff-bots-title">\n\t\t\t\t\t<span class="buff-bots-title-text">Buff Bots</span>\n\t\t\t\t\t<span class="buff-bots-tooltip fa fa-info-circle"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t',new i(this.rootElem.getElementsByClassName("faction-selector")[0],this,{label:"Faction",labelTooltip:"Default faction for newly-created players.",values:[{name:"Alliance",value:k.Alliance},{name:"Horde",value:k.Horde}],changedEvent:e=>this.raidPicker.raid.sim.factionChangeEmitter,getValue:e=>this.raidPicker.raid.sim.getFaction(),setValue:(e,t,s)=>{this.raidPicker.raid.sim.setFaction(e,s)}}),new i(this.rootElem.getElementsByClassName("phase-selector")[0],this,{label:"Phase",labelTooltip:"Newly-created players will start with approximate BIS gear from this phase.",values:[{name:"1",value:1}],changedEvent:e=>this.raidPicker.raid.sim.phaseChangeEmitter,getValue:e=>this.raidPicker.raid.sim.getPhase(),setValue:(e,t,s)=>{this.raidPicker.raid.sim.setPhase(e,s)}});const s=this.rootElem.getElementsByClassName("presets-container")[0];se(T).forEach((e=>{if(e==T.ClassUnknown)return;const t=Ws.filter((t=>R[t.spec]==e));if(0==t.length)return;const a=document.createElement("div");a.classList.add("class-presets-container"),s.appendChild(a),a.style.backgroundColor=ae(B[e],.5),t.forEach((e=>{const t=document.createElement("div");t.classList.add("preset-picker"),a.appendChild(t);const s=document.createElement("img");s.classList.add("preset-picker-icon"),t.appendChild(s),s.src=e.iconUrl,tippy(s,{content:e.tooltip,allowHTML:!0}),t.setAttribute("draggable","true"),t.ondragstart=t=>{const s=y.nextEventID();y.freezeAllAndDo((()=>{const a=new Image;a.src=e.iconUrl,t.dataTransfer.setDragImage(a,30,30),t.dataTransfer.setData("text/plain",""),t.dataTransfer.dropEffect="copy";const n=new F(e.spec,this.raidPicker.raid.sim);n.applySharedDefaults(s),n.setRace(s,e.defaultFactionRaces[this.raidPicker.getCurrentFaction()]),n.setRotation(s,e.rotation),n.setTalentsString(s,e.talents.talentsString),n.setGlyphs(s,e.talents.glyphs||ne.create()),n.setSpecOptions(s,e.specOptions),n.setConsumes(s,e.consumes),n.setName(s,e.defaultName),n.setProfession1(s,e.otherDefaults?.profession1||re.Engineering),n.setProfession2(s,e.otherDefaults?.profession2||re.Jewelcrafting),n.setDistanceFromTarget(s,e.otherDefaults?.distanceFromTarget||0),this.raidPicker.raid.sim.waitForInit().then((()=>{n.setGear(s,this.raidPicker.raid.sim.lookupEquipmentSpec(e.defaultGear[this.raidPicker.getCurrentFaction()][this.raidPicker.getCurrentPhase()]))})),this.raidPicker.setDragPlayer(n,-1,1)}))}}))}));const a=this.rootElem.getElementsByClassName("buff-bots-tooltip")[0];tippy(a,{content:"Buff bots do not do DPS or any actions at all, except to buff their raid/party members. They are used as placeholders for classes we haven't implemented yet, or never will (e.g. healers) so that a proper raid environment can still be simulated.",allowHTML:!0});const n=this.rootElem.getElementsByClassName("buff-bots-container")[0];se(T).forEach((e=>{if(e==T.ClassUnknown)return;const t=Gs.filter((t=>R[t.spec]==e)).filter((e=>!e.deprecated));if(0==t.length)return;const s=document.createElement("div");s.classList.add("class-presets-container"),n.appendChild(s),s.style.backgroundColor=ae(B[e],.5),t.forEach((e=>{const t=document.createElement("div");t.classList.add("preset-picker"),t.classList.add("preset-picker-buff-bot"),s.appendChild(t);const a=document.createElement("img");a.classList.add("preset-picker-icon"),t.appendChild(a),a.src=e.iconUrl,tippy(a,{content:e.tooltip,allowHTML:!0}),t.setAttribute("draggable","true"),t.ondragstart=t=>{const s=new Image;s.src=e.iconUrl,t.dataTransfer.setDragImage(s,30,30),t.dataTransfer.setData("text/plain",""),t.dataTransfer.dropEffect="copy",this.raidPicker.setDragPlayer(new Vs(e.buffBotId,this.raidPicker.raidSimUI.sim),-1,1)}}))}))}}class ca extends x{constructor(e,t){super(e,"tanks-picker-root"),this.raidSimUI=t,this.rootElem.innerHTML='\n\t\t\t<fieldset class="tanks-picker-container settings-section">\n\t\t\t\t<legend>TANKS</legend>\n\t\t\t</fieldset>\n\t\t';const s=this.rootElem.getElementsByClassName("tanks-picker-container")[0],a=this.raidSimUI.sim.raid;for(let n=0;n<4;n++){const e=document.createElement("div");e.classList.add("tank-picker-row"),s.appendChild(e);const t=document.createElement("span");t.textContent=0==n?"MAIN TANK":`TANK ${n+1}`,t.classList.add("tank-picker-label"),e.appendChild(t);const r=document.createElement("span");r.classList.add("fa","fa-arrow-right"),e.appendChild(r);const i=n;new Ms(e,a,a,{extraCssClasses:["tank-picker"],noTargetLabel:"Unassigned",compChangeEmitter:a.compChangeEmitter,changedEvent:e=>e.tanksChangeEmitter,getValue:e=>e.getTanks()[i]||w(),setValue:(e,t,s)=>{const a=t.getTanks();for(let n=0;n<i;n++)a[n]||a.push(w());a[i]=s,t.setTanks(e,a)}})}}}const da=[];new class extends o{constructor(e,t){super(e,new l,{spec:null,launchStatus:c.Unlaunched,knownIssues:(t.knownIssues||[]).concat(da)}),this.raidSimResultsManager=null,this.raidPicker=null,this.blessingsPicker=null,this.compChangeEmitter=new y,this.changeEmitter=new y,this.referenceChangeEmitter=new y,this.rootElem.classList.add("raid-sim-ui"),this.config=t,this.settingsMuuri=null,this.sim.raid.compChangeEmitter.on((e=>this.compChangeEmitter.emit(e))),this.sim.setModifyRaidProto((e=>this.modifyRaidProto(e))),[this.compChangeEmitter,this.sim.changeEmitter].forEach((e=>e.on((e=>this.changeEmitter.emit(e))))),this.sim.waitForInit().then((()=>this.loadSettings())),this.addSidebarComponents(),this.addTopbarComponents(),this.addRaidTab(),this.addSettingsTab(),this.addDetailedResultsTab(),this.addLogTab(),this.changeEmitter.on((()=>this.recomputeSettingsLayout()))}loadSettings(){const e=y.nextEventID();y.freezeAllAndDo((()=>{let t=!1;const s=window.localStorage.getItem(this.getSettingsStorageKey());if(null!=s)try{const a=z.fromJsonString(s);this.fromProto(e,a),t=!0}catch(a){console.warn("Failed to parse saved settings: "+a)}t||this.applyDefaults(e),this.changeEmitter.on((e=>{const t=z.toJsonString(this.toProto());window.localStorage.setItem(this.getSettingsStorageKey(),t)}))}))}addSidebarComponents(){this.raidSimResultsManager=oe(this),this.raidSimResultsManager.changeEmitter.on((e=>this.referenceChangeEmitter.emit(e)))}addTopbarComponents(){this.addToolbarItem(function(e){const t=document.createElement("div");t.classList.add("import-settings","sim-dropdown-menu"),t.innerHTML="\n\t\t<span id='importMenuLink' class='dropdown-toggle fas fa-file-import' role='button' data-toggle='dropdown' aria-haspopup='true' arai-expanded='false'></span>\n\t\t<div class='dropdown-menu dropdown-menu-right' aria-labelledby='importMenuLink'>\n\t\t</div>\n\t";const s=t.getElementsByClassName("dropdown-toggle")[0];tippy(s,{content:"Import",allowHTML:!0});const a=t.getElementsByClassName("dropdown-menu")[0],n=(e,t,s)=>{const n=document.createElement("span");n.classList.add("dropdown-item"),n.textContent=e,n.addEventListener("click",s),a.appendChild(n)};return n("Json",0,(()=>new Xs(a,e))),n("WCL",0,(()=>new Qs(a,e))),t}(this)),this.addToolbarItem(function(e){const t=document.createElement("div");t.classList.add("export-settings","sim-dropdown-menu"),t.innerHTML="\n\t\t<span id='exportMenuLink' class='dropdown-toggle fas fa-file-export' role='button' data-toggle='dropdown' aria-haspopup='true' arai-expanded='false'></span>\n\t\t<div class='dropdown-menu dropdown-menu-right' aria-labelledby='exportMenuLink'>\n\t\t</div>\n\t";const s=t.getElementsByClassName("dropdown-toggle")[0];tippy(s,{content:"Export",allowHTML:!0});const a=t.getElementsByClassName("dropdown-menu")[0];return((e,t)=>{const s=document.createElement("span");s.classList.add("dropdown-item"),s.textContent=e,s.addEventListener("click",t),a.appendChild(s)})("Json",(()=>new Zs(a,e))),t}(this));const e=document.createElement("span");e.classList.add("fas","fa-cog"),tippy(e,{content:"Settings",allowHTML:!0}),e.addEventListener("click",(e=>{new d(this.rootElem,this)})),this.addToolbarItem(e)}addRaidTab(){this.addTab("RAID","raid-tab",'\n\t\t\t<div class="raid-picker">\n\t\t\t</div>\n\t\t\t<div class="saved-raids-div">\n\t\t\t\t<div class="saved-raids-manager">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t'),this.raidPicker=new na(this.rootElem.getElementsByClassName("raid-picker")[0],this);const e=new m(this.rootElem.getElementsByClassName("saved-raids-manager")[0],this,{label:"Raid",storageKey:this.getSavedRaidStorageKey(),getData:e=>le.create({raid:this.sim.raid.toProto(),buffBots:this.getBuffBots().map((e=>e.toProto())),blessings:this.blessingsPicker.getAssignments(),faction:this.sim.getFaction(),phase:this.sim.getPhase()}),setData:(e,t,s)=>{y.freezeAllAndDo((()=>{this.sim.raid.fromProto(e,s.raid||V.create()),this.raidPicker.setBuffBots(e,s.buffBots),this.blessingsPicker.setAssignments(e,s.blessings||O.create()),s.faction&&this.sim.setFaction(e,s.faction),s.phase&&this.sim.setPhase(e,s.phase)}))},changeEmitters:[this.changeEmitter,this.sim.changeEmitter],equals:(e,t)=>le.equals(e,t),toJson:e=>le.toJson(e),fromJson:e=>le.fromJson(e)});this.sim.waitForInit().then((()=>{e.loadUserData()}))}addSettingsTab(){this.addTab("SETTINGS","raid-settings-tab",'\n\t\t\t<div class="raid-settings-sections">\n\t\t\t\t<div class="settings-section-container raid-settings-section-container">\n\t\t\t\t\t<fieldset class="settings-section raid-encounter-section">\n\t\t\t\t\t\t<legend>Encounter</legend>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</div>\n\t\t\t\t<div class="settings-section-container blessings-section-container">\n\t\t\t\t\t<fieldset class="settings-section blessings-section">\n\t\t\t\t\t\t<legend>Blessings</legend>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</div>\n\t\t\t\t<div class="settings-section-container assignments-section-container">\n\t\t\t\t</div>\n\t\t\t\t<div class="settings-section-container tanks-section-container">\n\t\t\t\t</div>\n\t\t\t\t<div class="settings-section-container raid-settings-section-container">\n\t\t\t\t\t<fieldset class="settings-section other-options-section">\n\t\t\t\t\t\t<legend>Other Options</legend>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="settings-bottom-bar">\n\t\t\t\t<div class="saved-encounter-manager">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t');const e=this.rootElem.getElementsByClassName("raid-encounter-section")[0];new p(e,this.sim.encounter,{showExecuteProportion:!0},this);const t=new m(this.rootElem.getElementsByClassName("saved-encounter-manager")[0],this.sim.encounter,{label:"Encounter",storageKey:this.getSavedEncounterStorageKey(),getData:e=>ce.create({encounter:e.toProto()}),setData:(e,t,s)=>t.fromProto(e,s.encounter),changeEmitters:[this.sim.encounter.changeEmitter],equals:(e,t)=>ce.equals(e,t),toJson:e=>ce.toJson(e),fromJson:e=>ce.fromJson(e)});this.sim.waitForInit().then((()=>{t.loadUserData()}));const s=this.rootElem.getElementsByClassName("blessings-section")[0];this.blessingsPicker=new Ys(s,this),this.blessingsPicker.changeEmitter.on((e=>this.changeEmitter.emit(e))),tippy(s,{content:h,allowHTML:!0,placement:"left"}),new _s(this.rootElem.getElementsByClassName("assignments-section-container")[0],this),new ca(this.rootElem.getElementsByClassName("tanks-section-container")[0],this),this.rootElem.getElementsByClassName("other-options-section")[0],this.rootElem.getElementsByClassName("raid-settings-tab-tab")[0].addEventListener("click",(e=>{null==this.settingsMuuri&&setTimeout((()=>{this.settingsMuuri=new Muuri(".raid-settings-sections")}),200),setTimeout((()=>{this.recomputeSettingsLayout()}),200)}))}addDetailedResultsTab(){this.addTab("DETAILED RESULTS","detailed-results-tab",'\n\t\t\t<div class="detailed-results">\n\t\t\t</div>\n\t\t'),new u(this.rootElem.getElementsByClassName("detailed-results")[0],this,this.raidSimResultsManager)}addLogTab(){this.addTab("LOG","log-tab",'\n\t\t\t<div class="log-runner">\n\t\t\t</div>\n\t\t'),new g(this.rootElem.getElementsByClassName("log-runner")[0],this)}recomputeSettingsLayout(){this.settingsMuuri,window.dispatchEvent(new Event("resize"))}modifyRaidProto(e){this.getBuffBots().forEach((t=>{const s=e.parties[t.getPartyIndex()];if(!s)throw new Error("No party proto for party index: "+t.getPartyIndex());t.settings.modifyRaidProto(t,e,s)}));const t=this.getClassCount(T.ClassPaladin),s=this.blessingsPicker.getAssignments();zs.forEach((a=>{const n=e.parties.map((e=>e.players.filter((e=>e.class!=T.ClassUnknown&&A(e)==a)))).flat();s.paladins.forEach(((e,s)=>{s>=t||(e.blessings[a]==M.BlessingOfKings?n.forEach((e=>e.buffs.blessingOfKings=!0)):e.blessings[a]==M.BlessingOfMight?n.forEach((e=>e.buffs.blessingOfMight=C.TristateEffectImproved)):e.blessings[a]==M.BlessingOfWisdom?n.forEach((e=>e.buffs.blessingOfWisdom=C.TristateEffectImproved)):e.blessings[a]==M.BlessingOfSanctuary&&n.forEach((e=>e.buffs.blessingOfSanctuary=!0)))}))}))}getCurrentData(){return this.raidSimResultsManager?this.raidSimResultsManager.getCurrentData():null}getReferenceData(){return this.raidSimResultsManager?this.raidSimResultsManager.getReferenceData():null}getClassCount(e){return this.sim.raid.getClassCount(e)+this.getBuffBots().filter((t=>t.getClass()==e)).length}getBuffBots(){return this.raidPicker.getBuffBots()}setBuffBots(e,t){this.raidPicker.setBuffBots(e,t)}clearBuffBots(e){this.raidPicker.setBuffBots(e,[])}getPlayersAndBuffBots(){const e=this.sim.raid.getPlayers(),t=this.getBuffBots(),s=e.slice();return t.forEach((e=>{s[e.getRaidIndex()]=e})),s}applyDefaults(e){y.freezeAllAndDo((()=>{this.sim.raid.fromProto(e,V.create()),this.sim.encounter.applyDefaults(e),this.sim.applyDefaults(e,!0,!0),this.sim.setShowDamageMetrics(e,!0)}))}toProto(){return z.create({settings:this.sim.toProto(),raid:this.sim.raid.toProto(!0),buffBots:this.getBuffBots().map((e=>e.toProto())),blessings:this.blessingsPicker.getAssignments(),encounter:this.sim.encounter.toProto()})}toLink(){const e=this.toProto();e.settings=void 0;const t=z.toBinary(e),s=pako.deflate(t,{to:"string"}),a=btoa(String.fromCharCode(...s)),n=new URL(window.location.href);return n.hash=a,n.toString()}fromProto(e,t){y.freezeAllAndDo((()=>{t.settings&&this.sim.fromProto(e,t.settings),this.sim.raid.fromProto(e,t.raid||V.create()),this.sim.encounter.fromProto(e,t.encounter||G.create()),this.raidPicker.setBuffBots(e,t.buffBots),this.blessingsPicker.setAssignments(e,t.blessings||O.create())}))}clearRaid(e){this.sim.raid.clear(e),this.clearBuffBots(e)}getStorageKey(e){return"__wotlk_raid__"+e}getSavedRaidStorageKey(){return this.getStorageKey("__savedRaid__")}}(document.body,{});
//# sourceMappingURL=index-08a57293.entry.js.map
