import{bz as n,T as e,bA as t,bB as a,bC as o,bD as i,bE as l,a6 as s,bF as r,bG as m,N as h,g as d,bs as g,b1 as c,bH as u,bI as p,bJ as f,bK as y,ab as b,ac as S,bo as T,b4 as R,b7 as C,b9 as E,b3 as w,b8 as D,a_ as v,d as B,a as A,R as O,a3 as P,bm as W,bn as G,D as I}from"./raid_sim_action-9e0deda9.chunk.js";import{h as F,i as H,b as k,c as U,a as M,j as N,B as z,I as x,k as j,l as J,n as _,o as K,D as V,p as q,T as L,q as Q}from"./individual_sim_ui-458732be.chunk.js";const X=F({fieldName:"unholyFrenzyTarget",label:"Self Unholy Frenzy",labelTooltip:"Cast Unholy Frenzy on yourself.",extraCssClasses:["within-raid-sim-hide"],getValue:n=>n.getSpecOptions().unholyFrenzyTarget?.targetIndex!=h,setValue:(n,e,t)=>{const a=e.getSpecOptions();a.unholyFrenzyTarget=d.create({targetIndex:t?0:h}),e.setSpecOptions(n,a)},showWhen:n=>n.getTalents().hysteria,changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter])}),Y=H({fieldName:"startingRunicPower",label:"Starting Runic Power",labelTooltip:"Initial RP at the start of each iteration."}),Z=H({fieldName:"petUptime",label:"Ghoul Uptime (%)",labelTooltip:"Percent of the fight duration for which your ghoul will be on target.",percent:!0,showWhen:n=>n.getTalents().masterOfGhouls}),$=F({fieldName:"precastGhoulFrenzy",label:"Pre-Cast Ghoul Frenzy",labelTooltip:"Cast Ghoul Frenzy 10 seconds before combat starts.",showWhen:n=>n.getTalents().summonGargoyle&&n.getTalents().ghoulFrenzy,changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter])}),nn=F({fieldName:"precastHornOfWinter",label:"Pre-Cast Horn of Winter",labelTooltip:"Precast Horn of Winter for 10 extra runic power before fight."});k({fieldName:"refreshHornOfWinter",label:"Refresh Horn of Winter",labelTooltip:"Refresh Horn of Winter on free GCDs."}),U({fieldName:"diseaseRefreshDuration",label:"Disease Refresh Duration",labelTooltip:"Minimum duration for refreshing a disease."});const en=k({fieldName:"useDeathAndDecay",label:"Death and Decay",labelTooltip:"Use Death and Decay based rotation.",showWhen:n=>n.getTalents().summonGargoyle&&n.getTalents().scourgeStrike&&!n.getRotation().autoRotation,changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter])});M({fieldName:"deathAndDecayPrio",label:"Death and Decay Prio",labelTooltip:"<p>Chose how to prioritize death and decay usage:</p>\t\t<p><b>Max Rune Downtime</b>: Prioritizes spending runes over holding them for death and decay</p>\t\t<p><b>Max Dnd Uptime</b>: Prioritizes dnd uptime and can hold runes for longer then rune grace</p>",values:[{name:"Max Rune Downtime",value:n.MaxRuneDowntime},{name:"Max Dnd Uptime",value:n.MaxDndUptime}],showWhen:n=>n.getTalents().summonGargoyle&&(n.getRotation().useDeathAndDecay||!n.getTalents().scourgeStrike)&&!n.getRotation().autoRotation,changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter])});const tn=k({fieldName:"useEmpowerRuneWeapon",label:"Empower Rune Weapon",labelTooltip:"Use Empower Rune Weapon in rotation.",showWhen:n=>!n.getRotation().autoRotation&&n.getRotation().frostRotationType!=m.Custom}),an=M({fieldName:"blPresence",label:"Bloodlust Presence",labelTooltip:"Presence during bloodlust.",values:[{name:"Blood",value:t.Blood},{name:"Unholy",value:t.Unholy}],showWhen:n=>n.getTalents().summonGargoyle&&!n.getRotation().autoRotation,changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter])}),on=k({fieldName:"btGhoulFrenzy",label:"BT Ghoul Frenzy",labelTooltip:"Use Ghoul Frenzy only with Blood Tap.",showWhen:n=>n.getTalents().ghoulFrenzy&&!n.getRotation().autoRotation,changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter])}),ln=M({fieldName:"firstDisease",label:"First Disease",labelTooltip:"Chose which disease to apply first.",values:[{name:"Frost Fever",value:a.FrostFever},{name:"Blood Plague",value:a.BloodPlague}],showWhen:n=>n.getTalents().summonGargoyle&&!n.getRotation().autoRotation,changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter])}),sn=M({fieldName:"armyOfTheDead",label:"Army of the Dead",labelTooltip:"Chose how to use Army of the Dead.",values:[{name:"Do not use",value:o.DoNotUse},{name:"Pre pull",value:o.PreCast},{name:"As Major CD",value:o.AsMajorCd}]}),rn=M({fieldName:"startingPresence",label:"Starting Presence",labelTooltip:"Chose the presence you start combat in.",values:[{name:"Blood",value:t.Blood},{name:"Unholy",value:t.Unholy}],showWhen:n=>n.getTalents().summonGargoyle&&!n.getRotation().autoRotation,changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter])}),mn=M({fieldName:"bloodRuneFiller",label:"Blood Rune Filler",labelTooltip:"Chose what to spend your free blood runes on.",values:[{name:"Blood Strike",value:i.BloodStrike},{name:"Blood Boil",value:i.BloodBoil}],showWhen:n=>n.getTalents().summonGargoyle&&!n.getRotation().autoRotation,changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter])}),hn=M({fieldName:"bloodTap",label:"Blood Tap",labelTooltip:"Chose what to spend your Blood Tap on.",values:[{name:"Ghoul Frenzy",value:l.GhoulFrenzy},{name:"Icy Touch",value:l.IcyTouch},{name:"Blood Strike",value:l.BloodStrikeBT},{name:"Blood Boil",value:l.BloodBoilBT}],showWhen:n=>n.getTalents().summonGargoyle&&!n.getRotation().autoRotation,changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter])}),dn=k({fieldName:"useAms",label:"Use AMS",labelTooltip:"Use AMS around predicted damage for a RP gain.",showWhen:n=>n.getTalents().howlingBlast&&!n.getRotation().autoRotation&&n.getRotation().frostRotationType!=m.Custom,changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter])}),gn=U({fieldName:"avgAmsSuccessRate",label:"Avg AMS Success %",labelTooltip:"Chance for damage to be taken during the 5 second window of AMS.",showWhen:n=>1==n.getRotation().useAms&&!n.getRotation().autoRotation&&n.getTalents().howlingBlast&&n.getRotation().frostRotationType!=m.Custom,changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter])}),cn=U({fieldName:"avgAmsHit",label:"Avg AMS Hit",labelTooltip:"How much on average (+-10%) the character is hit for when AMS is successful.",showWhen:n=>1==n.getRotation().useAms&&!n.getRotation().autoRotation&&n.getTalents().howlingBlast&&n.getRotation().frostRotationType!=m.Custom,changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter])}),un=U({fieldName:"oblitDelayDuration",label:"Oblit Delay (ms)",labelTooltip:"How long a FS/HB/HW can delay a Oblit by.",showWhen:n=>n.getTalents().howlingBlast&&!n.getRotation().autoRotation&&n.getRotation().frostRotationType!=m.Custom,changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter])}),pn=k({fieldName:"autoRotation",label:"Automatic Rotation",labelTooltip:"Have sim automatically adjust rotation based on the scenario. This is still in development and currently only works for Unholy.",changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter]),showWhen:n=>!n.getTalents().howlingBlast}),fn=k({fieldName:"desyncRotation",label:"Use Desync Rotation",labelTooltip:"Use the Desync Rotation.",showWhen:n=>n.getTalents().howlingBlast&&!n.getRotation().autoRotation&&n.sim.getShowExperimental(),changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter])}),yn=M({fieldName:"presence",label:"Presence",labelTooltip:"Presence to be in during the encounter.",values:[{name:"Blood",value:t.Blood},{name:"Frost",value:t.Frost},{name:"Unholy",value:t.Unholy}],showWhen:n=>n.getTalents().howlingBlast&&!n.getRotation().autoRotation,changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter])}),bn=N({fieldName:"frostCustomRotation",numColumns:4,values:[{actionId:s.fromSpellId(49909),value:r.CustomIcyTouch},{actionId:s.fromSpellId(49921),value:r.CustomPlagueStrike},{actionId:s.fromSpellId(50842),value:r.CustomPestilence},{actionId:s.fromSpellId(51425),value:r.CustomObliterate},{actionId:s.fromSpellId(51411),value:r.CustomHowlingBlast},{actionId:s.fromSpellId(59057),value:r.CustomHowlingBlastRime},{actionId:s.fromSpellId(49941),value:r.CustomBloodBoil},{actionId:s.fromSpellId(49930),value:r.CustomBloodStrike},{actionId:s.fromSpellId(49938),value:r.CustomDeathAndDecay},{actionId:s.fromSpellId(57623),value:r.CustomHornOfWinter},{actionId:s.fromSpellId(51271),value:r.CustomUnbreakableArmor},{actionId:s.fromSpellId(45529),value:r.CustomBloodTap},{actionId:s.fromSpellId(47568),value:r.CustomEmpoweredRuneWeapon},{actionId:s.fromSpellId(55268),value:r.CustomFrostStrike}],showWhen:n=>n.getRotation().frostRotationType==m.Custom}),Sn={inputs:[M({fieldName:"frostRotationType",label:"Rotation Type",values:[{name:"Single Target",value:m.SingleTarget},{name:"Custom",value:m.Custom}],changeEmitter:n=>e.onAny([n.rotationChangeEmitter,n.talentsChangeEmitter]),showWhen:n=>n.getTalents().howlingBlast&&!n.getRotation().autoRotation}),yn,pn,on,tn,hn,sn,ln,rn,an,mn,en,un,dn,gn,cn,fn,bn]},Tn={name:"Frost BL",data:g.create({talentsString:"23050005-32005350352203012300033101351",glyphs:c.create({major1:u.GlyphOfObliterate,major2:u.GlyphOfFrostStrike,major3:u.GlyphOfDisease,minor1:p.GlyphOfHornOfWinter,minor2:p.GlyphOfPestilence,minor3:p.GlyphOfRaiseDead})})},Rn={name:"Frost UH",data:g.create({talentsString:"-32002350352203012300033101351-230200305003",glyphs:c.create({major1:u.GlyphOfObliterate,major2:u.GlyphOfFrostStrike,major3:u.GlyphOfDisease,minor1:p.GlyphOfHornOfWinter,minor2:p.GlyphOfPestilence,minor3:p.GlyphOfRaiseDead})})},Cn={name:"Unholy DW",data:g.create({talentsString:"-320043500002-2300303050032152000150013133051",glyphs:c.create({major1:u.GlyphOfTheGhoul,major2:u.GlyphOfDarkDeath,major3:u.GlyphOfDeathAndDecay,minor1:p.GlyphOfHornOfWinter,minor2:p.GlyphOfPestilence,minor3:p.GlyphOfRaiseDead})})},En={name:"Unholy 2H",data:g.create({talentsString:"-320050500002-2300303150032152000150013133151",glyphs:c.create({major1:u.GlyphOfTheGhoul,major2:u.GlyphOfDarkDeath,major3:u.GlyphOfIcyTouch,minor1:p.GlyphOfHornOfWinter,minor2:p.GlyphOfPestilence,minor3:p.GlyphOfRaiseDead})})},wn={name:"Blood DPS",data:g.create({talentsString:"2305020530003303231023101351--230220305003",glyphs:c.create({major1:u.GlyphOfDancingRuneWeapon,major2:u.GlyphOfDeathStrike,major3:u.GlyphOfDarkDeath,minor1:p.GlyphOfHornOfWinter,minor2:p.GlyphOfPestilence,minor3:p.GlyphOfRaiseDead})})},Dn=f.create({useDeathAndDecay:!0,btGhoulFrenzy:!0,refreshHornOfWinter:!1,useEmpowerRuneWeapon:!0,startingPresence:t.Unholy,bloodRuneFiller:i.BloodBoil,useAms:!1}),vn=y.create({startingRunicPower:0,petUptime:1,precastGhoulFrenzy:!0,precastHornOfWinter:!0,unholyFrenzyTarget:d.create({targetIndex:h})}),Bn=f.create({useDeathAndDecay:!1,btGhoulFrenzy:!1,refreshHornOfWinter:!1,useEmpowerRuneWeapon:!0,startingPresence:t.Blood,presence:t.Blood,bloodRuneFiller:i.BloodBoil,useAms:!1,avgAmsSuccessRate:1,avgAmsHit:1e4,oblitDelayDuration:0,frostRotationType:m.SingleTarget,frostCustomRotation:b.create({spells:[S.create({spell:r.CustomDeathAndDecay}),S.create({spell:r.CustomIcyTouch}),S.create({spell:r.CustomPlagueStrike}),S.create({spell:r.CustomPestilence}),S.create({spell:r.CustomHowlingBlastRime}),S.create({spell:r.CustomHowlingBlast}),S.create({spell:r.CustomBloodBoil}),S.create({spell:r.CustomObliterate}),S.create({spell:r.CustomFrostStrike})]})}),An=y.create({startingRunicPower:0,petUptime:1,precastHornOfWinter:!0,unholyFrenzyTarget:d.create({targetIndex:h})}),On=f.create({refreshHornOfWinter:!1,useEmpowerRuneWeapon:!0,startingPresence:t.Blood,bloodRuneFiller:i.BloodStrike,useAms:!1}),Pn=y.create({startingRunicPower:0,petUptime:1,precastHornOfWinter:!0,unholyFrenzyTarget:d.create({targetIndex:h})}),Wn={},Gn=T.create({flask:R.FlaskOfEndlessRage,food:C.FoodDragonfinFilet,defaultPotion:E.PotionOfSpeed,petFood:w.PetFoodSpicedMammothTreats,prepopPotion:E.PotionOfSpeed,thermalSapper:!0,fillerExplosive:D.ExplosiveSaroniteBomb}),In={name:"Pre-Raid 2H Unholy",toolbar:z,enableWhen:n=>n.getTalents().summonGargoyle,gear:v.fromJsonString('{ "items": [\n    {\n      "id": 41386,\n      "enchant": 44879,\n      "gems": [\n        41400,\n        49110\n      ]\n    },\n    {\n      "id": 37397\n    },\n    {\n      "id": 37627,\n      "enchant": 44871,\n      "gems": [\n        39996\n      ]\n    },\n    {\n      "id": 37647,\n      "enchant": 44472\n    },\n    {\n      "id": 39617,\n      "enchant": 44489,\n      "gems": [\n        42142,\n        39996\n      ]\n    },\n    {\n      "id": 41355,\n      "enchant": 44484,\n      "gems": [\n        0\n      ]\n    },\n    {\n      "id": 39618,\n      "enchant": 54999,\n      "gems": [\n        39996,\n        0\n      ]\n    },\n    {\n      "id": 40688,\n      "gems": [\n        39996,\n        42142\n      ]\n    },\n    {\n      "id": 37193,\n      "enchant": 38374,\n      "gems": [\n        42142,\n        39996\n      ]\n    },\n    {\n      "id": 44306,\n      "enchant": 55016,\n      "gems": [\n        39996,\n        39996\n      ]\n    },\n    {\n      "id": 37642\n    },\n    {\n      "id": 44935\n    },\n    {\n      "id": 40684\n    },\n    {\n      "id": 42987\n    },\n    {\n      "id": 41257,\n      "enchant": 53344\n    },\n    {},\n    {\n      "id": 40867\n    }\n  ]}')},Fn={name:"P1 2H Unholy",toolbar:z,enableWhen:n=>n.getTalents().summonGargoyle,gear:v.fromJsonString('{ "items": [\n    {\n      "id": 44006,\n      "enchant": 44879,\n      "gems": [\n        41400,\n        49110\n      ]\n    },\n    {\n      "id": 44664,\n      "gems": [\n        39996\n      ]\n    },\n    {\n      "id": 40557,\n      "enchant": 44871,\n      "gems": [\n        39996\n      ]\n    },\n    {\n      "id": 40403,\n      "enchant": 44472\n    },\n    {\n      "id": 40550,\n      "enchant": 44489,\n      "gems": [\n        42142,\n        39996\n      ]\n    },\n    {\n      "id": 40330,\n      "enchant": 44484,\n      "gems": [\n        39996,\n        0\n      ]\n    },\n    {\n      "id": 40552,\n      "enchant": 54999,\n      "gems": [\n        40038,\n        0\n      ]\n    },\n    {\n      "id": 40278,\n      "gems": [\n        42142,\n        42142\n      ]\n    },\n    {\n      "id": 40556,\n      "enchant": 38374,\n      "gems": [\n        39996,\n        39996\n      ]\n    },\n    {\n      "id": 40591,\n      "enchant": 55016\n    },\n    {\n      "id": 39401\n    },\n    {\n      "id": 40075\n    },\n    {\n      "id": 40256\n    },\n    {\n      "id": 42987\n    },\n    {\n      "id": 40384,\n      "enchant": 53344\n    },\n    {},\n    {\n      "id": 40207\n    }\n  ]}')},Hn={name:"Pre-Raid DW Unholy",toolbar:z,enableWhen:n=>n.getTalents().summonGargoyle,gear:v.fromJsonString('{"items": [\n    {\n      "id": 41386,\n      "enchant": 44879,\n      "gems": [\n        41400,\n        49110\n      ]\n    },\n    {\n      "id": 37397\n    },\n    {\n      "id": 37627,\n      "enchant": 44871,\n      "gems": [\n        39996\n      ]\n    },\n    {\n      "id": 37647,\n      "enchant": 44472\n    },\n    {\n      "id": 39617,\n      "enchant": 44489,\n      "gems": [\n        42142,\n        39996\n      ]\n    },\n    {\n      "id": 41355,\n      "enchant": 44484,\n      "gems": [\n        0\n      ]\n    },\n    {\n      "id": 39618,\n      "enchant": 54999,\n      "gems": [\n        39996,\n        0\n      ]\n    },\n    {\n      "id": 40688,\n      "gems": [\n        39996,\n        42142\n      ]\n    },\n    {\n      "id": 37193,\n      "enchant": 38374,\n      "gems": [\n        42142,\n        39996\n      ]\n    },\n    {\n      "id": 44306,\n      "enchant": 55016,\n      "gems": [\n        39996,\n        39996\n      ]\n    },\n    {\n      "id": 37642\n    },\n    {\n      "id": 44935\n    },\n    {\n      "id": 40684\n    },\n    {\n      "id": 42987\n    },\n    {\n      "id": 41383,\n      "enchant": 53344\n    },\n    {\n      "id": 40703,\n      "enchant": 44495\n    },\n    {\n      "id": 40867\n    }\n  ]}')},kn={name:"P1 DW Unholy",toolbar:z,enableWhen:n=>n.getTalents().summonGargoyle,gear:v.fromJsonString('{"items": [\n    {\n      "id": 44006,\n      "enchant": 44879,\n      "gems": [\n        41398,\n        42702\n      ]\n    },\n    {\n      "id": 39421\n    },\n    {\n      "id": 40557,\n      "enchant": 44871,\n      "gems": [\n        39996\n      ]\n    },\n    {\n      "id": 40403,\n      "enchant": 44472\n    },\n    {\n      "id": 40550,\n      "enchant": 44489,\n      "gems": [\n        42142,\n        39996\n      ]\n    },\n    {\n      "id": 40330,\n      "enchant": 44484,\n      "gems": [\n        39996,\n        0\n      ]\n    },\n    {\n      "id": 40347,\n      "enchant": 54999,\n      "gems": [\n        39996,\n        0\n      ]\n    },\n    {\n      "id": 40278,\n      "gems": [\n        42142,\n        42142\n      ]\n    },\n    {\n      "id": 40294,\n      "enchant": 38374\n    },\n    {\n      "id": 39706,\n      "enchant": 55016,\n      "gems": [\n        39996\n      ]\n    },\n    {\n      "id": 39401\n    },\n    {\n      "id": 40075\n    },\n    {\n      "id": 37390\n    },\n    {\n      "id": 42987\n    },\n    {\n      "id": 40402,\n      "enchant": 53344\n    },\n    {\n      "id": 40491,\n      "enchant": 53344\n    },\n    {\n      "id": 42620\n    }\n  ]}')},Un={name:"Pre-Raid Frost",tooltip:z,enableWhen:n=>n.getTalents().howlingBlast,gear:v.fromJsonString('{   "items": [\n    {\n      "id": 41386,\n      "enchant": 44879,\n      "gems": [\n        41398,\n        49110\n      ]\n    },\n    {\n      "id": 42645,\n      "gems": [\n        42142\n      ]\n    },\n    {\n      "id": 34388,\n      "enchant": 44871,\n      "gems": [\n        39996,\n        39996\n      ]\n    },\n    {\n      "id": 37647,\n      "enchant": 44472\n    },\n    {\n      "id": 39617,\n      "enchant": 44489,\n      "gems": [\n        42142,\n        39996\n      ]\n    },\n    {\n      "id": 41355,\n      "enchant": 44484,\n      "gems": [\n        0\n      ]\n    },\n    {\n      "id": 39618,\n      "enchant": 54999,\n      "gems": [\n        39996,\n        0\n      ]\n    },\n    {\n      "id": 37171,\n      "gems": [\n        39996,\n        39996\n      ]\n    },\n    {\n      "id": 37193,\n      "enchant": 38374,\n      "gems": [\n        42142,\n        39996\n      ]\n    },\n    {\n      "id": 44306,\n      "enchant": 55016,\n      "gems": [\n        39996,\n        39996\n      ]\n    },\n    {\n      "id": 42642,\n      "gems": [\n        39996\n      ]\n    },\n    {\n      "id": 44935\n    },\n    {\n      "id": 40684\n    },\n    {\n      "id": 42987\n    },\n    {\n      "id": 41383,\n      "enchant": 53343\n    },\n    {\n      "id": 43611,\n      "enchant": 53344\n    },\n    {\n      "id": 40715\n    }\n  ]}')},Mn={name:"P1 Frost",tooltip:z,enableWhen:n=>n.getTalents().howlingBlast,gear:v.fromJsonString('{   "items": [\n    {\n      "id": 44006,\n      "enchant": 44879,\n      "gems": [\n        41398,\n        42702\n      ]\n    },\n    {\n      "id": 44664,\n      "gems": [\n        39996\n      ]\n    },\n    {\n      "id": 40557,\n      "enchant": 44871,\n      "gems": [\n        39996\n      ]\n    },\n    {\n      "id": 40403,\n      "enchant": 44472\n    },\n    {\n      "id": 40550,\n      "enchant": 44489,\n      "gems": [\n        42142,\n        39996\n      ]\n    },\n    {\n      "id": 40330,\n      "enchant": 44484,\n      "gems": [\n        39996,\n        0\n      ]\n    },\n    {\n      "id": 40552,\n      "enchant": 54999,\n      "gems": [\n        39996,\n        0\n      ]\n    },\n    {\n      "id": 40278,\n      "gems": [\n        39996,\n        42142\n      ]\n    },\n    {\n      "id": 40556,\n      "enchant": 38374,\n      "gems": [\n        42142,\n        39996\n      ]\n    },\n    {\n      "id": 40591,\n      "enchant": 55016\n    },\n    {\n      "id": 39401\n    },\n    {\n      "id": 40075\n    },\n    {\n      "id": 40256\n    },\n    {\n      "id": 42987\n    },\n    {\n      "id": 40189,\n      "enchant": 53343\n    },\n    {\n      "id": 40189,\n      "enchant": 53344\n    },\n    {\n      "id": 40207\n    }\n  ]}')},Nn={name:"P1 Blood",toolbar:z,enableWhen:n=>n.getTalents().dancingRuneWeapon,gear:v.fromJsonString('{ "items": [\n    {\n      "id": 44006,\n      "enchant": 44879,\n      "gems": [\n        41398,\n        49110\n      ]\n    },\n    {\n      "id": 44664,\n      "gems": [\n        39996\n      ]\n    },\n    {\n      "id": 40557,\n      "enchant": 44871,\n      "gems": [\n        39996\n      ]\n    },\n    {\n      "id": 40250,\n      "enchant": 44472\n    },\n    {\n      "id": 40550,\n      "enchant": 44489,\n      "gems": [\n        42142,\n        39996\n      ]\n    },\n    {\n      "id": 40330,\n      "enchant": 44484,\n      "gems": [\n        39996,\n        0\n      ]\n    },\n    {\n      "id": 40552,\n      "enchant": 54999,\n      "gems": [\n        40038,\n        0\n      ]\n    },\n    {\n      "id": 40278,\n      "gems": [\n        42142,\n        42142\n      ]\n    },\n    {\n      "id": 40556,\n      "enchant": 38374,\n      "gems": [\n        39996,\n        39996\n      ]\n    },\n    {\n      "id": 40591,\n      "enchant": 55016\n    },\n    {\n      "id": 43993,\n      "gems": [\n        39996\n      ]\n    },\n    {\n      "id": 40075\n    },\n    {\n      "id": 40256\n    },\n    {\n      "id": 42987\n    },\n    {\n      "id": 40384,\n      "enchant": 53344\n    },\n    {},\n    {\n      "id": 40207\n    }\n  ]}')};class zn extends x{constructor(n,e){super(n,e,{cssClass:"deathknight-sim-ui",knownIssues:["<p>Blood dps is not implemented.</p>\t\t\t\t<p>Rotation logic is not fully tuned yet.</p>\t\t\t\t<p>Pet scaling is likely to not be properly working until further beta testing.</p>"],epStats:[B.StatStrength,B.StatArmor,B.StatAgility,B.StatAttackPower,B.StatExpertise,B.StatMeleeHit,B.StatMeleeCrit,B.StatMeleeHaste,B.StatArmorPenetration,B.StatSpellHit,B.StatSpellCrit,B.StatSpellHaste],epReferenceStat:B.StatAttackPower,displayStats:[B.StatHealth,B.StatArmor,B.StatStrength,B.StatAgility,B.StatSpellHit,B.StatSpellCrit,B.StatAttackPower,B.StatMeleeHit,B.StatMeleeCrit,B.StatMeleeHaste,B.StatArmorPenetration,B.StatExpertise],defaults:{gear:Mn.gear,epWeights:A.fromMap({[B.StatStrength]:2.88,[B.StatAgility]:1.22,[B.StatArmor]:.01,[B.StatAttackPower]:1,[B.StatExpertise]:2.26,[B.StatMeleeHaste]:1.23,[B.StatMeleeHit]:1.15,[B.StatMeleeCrit]:1.43,[B.StatArmorPenetration]:1.56,[B.StatSpellHit]:.71,[B.StatSpellCrit]:.07}),consumes:Gn,rotation:Bn,talents:Tn.data,specOptions:An,raidBuffs:O.create({giftOfTheWild:P.TristateEffectImproved,swiftRetribution:!0,strengthOfEarthTotem:P.TristateEffectImproved,icyTalons:!0,abominationsMight:!0,leaderOfThePack:P.TristateEffectRegular,sanctifiedRetribution:!0,bloodlust:!0,devotionAura:P.TristateEffectImproved,stoneskinTotem:P.TristateEffectImproved,moonkinAura:P.TristateEffectRegular,wrathOfAirTotem:!0,powerWordFortitude:P.TristateEffectImproved}),partyBuffs:W.create({heroicPresence:!1}),individualBuffs:G.create({blessingOfKings:!0,blessingOfMight:P.TristateEffectImproved}),debuffs:I.create({bloodFrenzy:!0,faerieFire:P.TristateEffectImproved,sunderArmor:!0,ebonPlaguebringer:!0,mangle:!0,heartOfTheCrusader:!0,shadowMastery:!0})},playerIconInputs:[],rotationInputs:Sn,petConsumeInputs:[j],includeBuffDebuffInputs:[J,_],excludeBuffDebuffInputs:[K,V,q],otherInputs:{inputs:[X,Y,Z,$,nn,L,Q]},encounterPicker:{showExecuteProportion:!1},presets:{talents:[Tn,Rn,Cn,En],gear:[Un,Mn,Hn,kn,In,Fn]}})}}export{wn as B,zn as D,Tn as F,Wn as O,Mn as P,Cn as U,Bn as a,An as b,Gn as c,Dn as d,vn as e,kn as f,On as g,Pn as h,Nn as i};
//# sourceMappingURL=sim-386779f8.chunk.js.map
